#!/usr/bin/env bash

function echo_truncate_lines_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	{
		printf '%s' $'1\n2\n'
	} | eval-tester --stdout=1 -- \
		echo-truncate-lines 1 --stdin

	{
		printf '%s' $'1\n2\n'
	} | eval-tester --stdout=$'1\n2' -- \
		echo-truncate-lines 2 --stdin

	{
		printf '%s' $'1\n2\n'
	} | eval-tester --stdout=$'1\n2' -- \
		echo-truncate-lines 3 --stdin

	{
		printf '%s' $'1\n2\na'
	} | eval-tester --stdout=$'1\n2' -- \
		echo-truncate-lines 2 --stdin

	{
		printf '%s' $'1\n2\na'
	} | eval-tester --stdout=$'1\n2\na' -- \
		echo-truncate-lines 3 --stdin

	echo-style --g1="TEST: $0"
	return 0
)
function echo_truncate_lines() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Truncate the <input> if it reaches more than <limit>.

			USAGE:
			echo-truncate-lines [...options] [--] <input>
			echo-lines ...<input> | echo-truncate-lines [...options]

			OPTIONS:
			<lines> | --limit=<limit>
			    The amount of lines to truncate to.

			$(stdinargs_options_help --)

			QUIRKS:
			This does not wrap lines. If you want wrapped lines, send to echo-wrap first, then pipe to echo-truncate-lines.

			Only a single <input> argument is supported, as multiple <input> arguments is ambiguous, do you want to truncate for each argument, or the total?

			Inlines are counted as whole lines, however they will remain inline.

			EXAMPLE:

			echo-truncate-lines 2 -- $'1\n2\n3\n4\n'

			    1
				2
			    # exit status: 0

		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_limit='' option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--limit='*) option_limit="${item#*=}" ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinargs options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*)
			if [[ -z $option_limit ]]; then
				option_limit="$item"
			else
				option_args+=("$item")
			fi
			;;
		esac
	done

	# check
	if [[ -z $option_limit ]]; then
		help 'No <limit> provided.'
	fi

	# =====================================
	# Action

	local result='' lines=0
	function on_line {
		if [[ $lines -ge $option_limit ]]; then
			return 210 # ECUSTOM 210 Processing complete, exit early
		fi
		lines="$((lines + 1))"
		result+="$1"$'\n'
	}
	function on_inline {
		if [[ $lines -ge $option_limit ]]; then
			return 210 # ECUSTOM 210 Processing complete, exit early
		fi
		lines="$((lines + 1))"
		result+="$1"
	}
	function on_finish {
		__print_lines "$result"
	}
	stdinargs --max-args=1 "${option_args[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		echo_truncate_lines_test
	else
		echo_truncate_lines "$@"
	fi
fi
