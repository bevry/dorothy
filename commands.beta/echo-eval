#!/usr/bin/env bash

# [Stack Exchange: How to apply shell command to each line of a command output?](https://stackoverflow.com/a/68310927/130638)
# `ls -1 | xargs -I %s -- echo %s`
# ^ xargs is too complicated, hence why this now exists

function echo_eval() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Execute the <command> on each stdin input.

			USAGE:
			... | echo-eval [...options] -- <command>

			EXAMPLE:
			echo-verbose A B C | echo-eval -- echo-lowercase --
			choose-path 'Which animation?' -- *.mp4 | echo-eval --stdin -- image-to-ascii -w 200 --fps 24

			OPTIONS:
			$(stdinargs_options_help --stdin)
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_cmd=() option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_cmd+=("$@")
			shift $#
			break
			;;
		'--'*)
			option_args+=("$item")
			;;
		*) option_args+=("$item") ;;
		esac
	done

	# checks
	if [[ ${#option_cmd[@]} -eq 0 ]]; then
		help "No <command> was provided."
	fi

	# =====================================
	# Action

	function on_input {
		"${option_cmd[@]}" "$@" # eval
	}

	stdinargs --stdin "${option_args[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	echo_eval "$@"
fi
