#!/usr/bin/env bash

# Sample XPS file available at:
# https://github.com/microsoft/Windows-classic-samples/blob/67a8cddc25880ebc64018e833f0bf51589fd4521/Samples/Win7Samples/xps/XpsLoadModifySave/sample1.xps

# Thanks to [Sriram Thaiyar](https://github.com/sri) for the [original ruby version](https://github.com/sri/xps2pdf/) which figured out [GhostPDL](https://ghostscript.com/download/gpdldnld.html) can be used for the conversion.

# This command is referenced in this gist:
# https://gist.github.com/balupton/7f15f6627d90426f12b24a12a4ac5975

function xps2pdf_() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Convert from XPS (XML Paper Specification) to PDF, using GXPS from GhostPDL from GhostScript.

			USAGE:
			xps2pdf [--] ...<path>

			EXAMPLES:
			xps2pdf -- *.xps             # all .xps files in the current directory
			xps2pdf -- one.xps two.xps   # specific files

			QUIRKS:
			If supported, the PDF files will be created with the same creation time as the original XPS files.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_paths=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_paths+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if test "${#option_paths[@]}" -eq 0; then
		help 'No <path>s provided.'
	fi

	# =====================================
	# Dependency

	setup-util-ghostscript

	# =====================================
	# Action

	local xps pdf ctime
	echo-style --bold="Converting " --code="${#paths[@]}" --bold=" files"
	for xps in "${option_paths[@]}"; do
		pdf="${xps%.xps}.pdf"

		echo-style --bold="Converting " --code="$xps" --bold=" to " --code="$pdf"
		gxps -sDEVICE=pdfwrite -sOutputFile="$pdf" -dNOPAUSE "$xps"

		if command-exists GetFileInfo SetFile; then
			ctime="$(GetFileInfo -m "$xps")"
			SetFile -d "$ctime" "$pdf"
		fi

		echo-style --success="Converted " --code="$xps" --success=" to " --code="$pdf"
	done

)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	xps2pdf_ "$@"
fi
