#!/usr/bin/env bash

function is_shapeshifter_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	local input inputs=(
		# read-key
		$'\e[A'    # up
		$'\eM'     # up
		$'\e[B'    # down
		$'\e[C'    # right
		$'\e[D'    # left
		$'\e[H'    # home
		$'\e[1~'   # home
		$'\e[1;2D' # home
		$'\r'      # carriage-return
		$'\e[F'    # end
		$'\e[4~'   # end
		$'\e[1;2C' # end
		$'\e[2~'   # insert
		$'\e[3~'   # delete
		$'\e[5~'   # page-up
		$'\e[6~'   # page-down
		$'\177'    # backspace
		$'\b'      # backspace
		# $'\n' # enter <-- don't do enter, as that is normal
		# $'\t' # tab <-- don't do tab, as that is normal
		$'\e[Z' # backtab

		# styles.bash
		$'\e[?1049h' # Default Screen Buffer
		$'\e[?1049l' # Alternative Screen Buffer

		# ansi escape codes
		# https://terminals-wiki.org/wiki/index.php/CodeChart:ANSI/ESC/CSI
		$'\e[A'    # Cursor Up
		$'\e[0A'   # Cursor Up
		$'\e[B'    # Cursor Down
		$'\e[0B'   # Cursor Down
		$'\e[C'    # Cursor Forward
		$'\e[0C'   # Cursor Forward
		$'\e[D'    # Cursor Back
		$'\e[0D'   # Cursor Back
		$'\e[E'    # Cursor Next Line
		$'\e[0E'   # Cursor Next Line
		$'\e[F'    # Cursor Previous Line
		$'\e[0F'   # Cursor Previous Line
		$'\e[G'    # Cursor Horizontal Absolute
		$'\e[0G'   # Cursor Horizontal Absolute
		$'\e[H'    # Cursor Position
		$'\e[0H'   # Cursor Position
		$'\e[0;H'  # Cursor Position
		$'\e[0;0H' # Cursor Position
		$'\e[I'    # Cursor Horizontal Tab
		$'\e[0I'   # Cursor Horizontal Tab
		$'\e[J'    # Erase Display
		$'\e[0J'   # Erase Display
		$'\e[K'    # Erase Line
		$'\e[0K'   # Erase Line
		$'\e[L'    # Insert Line
		$'\e[0L'   # Insert Line
		$'\e[M'    # Delete Line
		$'\e[0M'   # Delete Line
		$'\e[N'    # Erase Field
		$'\e[0N'   # Erase Field
		$'\e[O'    # Erase Area
		$'\e[0O'   # Erase Area
		$'\e[P'    # Delete Character
		$'\e[0P'   # Delete Character
		$'\e[Q'    # Select Editing Extent
		$'\e[0Q'   # Select Editing Extent
		$'\e[S'    # Scroll Up
		$'\e[0S'   # Scroll Up
		$'\e[T'    # Scroll Down
		$'\e[0T'   # Scroll Down
		$'\e[U'    # Next Page
		$'\e[0U'   # Next Page
		$'\e[V'    # Previous Page
		$'\e[0V'   # Previous Page
		$'\e[W'    # Cursor Tabulation Control
		$'\e[0W'   # Cursor Tabulation Control
		$'\e[X'    # Erase Character
		$'\e[0X'   # Erase Character
		$'\e[Y'    # Cursor Vertical Tab
		$'\e[0Y'   # Cursor Vertical Tab
		$'\e[Z'    # Cursor Backward Tab
		$'\e[0Z'   # Cursor Backward Tab
		$'\e[`'    # Horizontal Position Absolute
		$'\e[0`'   # Horizontal Position Absolute
		$'\e[a'    # Horizontal Position Right
		$'\e[0a'   # Horizontal Position Right
		$'\e[b'    # Repeat
		$'\e[0b'   # Repeat
		$'\e[c'    # Device Attributes
		$'\e[0c'   # Device Attributes
		$'\e[d'    # Vertical Position Absolute
		$'\e[0d'   # Vertical Position Absolute
		$'\e[e'    # Vertical Position Right
		$'\e[0e'   # Vertical Position Right
		$'\e[f'    # Horizontal Vertical Position
		$'\e[0f'   # Horizontal Vertical Position
		$'\e[g'    # Tabulation Clear
		$'\e[0g'   # Tabulation Clear
		$'\e[h'    # Set Mode
		$'\e[0h'   # Set Mode
		$'\e[i'    # Media Copy
		$'\e[0i'   # Media Copy
		$'\e[j'    # Horizontal Position Backward
		$'\e[0j'   # Horizontal Position Backward
		$'\e[k'    # Vertical Position Backward
		$'\e[0k'   # Vertical Position Backward
		$'\e[l'    # Reset Mode
		$'\e[0l'   # Reset Mode
		#$'\e[m' # Select Graphic Rendition <-- don't do this, as it is just colors
		#$'\e[0m' # Select Graphic Rendition <-- don't do this, as it is just colors
		$'\e[n'  # Device Status Report
		$'\e[0n' # Device Status Report
		$'\e[o'  # Define Area Qualifications
		$'\e[0o' # Define Area Qualifications
		# $'\e['    # Start Reversed String <-- don't do this, as it cannot be isolated
		$'\e[0['  # Start Reversed String
		$'\e\\'   # Parallel Texts
		$'\e[0\\' # Parallel Texts
		$'\e]'    # Start Directed String
		$'\e[0]'  # Start Directed String
		$'\e^'    # Select Implicit Movement Direction
		$'\e[0^'  # Select Implicit Movement Direction

		# https://www.gnu.org/software/screen/manual/html_node/Control-Sequences.html
		$'\e7'  # Save Cursor
		$'\e[s' # Save Cursor
		$'\e8'  # Restore Cursor
		$'\e[u' # Restore Cursor
	)

	eval-tester --status=1 -- is-shapeshifter -- "blah" "0123" $'\e[0m'
	eval-tester --status=0 -- is-shapeshifter -- "${inputs[@]}"

	echo-style --g1="TEST: $0"
	return 0
)
function is_shapeshifter() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks whether the <input> is a shapeshifter (something that outputs TTY control sequences)

			USAGE:
			is-shapeshifter [...options] [--] ...<input>
			echo-lines ...<input> | is-shapeshifter [...options]

			OPTIONS:
			$(stdinargs_options_help --)
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_quiet='yes' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*) option_args+=("$item") ;;
		esac
	done

	# =====================================
	# Action

	local found='no'
	if test "$option_quiet" = 'yes'; then
		function on_input {
			local input="$1"
			if __is_shapeshifter -- "$input"; then
				found='yes'
				return 210 # ECUSTOM 210 Processing complete, exit early
			fi
		}
	else
		function on_input {
			local input="$1"
			if __is_shapeshifter -- "$input"; then
				found='yes'
				printf '%s %q\n' 'yes:' "$input" >/dev/stderr
			else
				printf '%s %q\n' 'no:' "$input" >/dev/stderr
			fi
		}
	fi
	function on_finish {
		test "$found" = 'yes'
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		is_shapeshifter_test
	else
		is_shapeshifter "$@"
	fi
fi
