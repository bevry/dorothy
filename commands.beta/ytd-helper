#!/usr/bin/env bash

# FOR THUMBNAILS
# AVIF is successor to WebP and the closed-source HEIF, however lacks wide support.
# WebP is successor to the below, and offers wide support.
#   https://en.wikipedia.org/wiki/WebP
# JPEG patent expired in 2006
# JPEG-2000 is free to use
# PNG is an open-standard

# FOR CONTAINER
# https://en.wikipedia.org/wiki/Comparison_of_video_container_formats
# MKV is living, open-source and royalty free.
# WebM is VP9+Verbos only, it is royalty free, subset of MKV, wider support for ios, mac, and web browsers
# MP4 is royalty free with expired patents, supported by absolutely everything, but less featured than MKV and a bit outdated.
#   https://en.wikipedia.org/wiki/ISO/IEC_base_media_file_format

# FOR FORMAT
# AV1 is royalty free and successor to VP9 and HEVC/H265, but no widespread hardware support
# VP9 is royalty free and successor to VP8 and H264, with moderate hardware support
# MP4/M4A is an affordable format which patents are still valid until 2023, with ubiquitous hardware support
#    https://meta.wikimedia.org/wiki/Have_the_patents_for_MPEG-4_Visual_expired_yet%3F
#    https://video.stackexchange.com/a/14699
#
# AV1 playlist:
# https://www.youtube.com/playlist?list=PLyqf6gJt7KuHBmeVzZteZUlNUQAVLwrZS
#
# AV1 is not viable without widespread hardware support:
# https://en.wikipedia.org/wiki/AV1#Hardware
# Running `ytd-helper --av1 BCmB-otRDeo` which is a 1 minute video, takes DAYS on a 2017 MacBook Pro.
# Use `ytd-helper --vp9` instead until AV1 has widespread hardware support sometime in 2023-2025.

# youtube-dl --help
#  --no-overwrites                  Do not overwrite files
#  --continue                       Force resume of partially downloaded files. By default, youtube-dl will resume downloads if possible.
#  --all-formats                    Download all available video formats
#  --all-subs                       Download all the available subtitles of the video
#  --geo-bypass                     Bypass geographic restriction via faking X-Forwarded-For HTTP header
#  --write-all-thumbnails           Write all thumbnail image formats to disk
#  --write-annotations              Write video annotations to a .annotations.xml file
#  --write-auto-sub                 Write automatically generated subtitle file (YouTube only)
#  --write-description              Write video description to a .description file
#  --write-info-json                Write video metadata to a .info.json file
#  --write-sub                      Write subtitle file

function ytd_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Helper for interacting with [youtube-dl] and its clones. Wraps with custom flags for common tasks.

			USAGE:
			ytd-helper [...options] <url> [-- [... tool options]]

			OPTIONS:
			<url>
			    The URL to download the video from.

			--tool=<tool>
			    The tool to actually invoke, defaults to [ytd-dl] or [youtube-dl] based on avaliability.

			-- [... tool options]
			    Forward to the invoked <tool>. Refer to [youtube-dl --help].

			--best
			    Download the best video+audio combination.

			--embed
			    Embed as much as possible into the video+audio combination.

			--month
			    Restrict downloads to the past month.

			--archive
			    Download as much as possible, but do not use embed, as not all formats support embedding.

			--audio
			    Download only the best audio.

			--audio+video
			    Download the video+audio combination as usual, but also download the best audio.

			--mp4
			    Download the best video+audio combination, preferring MP4 for video and M4A for audio.

			--free
			    Download the best video+audio combination of royalty free codecs.

			--vp9
			    Download the best video+audio combination of VP9 for video, Opus for audio, and WebM for container.

			--av1
			    Download the best video+audio combination of AV1 for video, Opus for audio, and MKV for container.

			--channel
			    Download with each channel in its own folder.

			--playlist
			    Download with each playlist in its own folder, and each video in its own folder.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# =====================================
	# Dependencies

	setup-util-jq --quiet

	# =====================================
	# Action

	# arguments
	local item tool='' url=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--tool='*) tool="${item#*=}" ;;
		'--embed')
			cmd+=(
				--embed-subs
				--embed-thumbnail
				--add-metadata
			)
			;;
		'--month')
			cmd+=(
				--no-overwrites
				--dateafter "$(date-helper --ytd --month-ago)"
			)
			;;
		'--archive')
			cmd+=(
				--no-overwrites
				--continue
				--all-formats
				--all-subs
				--geo-bypass
				--write-all-thumbnails
				--write-annotations
				--write-auto-sub
				--write-description
				--write-info-json
				--write-sub
			)
			;;
		'--audio')
			cmd+=(
				--extract-audio
				--format 'bestaudio[ext=m4a]'
			)
			;;
		'--audio+video')
			ytd_helper --audio "${cmd[@]}" "$@"
			ytd_helper "${cmd[@]}" "$@"
			return 0
			;;
		'--best')
			# just using 'best' can download a 360p video
			# this combination will always download the best resolution and codec
			# consider bv*+ba/bv+na/b
			cmd+=(
				--format 'bestvideo+bestaudio/best'
			)
			;;
		'--mp4')
			cmd+=(
				--recode-video 'mp4'
				--merge-output-format 'mp4'
				--format 'bestvideo[ext=mp4]+bestaudio[ext=m4a]/best[ext=mp4]/best'
			)
			;;
		'--free')
			# `--prefer-free-formats` only prefers, it doesn't guarantee
			cmd+=(
				--format '(bestvideo[vcodec^=av01]/bestvideo[vcodec^=vp9])+bestaudio[acodec=opus]'
			)
			;;
		'--vp9')
			cmd+=(
				--recode-video 'webm'
				--merge-output-format 'webm'
				--format '(bestvideo[vcodec^=vp9]/bestvideo)+bestaudio[acodec=opus]'
				--postprocessor-args '-c:a libopus -c:v vp9 -strict experimental'
			)
			;;
		'--av1')
			cmd+=(
				--recode-video 'mkv'
				--merge-output-format 'mkv'
				--format '(bestvideo[vcodec^=av01]/bestvideo)+bestaudio[acodec=opus]'
				--postprocessor-args '-c:a libopus -c:v av1 -strict experimental'
			)
			;;
		'--playlist')
			cmd+=(
				--playlist-reverse
				--ignore-errors
				--output '%(playlist_id)s -- %(playlist_title)s/%(playlist_index)s/%(id)s -- %(title)s.%(ext)s'
			)
			;;
		'--')
			cmd+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$url"; then
				url="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# handle tool
	if test -z "$tool"; then
		if command-exists 'yt-dlp'; then
			tool='yt-dlp'
		elif command-exists 'youtube-dl'; then
			tool='youtube-dl'
		else
			get-installer --first-success --invoke --quiet -- ytd-dlp youtube-dl
			if command-exists 'yt-dlp'; then
				tool='yt-dlp'
			elif command-exists 'youtube-dl'; then
				tool='youtube-dl'
			fi
		fi
	fi
	if test -z "$tool" || command-missing -- "$tool"; then
		echo-error "tool [$tool] is not available"
		return 3 # ESRCH 3 No such process
	fi
	cmd=("$tool" "${cmd[@]}")

	# handle url
	cmd+=("$url")

	# =====================================
	# Action

	command "${cmd[@]}" # eval
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	ytd_helper "$@"
fi
