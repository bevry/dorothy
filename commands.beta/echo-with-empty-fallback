#!/usr/bin/env bash

function echo_with_empty_fallback() (
	source "$DOROTHY/sources/stdinargs.bash"

	function help {
		cat <<-EOF >&2
			ABOUT:
			Output <fallback> if all <input> is zero-length.
			Similar to [echo-with-whitespace-fallback], [eval-on-empty-stdin], [eval-on-not-empty-stdin].

			USAGE:
			echo-with-empty-fallback <fallback> [...options] [--] ...<input>
			echo-lines ...<input> | echo-with-empty-fallback <fallback> [...options]

			OPTIONS:
			<fallback> | --fallback=<fallback>
			    The fallback to use if <input> is empty.

			$(stdinargs_options_help --)

			EXAMPLE:

			echo-with-empty-fallback 'my-fallback-value'

			    my-fallback-value
			    # exit status: 0

			printf '' | echo-with-empty-fallback 'my-fallback-value'

			    my-fallback-value
			    # exit status: 0

			printf ' ' | echo-with-empty-fallback 'my-fallback-value' --stdin

			    # exit status: 0

			printf 'value' | echo-with-empty-fallback 'my-fallback-value' --stdin

			    value
			    # exit status: 0
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local rand="$RANDOM"
	local item option_fallback="$rand" option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--fallback='*) option_fallback="${item#*=}" ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinargs options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		'--'*) option_args+=("$item") ;;
		*)
			if [[ $option_fallback == "$rand" ]]; then
				option_fallback="$item"
			else
				option_args+=("$item")
			fi
			;;
		esac
	done

	# check for expected
	if [[ $option_fallback == "$rand" ]]; then
		help 'Missing required argument: <fallback>'
	fi

	# action
	local inputs=''
	function on_inline {
		inputs+="$1"
	}
	function on_line {
		inputs+="$1"$'\n'
		return 210 # ECUSTOM 210 Processing complete, exit early
	}
	function on_finish {
		if [[ -z $inputs ]]; then
			__print_string "$fallback"
		else
			__print_string "$inputs"
		fi
	}
	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	echo_with_empty_fallback "$@"
fi
