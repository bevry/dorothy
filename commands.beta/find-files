#!/usr/bin/env bash

function find_files() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Find files within a directory.

			USAGE:
			find-files [...options] [<path>]

			OPTIONS:
			--path=<path> | <path>
			    Provide <path> to specify which directory should be searched for files.
			    If <path> was not provided then the current working directory will be used.

			--extension=<extension>
			    Provide <extension> to specify which file extension the files should have.

			--exec=<exec>
			    Provide <exec> to specify a command to run on each matching file.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# options
	local item path='' extension='' exec=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--path='*) path="${item#*=}" ;;
		'--extension='*) extension="${item#*=}" ;;
		'--exec='*) exec="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$path"; then
				path="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# adjust path
	if test -z "$path"; then
		path="$(pwd)"
	fi

	# =====================================
	# Action

	# args
	local args=("$path")
	if test -n "$extension"; then
		# args+=('-path' "**/*.$extension")
		args+=('-name' "*.$extension")
		# ^^ glob is handled by find, not bash
	fi

	# act
	if test -n "$exec"; then
		find "${args[@]}" -exec "$exec" {} \;
	else
		find "${args[@]}"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	find_files "$@"
fi
