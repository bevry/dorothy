#!/usr/bin/env bash

function is_nonempty_file() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P sudo-helper)"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks if <path> is a non-empty file.

			USAGE:
			is-nonempty-file [...options] [--] ...<path>

			OPTIONS:
			--sudo
			    If specified, use sudo on filesystem interactions.
			--user=<user>
			--group=<group>
			    If specified use this user and/or group for filesystem interactions.

			RETURNS:
			[0] if all <path>s were non-empty files.
			[1] if any <path>s were not a non-empty file.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_paths=() option_sudo='no' option_user='' option_group=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--')
			option_paths+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		help "No <path>s provided."
	fi

	# =====================================
	# Action

	function __are_nonempty_files {
		local path
		for path in "$@"; do
			[[ -s $path ]] || return # explicit return with [[ required for bash v3
		done
		return 0
	}

	# if need sudo, use visa sudo
	if [[ "$option_sudo" = 'yes' || -n "$option_user" || -n "$option_group" ]]; then
		sudo_helper --inherit --user="$option_user" --group="$option_group" \
			-- __are_nonempty_files "${option_paths[@]}"
		return
	fi

	# if don't need sudo, use directly
	__are_nonempty_files "${option_paths[@]}"
	return
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	is_nonempty_file "$@"
fi
