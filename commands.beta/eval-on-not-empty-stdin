#!/usr/bin/env bash

function eval_on_not_empty_stdin() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Execute the <command> if stdin is not empty; the stdin content will still be available to whatever eventually reads it.
			Companion to [eval-on-empty-stdin].

			USAGE:
			eval-on-not-empty-stdin [--] ...<command>
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_cmd=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_cmd+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			option_cmd+=("$item" "$@")
			shift $#
			break
			;;
		esac
	done

	# checks
	if [[ ${#option_cmd[@]} -eq 0 ]]; then
		help "No <command> was provided."
	fi

	# =====================================
	# Action

	# test cases:
	# echo-lines -- 1 2 | ( eval-on-not-empty-stdin -- cat )
	# true | ( eval-on-not-empty-stdin -- printf '%s\n' sup )

	# doesn't work: grep --regexp='^' | "${option_cmd[@]}" # eval

	# doesn't work:
	# if grep --quiet --regexp='^'; then
	# 	"${option_cmd[@]}" # eval
	# 	return
	# fi
	# return 0

	# works:
	setup-util-moreutils --quiet # ifne
	ifne "${option_cmd[@]}"
	return
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	eval_on_not_empty_stdin "$@"
fi
