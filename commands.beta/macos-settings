#!/usr/bin/env bash

# @todo add more options using plistbuddy
# https://github.com/diessica/dotfiles/blob/2d5bd73aca984ae6afd40872e970b0d15692025c/misc/macos#L276-L293
# https://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/
# https://marcosantadev.com/manage-plist-files-plistbuddy/

# @todo add more options using applescript, e.g.
# sudo-helper -- osascript -e 'tell application "System Events" to set require password to wake of security preferences to false'

function macos_settings() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Guides you through setting various hidden macOS settings.

			USAGE:
			macos-settings
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# assert compatibility
	if ! is-mac; then
		help 'This command is only purposeful on macOS, which you are not running.'
	fi

	# =====================================
	# Action

	# -------------------------------------
	# Get Preferences

	# ask
	local fodder choices
	fodder="$(
		choose-option --multi \
			--question="Which settings would you like to enable" \
			--label -- \
			dockside "Select which side of the screen the dock is on" \
			dockhide "Automatically hide and show the dock" \
			dockinstant "Show the dock instantly" \
			dockmin "Minimise applications to their dock" \
			docksmall "Make the dock icons smaller" \
			groupwin "Group windows by apps in mission control" \
			manualspaces "Sort spaces manually instead of automatically" \
			safarinopass "Don't store password in Safari" \
			safarifullurls "Show full URLs in Safari" \
			safarinoopen "Disable automatically opening Safari downloads" \
			safarinobar "Hide Safari's bookmark bar" \
			finderhome "Set Finder home to your user directory" \
			allextensions "Show all file extensions" \
			showhidden "Show hidden files" \
			hideextwarn "Hide file extension change warning" \
			showstatusbar "Show Finder status bar" \
			hidetrashwarn "Hide empty trash warning" \
			hidedesktop "Hide desktop icons" \
			screenshotdir "Save screenshots to ~/Desktop/Screenshots" \
			disableautocorrect "Disable autocorrect" \
			updatedaily "Check for software updates daily" \
			devcrashes "Show debug information when an application crashes"
	)"
	if test -z "$fodder"; then
		print_line 'No choices selected.'
		return 0
	fi
	mapfile -t choices <<<"$fodder" # <( destroys stdin
	print_line "Proceeding with these choices: ${choices[*]}"

	# -------------------------------------
	# Dock

	defaults delete com.apple.dock autohide-time-modifier &>/dev/null || :

	if is-needle --needle=dockside -- "${choices[@]}"; then
		local dock_side
		dock_side="$(
			choose-option \
				--question='Which side to show the dock?' \
				-- right left top bottom
		)"
		defaults write com.apple.dock orientation "$dock_side"
		echo
	fi

	if is-needle --needle=dockhide -- "${choices[@]}"; then
		defaults write com.apple.dock autohide -bool true
		if is-needle --needle=dockinstant -- "${choices[@]}"; then
			defaults write com.apple.dock autohide-delay -float 0
		else
			defaults delete com.apple.dock autohide-delay &>/dev/null || :
		fi
	else
		defaults delete com.apple.dock autohide &>/dev/null || :
	fi

	if is-needle --needle=dockmin -- "${choices[@]}"; then
		defaults write com.apple.dock minimize-to-application -bool true
	else
		defaults delete com.apple.dock minimize-to-application &>/dev/null || :
	fi

	if is-needle --needle=docksmall -- "${choices[@]}"; then
		defaults write com.apple.dock tilesize -int 32
	fi

	if is-needle --needle=groupwin -- "${choices[@]}"; then
		defaults write com.apple.dock expose-group-apps -bool true
	else
		defaults delete com.apple.dock expose-group-apps &>/dev/null || :
	fi

	if is-needle --needle=manualspaces -- "${choices[@]}"; then
		defaults write com.apple.dock mru-spaces -bool false
	else
		defaults delete com.apple.dock mru-spaces &>/dev/null || :
	fi

	# -------------------------------------
	# Safari

	if is-needle --needle=safarinopass -- "${choices[@]}"; then
		defaults write com.apple.Safari AutoFillPasswords -bool false
	else
		defaults delete com.apple.Safari AutoFillPasswords &>/dev/null || :
	fi

	if is-needle --needle=safarinohome -- "${choices[@]}"; then
		defaults write com.apple.Safari HomePage -string 'about:blank'
	fi

	if is-needle --needle=safarifullurls -- "${choices[@]}"; then
		defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true
	else
		defaults delete com.apple.Safari ShowFullURLInSmartSearchField &>/dev/null || :
	fi

	if is-needle --needle=safarinoopen -- "${choices[@]}"; then
		defaults write com.apple.Safari AutoOpenSafeDownloads -bool false
	else
		defaults delete com.apple.Safari AutoOpenSafeDownloads &>/dev/null || :
	fi

	if is-needle --needle=safarinobar -- "${choices[@]}"; then
		defaults write com.apple.Safari ShowFavoritesBar-v2 -bool false
	else
		defaults delete write com.apple.Safari ShowFavoritesBar-v2 &>/dev/null || :
	fi

	# -------------------------------------
	# Finder

	if is-needle --needle=finderhome -- "${choices[@]}"; then
		defaults write com.apple.finder NewWindowTargetPath "file://$HOME"
	fi

	# https://software.com/mac/tweaks/show-file-extensions-in-finder
	if is-needle --needle=allextensions -- "${choices[@]}"; then
		defaults write NSGlobalDomain AppleShowAllExtensions -bool true
	else
		defaults delete NSGlobalDomain AppleShowAllExtensions &>/dev/null || :
	fi

	# https://software.com/mac/tweaks/show-all-files-in-finder
	if is-needle --needle=showhidden -- "${choices[@]}"; then
		defaults write com.apple.finder AppleShowAllFiles -bool true
	else
		defaults delete com.apple.finder AppleShowAllFiles &>/dev/null || :
	fi

	# http://osxdaily.com/2012/04/11/disable-the-file-extension-change-warning-in-mac-os-x/
	if is-needle --needle=hideextwarn -- "${choices[@]}"; then
		defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
	else
		defaults delete com.apple.finder FXEnableExtensionChangeWarning &>/dev/null || :
	fi

	if is-needle --needle=showstatusbar -- "${choices[@]}"; then
		defaults write com.apple.finder ShowStatusBar -bool false
	else
		defaults delete com.apple.finder ShowStatusBar &>/dev/null || :
	fi

	if is-needle --needle=hidetrashwarn -- "${choices[@]}"; then
		defaults write com.apple.finder WarnOnEmptyTrash -bool false
	else
		defaults delete write com.apple.finder WarnOnEmptyTrash &>/dev/null || :
	fi

	# https://software.com/mac/tweaks/hide-desktop-icons
	if is-needle --needle=hidedesktop -- "${choices[@]}"; then
		defaults write com.apple.finder CreateDesktop -bool false
		defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
		defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
		defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
		defaults write com.apple.finder ShowMountedServersOnDesktop -bool false
	else
		defaults delete com.apple.finder CreateDesktop &>/dev/null || :
		defaults delete com.apple.finder ShowRemovableMediaOnDesktop &>/dev/null || :
		defaults delete com.apple.finder ShowHardDrivesOnDesktop &>/dev/null || :
		defaults delete com.apple.finder ShowExternalHardDrivesOnDesktop &>/dev/null || :
		defaults delete com.apple.finder ShowMountedServersOnDesktop &>/dev/null || :

	fi

	# -------------------------------------
	# Global

	if is-needle --needle=screenshotdir -- "${choices[@]}"; then
		mkdir -p "$HOME/Desktop/Screenshots"
		defaults write com.apple.screencapture location "$HOME/Desktop/Screenshots"
	else
		defaults delete com.apple.screencapture location &>/dev/null || :
	fi

	if is-needle --needle=disableautocorrect -- "${choices[@]}"; then
		defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
	else
		defaults delete NSGlobalDomain NSAutomaticSpellingCorrectionEnabled &>/dev/null || :
	fi

	if is-needle --needle=updatedaily -- "${choices[@]}"; then
		defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
	else
		defaults delete com.apple.SoftwareUpdate ScheduleFrequency &>/dev/null || :
	fi

	# https://en.wikipedia.org/wiki/Apple_Developer_Tools#CrashReporterPrefs
	if is-needle --needle=devcrashes -- "${choices[@]}"; then
		defaults write com.apple.CrashReporter DialogType -string 'developer'
	else
		defaults delete com.apple.CrashReporter DialogType &>/dev/null || :
	fi

	# -------------------------------------
	# Reset

	killall SystemUIServer
	killall Finder
	killall Dock
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	macos_settings "$@"
fi
