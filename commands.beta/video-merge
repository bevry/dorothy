#!/usr/bin/env bash

function video_merge() (
	source "$DOROTHY/sources/bash.bash"

	local index input

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Concatenate multiple video files into a single video, without having to transcode.
			https://trac.ffmpeg.org/wiki/Concatenate

			USAGE:
			video-merge [<output>] -- ...<input>

			EXAMPLE:
			video-merge 'result.m4v' -- 'input1.m4v' 'input2.m4v'

			QUIRKS:
			If <output> is not provided, the basename of the current directory will be used.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item inputs=() output=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--output='*) output="${item#*=}" ;;
		'--')
			inputs+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$output"; then
				output="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# make inputs absolute, and fetch extension for generating output if not defined
	local extension=''
	for index in "${!inputs[@]}"; do
		# check existence
		input="${inputs[index]}"
		if test ! -f "$input"; then
			# fail
			help "The input file does not exist: $input"
		else
			# extract extension
			if test -z "$extension"; then
				extension="$(fs-extension -- "$input")"
			fi
			# convert to absolute path
			inputs[index]="$(fs-absolute -- "$input")"
		fi
	done

	# ensure output
	if test -z "$output"; then
		output="$(basename "$(pwd)").$extension"
	fi

	# make output absolute
	output="$(fs-absolute -- "$output")"

	# check if the output file already exists, if it does, prompt for removal otherwise fail
	if is-present -- "$output"; then
		if confirm --positive --ppid=$$ -- "The output file already exists, remove it?" "$(echo-style --code_notice="$output")"; then
			rm "$output"
		else
			help "The output file already exists: $output"
		fi
	fi

	# confirm the output is not an input
	for index in "${!inputs[@]}"; do
		if test "$output" = "${inputs[index]}"; then
			echo-style --notice="The output file has been automatically trimmed from the input files."
			inputs[index]=''
		fi
	done

	# =====================================
	# Action

	# output the input list
	local temp_list
	temp_list="$(
		fs-temp \
			--directory='video-merge' \
			--file --extension='txt'
	)"
	for input in "${inputs[@]}"; do
		if test -n "$input"; then
			print_line "file $(echo-quote -- "$input")" >>"$temp_list"
		fi
	done
	echo-file -- "$temp_list"

	# concatenate
	eval-helper --quiet \
		--pending="$(echo-style --bold="Concatenating the video files into: " --code="$output")" \
		--success="$(echo-style --success="Concatenated the video files into: " --code="$output")" \
		--failure="$(echo-style --error="Failed to concatenate the video files into: " --code="$output")" \
		-- ffmpeg -f concat -safe 0 -i "$temp_list" -c copy "$output"

	# ask if they want to open it
	if is-tty && confirm --positive --ppid=$$ -- "Open the concatenated video file?"; then
		open "$output"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	video_merge "$@"
fi
