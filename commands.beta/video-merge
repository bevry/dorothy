#!/usr/bin/env bash

# @todo merge into [convert-helper]

# Video by Al d'Vilas: https://www.pexels.com/video/time-lapse-video-of-the-sky-5786143/
# https://videos.pexels.com/video-files/5786143/5786143-hd_1920_1080_30fps.mp4
# https://videos.pexels.com/video-files/5786143/5786143-sd_426_240_30fps.mp4

# Video by Yaroslav Shuraev from Pexels: https://www.pexels.com/video/close-up-shot-of-bushes-5978808/
# https://videos.pexels.com/video-files/5978808/5978808-uhd_4096_2160_24fps.mp4
# https://videos.pexels.com/video-files/5978808/5978808-sd_426_226_24fps.mp4

function video_merge_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	# prepare
	local root video_one video_two video_output
	root="$(fs-temp --directory='video-merge' --directory='tests')"
	fs-rm --quiet --no-confirm -- "$root"
	video_one="$(
		fs-temp \
			--root="$root" \
			--file='5786143.mp4'
	)"
	video_two="$(
		fs-temp \
			--root="$root" \
			--file='5978808.mp4'
	)"
	video_two="$(
		fs-temp \
			--root="$root" \
			--file='5978808.mp4'
	)"
	video_output="$(
		fs-temp \
			--root="$root" \
			--file='output.mp4'
	)"
	down --url='https://videos.pexels.com/video-files/5786143/5786143-sd_426_240_30fps.mp4' --filepath="$video_one"
	down --url='https://videos.pexels.com/video-files/5978808/5978808-sd_426_226_24fps.mp4' --filepath="$video_two"

	# test
	eval-tester -- \
		video-merge "$video_output" -- "$video_one" "$video_two"

	# done
	echo-style --g1="TEST: $0"
)
function video_merge() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Concatenate multiple video files into a single video, without having to transcode.
			https://trac.ffmpeg.org/wiki/Concatenate

			USAGE:
			video-merge [...options] [<output>] -- ...<input>

			OPTIONS:
			--elevated=<elevated>
			--elevate=<elevate>
			--user=<user>
			--group=<group>
			--reason=<reason>
			    Forwarded to [is-file], [fs-absolute], [fs-rm], [eval-helper].

			EXAMPLE:
			video-merge 'merged.m4v' -- 'input1.m4v' 'input2.m4v'

			QUIRKS:
			If <output> is not provided, the basename of the current directory will be used. If an extension if not provided within <output> the first <input> extension will be used. The <output> cannot be an <input>.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='' option_output='' option_inputs=() option_elevated='' option_elevate='' option_user='' option_group='' option_reason=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--output='* | '--target='*) option_output="${item#*=}" ;;
		# <elevate>
		'--elevated='*) option_elevated="${item#*=}" ;;
		'--no-elevate'* | '--elevate'*)
			option_elevate+="$(get-flag-value --affirmative --fallback-on-empty --fallback="$option_elevate" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--reason='*) option_reason="${item#*=}" ;;
		# </elevate>
		'--')
			option_inputs+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $option_output ]]; then
				option_output="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# fetch extension
	local extension=''
	if [[ -n $option_output ]]; then
		extension="$(fs-path --extension -- "$option_output")"
	fi

	# make inputs absolute
	# fetch extension if still empty
	local index
	for index in "${!option_inputs[@]}"; do
		# check existence
		input="${option_inputs[index]}"
		if is-file --elevated="$option_elevated" --elevate="$option_elevate" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$input"; then
			# fetch extension
			if [[ -z $extension ]]; then
				extension="$(fs-path --extension -- "$input")"
			fi
			# convert to absolute path
			option_inputs[index]="$(fs-absolute --elevated="$option_elevated" --elevate="$option_elevate" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$input")"
		else
			# fail
			help "The input file does not exist: $input"
		fi
	done

	# use directory name if no output is provided
	if [[ -z $option_output ]]; then
		option_output="$(fs-path --no-parents -- "$(pwd)").$extension"
	fi

	# make output absolute
	option_output="$(fs-absolute --elevated="$option_elevated" --elevate="$option_elevate" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$option_output")"

	# if the output is an input, error, as the user knows best
	for index in "${!option_inputs[@]}"; do
		if [[ $option_output == "${option_inputs[index]}" ]]; then
			help "The <output> cannot be an <input>: $option_output"
		fi
	done

	# check if the output file already exists, if it does, prompt for removal otherwise fail
	fs-rm --confirm --no-confirm-if-empty --elevated="$option_elevated" --elevate="$option_elevate" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$option_output"

	# prepare the working directory
	local root input_list
	root="$(
		fs-temp \
			--directory='video-merge' \
			--directory
	)"
	input_list="$(
		fs-temp \
			--root="$root" \
			--file='input_list' --extension='txt'
	)"

	# generate the input list
	local input
	for input in "${option_inputs[@]}"; do
		input="$(echo-escape-command -- "$input")"
		__print_lines "file: $input" >>"$input_list"
	done
	if [[ $option_quiet = 'no' ]]; then
		echo-file -- "$input_list"
	fi

	# concatenate
	eval-helper --quiet="$option_quiet" --wrap --alternative-screen-buffer --elevated="$option_elevated" --elevate="$option_elevate" --user="$option_user" --group="$option_group" --reason="$option_reason"  \
		--pending="$(
			echo-style --bold='Concatenating the video files into: ' --code="$option_output"
		)" \
		--success="$(
			echo-style --success='Concatenated the video files into: ' --code="$option_output"
		)" \
		--failure="$(
			echo-style --error='Failed to concatenate the video files into: ' --code="$option_output"
		)" -- \
		ffmpeg -f concat -safe 0 -i "$input_list" -c copy "$option_output"

	# ask if they want to open it
	if is-headful && confirm --linger --positive --ppid=$$ -- 'Open the concatenated video file?'; then
		open "$option_output"
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		video_merge_test
	else
		video_merge "$@"
	fi
fi
