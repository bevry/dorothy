#!/usr/bin/env bash

function icloud_helper() (
	source "$DOROTHY/sources/bash.bash"

	# assert compatibility
	if ! is-mac; then
		echo-style --notice="[$0] is only intended to be run on macOS systems, skipping." >/dev/stderr
		return 0
	fi

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			icloud-helper <action>

			ACTIONS:
			status
			    get the current sync status of iCloud Drive

			evict -- ...<file>
			    evict a file or files from the local iCloud Drive, keeping the paths remotely

			clean
			    evict everything from the local iCloud Drive, keeping everything remotely

			size
			    get the size of the local iCloud Drive.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$action"; then
				action="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if test -z "$action"; then
		help "No <action> was provided."
	fi

	# =====================================
	# Actions

	function clean {
		find "$HOME/Library/Mobile Documents/com~apple~CloudDocs" -type f -exec "$0" evict -- {} \;
	}

	function evict {
		local path
		for path in "$@"; do
			# .DS_Store files are not added to iCloud Drive
			# .icloud files are placeholders for non-local files
			# .screenflow does not play niceley with iCloud Drive, as it is a secret directory
			if test ! -d "$path" && [[ $path != *".DS_Store" && $path != *".icloud" ]]; then
				if [[ $path == *".screenflow"* || $path == *".sketch"* ]]; then
					print_line "skipped $path, as it is a directory in disguise as a file, and can only evict files"
				else
					brctl evict "$path"
				fi
			else
				print_line "skipped $path, as it is a directory or excluded path"
			fi
		done
	}

	function status {
		brctl status com.apple.CloudDocs
	}

	function size {
		get-size -- "$HOME/Library/Mobile Documents/com~apple~CloudDocs"
	}

	# =====================================
	# Act

	if test "$(type -t "$action")" = 'function'; then
		"$action" "${option_args[@]}"
	else
		print_line "Action [$action] not yet implemented." >/dev/stderr
		return 78 # ENOSYS 78 Function not implemented
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	icloud_helper "$@"
fi
