#!/usr/bin/env bash

function echo_wrap_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-style --h1="TEST: $0"

	local inputs widths expectations
	inputs=(
		$'123456123456 123456 \n1 2 3\t4 5 6 7\t8 9\n\n 1 2 3\t4 5 7\n\t8\t\n9\n\n'"$(echo-style --green='1' --red='2' --blue='3' --yellow='4' --magenta='5' --cyan='6' --white='7' --black='8' --reset='9')"
		'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
		'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
	)
	widths=(
		6
		80
		0
	)
	expectations=(
		"$(
			cat <<-EOF
				123456
				123456
				123456
				1 2 3
				4 5 6
				7    8
				9

				 1 2 3
				4 5 7
				    8
				9

				$(echo-style --green='1' --red='2' --blue='3' --yellow='4' --magenta='5' --cyan=$'6\n' --white='7' --black='8' --reset='9')
			EOF
		)"
		$'12345678901234567890123456789012345678901234567890123456789012345678901234567890\n1234567890'
		'123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890'
	)
	local index input width expectation
	for index in "${!inputs[@]}"; do
		input="${inputs[index]}"
		width="${widths[index]}"
		expectation="${expectations[index]}"
		eval_tester --stdout="$expectation" \
			-- echo-wrap --columns="$width" -- "$input"
		eval_tester --stdout="$expectation" \
			-- echo-wrap --width="$width" <<<"$input"
	done

	echo-style --g1="TEST: $0"
	return 0
)
function echo_wrap() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Process the input wrapping it to a specified width, respecting ansi escape codes / colors.

			USAGE:
			cat "$DOROTHY/README.md" | echo-wrap [...options]

			OPTIONS:
			--columns=<columns> | --width=<columns>
			    The column width to wrap to. Default is the terminal column width if available, otherwise 0 which disables wrapping.

			$(stdinargs_options_help --)

			QUIRKS:
			Tabs are converted into 4 spaces. Broken spacing (spacing at the end or start of a segment) is trimmed. Spacing is preserved at the start and end of input lines. Backticks are trimmed as they are used internally as a delimiter.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_columns='' option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--columns='* | '--width='*) option_columns="${item#*=}" ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		'--'*) option_args+=("$item") ;;
		*) option_args+=("$item") ;;
		esac
	done

	# try to detect width, otherwise default to 0
	if [[ -z $option_columns ]]; then
		local terminal_size=()
		mapfile -t terminal_size < <(get-terminal-lines-and-columns || :)
		if [[ ${#terminal_size[@]} -eq 2 ]]; then
			option_columns="${terminal_size[1]}"
		fi
	fi
	if [[ -z $option_columns ]]; then
		option_columns=0
	fi

	# =====================================
	# Dependencies

	local bin_gawk_or_awk awk_script

	# =====================================
	# Action

	local buffer=''
	function on_inline {
		buffer+="$1"
	}
	if [[ "$option_columns" -le 0 ]]; then
		function on_line {
			buffer+="$1"
		}
		function on_finish {
			__print_string "$buffer"
		}
	else
		bin_gawk_or_awk="$(echo-gnu-command --install -- gawk)"
		awk_script="$(type -P echo-wrap.awk)"
		function on_line {
			buffer+="$1\`"
		}
		function on_finish {
			__print_string "$buffer" | "$bin_gawk_or_awk" -v option_wrap_width="$option_columns" -f "$awk_script"
		}
	fi
	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		echo_wrap_test
	else
		echo_wrap "$@"
	fi
fi
