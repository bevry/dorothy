#!/usr/bin/env bash

function echo_wrap_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-style --h1="TEST: $0"

	local input expected
	input=$'123456123456 123456 \n1 2 3\t4 5 6 7\t8 9\n\n 1 2 3\t4 5 7\n\t8\t\n9\n'
	expected="$(
		cat <<-EOF
			123456
			123456
			123456
			1 2 3
			4 5 6
			7    8
			9

			 1 2 3
			4 5 7
			    8
			9

		EOF
	)"
	eval_tester --name='echo-wrap is working as expected' --stdout="$expected" \
		-- echo-wrap --width=6 <<<"$input"

	echo-style --g1="TEST: $0"
	return 0
)
function echo_wrap() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Process the input wrapping it to a specified width, respecting ansi escape codes / colors.

			USAGE:
			cat "$DOROTHY/README.md" | echo-wrap [...options]

			OPTIONS:
			--width=<width>
			    The column width to wrap to. Default is the terminal width.

			$(stdinargs_options_help --)

			QUIRKS:
			Tabs are converted into 4 spaces. Broken spacing (spacing at the end or start of a segment) is trimmed. Spacing is preserved at the start and end of input lines.
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_width='' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--width='*) option_width="${item#*=}" ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		'--'*) option_args+=("$item") ;;
		*) option_args+=("$item") ;;
		esac
	done

	if test -z "$option_width" && is-tty && command-exists -- tput; then
		option_width="$(tput cols || :)"
	fi
	if test -z "$option_width"; then
		option_width=80
	fi

	# =====================================
	# Dependencies

	local bin_gawk_or_awk awk_script
	bin_gawk_or_awk="$(echo-gnu-command --install --no-fallback -- gawk)"
	awk_script="$(type -P echo-wrap.awk)"

	# =====================================
	# Action

	local buffer=''
	function on_line {
		buffer+="${1}ï¿½"
	}
	function on_inline {
		buffer+="$1"
	}
	function on_finish {
		__print_string "$buffer" | "$bin_gawk_or_awk" -v option_wrap_width="$option_width" -f "$awk_script"
	}
	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_wrap_test
	else
		echo_wrap "$@"
	fi
fi
