#!/usr/bin/env bash
# shellcheck disable=SC2164,SC1091
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/arrays.bash"
if test "$ARRAYS" != 'yes'; then
	echo 'Bash version too outdated for proper array support...' >/dev/stderr
	echo "... will run [$0 $*] in a simplistic form instead." >/dev/stderr
	while is-needle '--' "$@"; do
		shift
	done
	("$@")
	exit "$?"
fi

# helper
function eval_collapse() {
	# prepare
	local ec=0 status='' headers body options QUIET option_pending option_success option_failure args
	headers="$(mktemp)"
	body="$(mktemp)"

	# options
	mapfile -t options < <(echo-before-separator "$@")
	QUIET="$(get-flag-value quiet --missing="${QUIET-}" -- "${options[@]}" | echo-affirmative || get-flag-value verbose --missing="${VERBOSE:-"no"}" -- "$@" | echo-non-affirmative || :)" # yes/no, default yes
	option_pending="$(get-flag-value pending -- "${options[@]}")"
	option_success="$(get-flag-value success -- "${options[@]}")"
	option_failure="$(get-flag-value failure -- "${options[@]}")"
	option_wrap="$(get-flag-value wrap --missing=yes -- "${options[@]}" | echo-affirmative)"
	mapfile -t args < <(echo-after-separator "$@")

	# footer
	function eval_collapse_footer() {
		local ec="$1" option_success="$2" option_failure="$3"
		if test "$ec" -eq 0; then
			if test -n "$option_success"; then
				echo "$option_success"
			fi
		else
			if test -n "$option_failure"; then
				echo "$option_failure"
			fi
		fi
	}
	# shellcheck disable=SC2064
	trap "eval_collapse_footer \$? ${option_success@Q} ${option_failure@Q}" RETURN

	# headers
	if test -n "$option_pending"; then
		echo "$option_pending" | tee -a "$headers"
	fi
	if test "$option_wrap" = 'yes'; then
		echo-color --oe --h3="${args[*]}" --ce | tee -a "$headers"
	fi

	# keep headers while we run the command and revolve door its output
	ec=0 && ("${args[@]}" 2>&1 | tee "$body" | echo-revolving-door) || ec="$?"

	# clear headers, we can re-add them if necessary
	echo-clear-lines <"$headers"

	# if queit, and successful, then we are done
	if test "$QUIET" = 'yes' -a "$ec" -eq 0; then
		return "$ec"
	fi
	# otherwise we want to output things

	# prepare status output
	if test "$ec" -eq 0; then
		# success
		status="$(echo-color -n --g3="[$ec]")"
	else
		# failure
		status="$(echo-color -n --e3="[$ec]")"
	fi

	# if it didn't output anything, then output only the header footer combo, and be done
	if test -z "$(cat "$body")"; then
		echo-color --oe --h3="${args[*]}" --ces "$status"
		return "$ec"
	fi
	# the command outputted things

	# outpout wrap header
	if test "$option_wrap" = 'yes'; then
		echo-color --oe --h3="${args[*]}" --ce | tee -a "$headers"
	fi
	# if verbose, or failure, output body
	if test "$QUIET" = 'no' -o "$ec" -ne 0; then
		cat "$body"
	fi
	# outpout wrap footer
	if test "$option_wrap" = 'yes'; then
		echo-color --oes --h3="${args[*]}" --ce "$status"
	fi
	# done
	return "$ec"
}

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	eval_collapse "$@"
fi
