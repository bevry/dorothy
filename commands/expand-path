#!/usr/bin/env bash

# escape-spaces converts the intuitive
# expand-path -- '/Applications/Visual *'
# into the correct
# expand-path -- '/Applications/Visual\\ *'

function expand_path_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-segment --h1="TEST: $0"

	eval_tester --name='test non-existent path' --stdout='' \
		-- expand-path -- '/i/do/not exist*'

	eval_tester --name='test existent path' --stdout="$DOROTHY/commands/expand-path" \
		-- expand-path -- "$DOROTHY/*/expand-path"

	echo-segment --g1="TEST: $0"
	return 0
)
function expand_path() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the size of a path in bytes.

			USAGE:
			expand-path [--] ...<path>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_paths=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if test "${#option_paths[@]}" -eq 0; then
		help 'No <path>s provided.'
	fi

	# =====================================
	# Action

	# using zsh then bash, works around macos which has old bash, but new zsh
	# so this is needed so setup-paths-commands can do its thing
	if test "$IS_BASH_VERSION_OUTDATED" = 'no' || ! is-globstar -- "$*"; then
		for path in "${option_paths[@]}"; do
			eval print_lines "$(echo-escape-spaces -- "$path")" | echo-trim-zero-length --stdin
		done
	elif type -P zsh &>/dev/null; then
		expand-path-zsh "${option_paths[@]}"
	else
		echo-error 'Could not find a suitable shell to expand paths with.'
		return 1
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		expand_path_test
	else
		expand_path "$@"
	fi
fi
