#!/usr/bin/env bash

function contains_line() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Returns [0] if any <input> line matched a <needle> line, otherwise returns [1].

			USAGE:
			contains-line <needle> [...options] [--] ...<input>
			echo-lines ...<input> | contains-line <needle> [...options]

			OPTIONS:
			<needle> | --needle=<needle>
			    Compare each <input> line with this <needle> line.
			    Use [--needle=<needle>] to provide multiple needles.

			$(stdinargs_options_help --)

			USAGE:
			echo-lines -- 'one' 'two' 'three'  | contains-line --needle='two'    # success
			echo-lines -- 'one' 'two' 'three'  | contains-line --needle='three'  # success
			echo-lines -- 'one' 'two' 'three'  | contains-line --needle='z'      # failure
			echo-lines -- 'one' 'two' 'three'  | contains-line --needle=''       # failure
			echo-lines -- 'one' ' two' 'three'  | contains-line --needle='two'   # failure
			echo-lines -- 'one' '' 'three'  | contains-line --needle=''          # success

			RETURNS:
			[0] if an <input> line contained a <needle> line.
			[1] if no <input> lines were a <needle> line.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_needles=() option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--needle='*) option_needles+=("${item#*=}") ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		'--'*) option_args+=("$item") ;;
		*)
			if test "${#option_needles[@]}" -eq 0; then
				option_needles+=("$item")
			else
				option_args+=("$item")
			fi
			;;
		esac
	done

	# check
	if test "${#option_needles[@]}" -eq 0; then
		help 'No <needle>s provided.'
	fi

	# =====================================
	# Action

	local found='no'
	function on_line {
		local line="$1" needle
		for needle in "${option_needles[@]}"; do
			if test "$needle" = "$line"; then
				# it was found, success case, exit immediately
				found='yes'
				return 210 # ECUSTOM 210 Processing complete, exit early
			fi
		done
		# not found, continue reading
	}
	function on_finish {
		test "$found" = 'yes'
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	contains_line "$@"
fi
