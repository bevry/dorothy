#!/usr/bin/env bash

function debug_bash() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Run a bash script with [-x] applied: Print a trace of simple commands.

			USAGE:
			debug-bash [...options] -- <command> [...args]

			OPTIONS:
			--bash=<bash path>
			    If you want to invoke the command through a custom bash binary, then provide it here.

			-v
			    Pass the -v flag to bash: Print shell input lines as they are read.
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_bash='' bash_args=('-x') cmd=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--bash='*) option_bash="${item#*=}" ;;
		'-v') bash_args+=('-v') ;;
		'--')
			cmd+=("$@")
			shift "$#"
			break
			;;
		*)
			cmd+=("$item" "$@")
			shift $#
			;;
		esac
	done

	# check
	if test "${#cmd[@]}" -eq 0; then
		help 'No <command> was provided.'
	fi

	# fallback
	if test -z "$option_bash"; then
		option_bash="$(type -P bash)"
	fi

	# =====================================
	# Act

	# invoke the command or function
	local cmd_path
	cmd_path="$(type -P "${cmd[0]}" 2>/dev/null || :)"
	if test -n "$cmd_path" && [[ $cmd_path == "$DOROTHY"* ]]; then
		# command
		cmd[0]="$cmd_path"
		"$option_bash" "${bash_args[@]}" "${cmd[@]}"
		return
	else
		# function/builtin
		set "${bash_args[@]}"
		"${cmd[@]}"
		return
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	debug_bash "$@"
fi
