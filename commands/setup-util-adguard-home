#!/usr/bin/env bash

# https://github.com/AdguardTeam/AdGuardHome/releases
# AdGuardHome_darwin_amd64.zip
# AdGuardHome_darwin_arm64.zip
# AdGuardHome_freebsd_386.tar.gz
# AdGuardHome_freebsd_amd64.tar.gz
# AdGuardHome_freebsd_arm64.tar.gz
# AdGuardHome_freebsd_armv5.tar.gz
# AdGuardHome_freebsd_armv6.tar.gz
# AdGuardHome_freebsd_armv7.tar.gz
# AdGuardHome_frontend.tar.gz
# AdGuardHome_linux_386.tar.gz
# AdGuardHome_linux_amd64.tar.gz
# AdGuardHome_linux_arm64.tar.gz
# AdGuardHome_linux_armv5.tar.gz
# AdGuardHome_linux_armv6.tar.gz
# AdGuardHome_linux_armv7.tar.gz
# AdGuardHome_linux_mips64le_softfloat.tar.gz
# AdGuardHome_linux_mips64_softfloat.tar.gz
# AdGuardHome_linux_mipsle_softfloat.tar.gz
# AdGuardHome_linux_mips_softfloat.tar.gz
# AdGuardHome_linux_ppc64le.tar.gz
# AdGuardHome_openbsd_amd64.tar.gz
# AdGuardHome_openbsd_arm64.tar.gz
# AdGuardHome_windows_386.zip
# AdGuardHome_windows_amd64.zip
# AdGuardHome_windows_arm64.zip

function setup_util_adguard_home() (
	source "$DOROTHY/sources/bash.bash"

	local arch aghome_installer=''
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			aghome_installer='AdGuardHome_darwin_arm64.zip'
		elif test "$arch" = 'x64'; then
			aghome_installer='AdGuardHome_darwin_amd64.zip'
		fi
	elif is-linux; then
		if test "$arch" = 'a64'; then
			aghome_installer='AdGuardHome_linux_arm64.tar.gz'
		elif test "$arch" = 'x64'; then
			aghome_installer='AdGuardHome_linux_amd64.tar.gz'
		elif test "$arch" = 'x32'; then
			aghome_installer='AdGuardHome_linux_386.tar.gz'
		fi
	else
		__die_unknown_os
	fi

	# =====================================
	# DNS Service: Custom: AdGuard Home

	# https://github.com/AdguardTeam/AdGuardHome/wiki/Configuration#command-line
	local aghome_title="AdGuard Home"
	local aghome_id='AdGuardHome'
	local aghome_bin_file="$BIN_DIR/$aghome_id"
	local aghome_conf_dir="$CONF_DIR/$aghome_id"
	local aghome_conf_file="$aghome_conf_dir/$aghome_id.yaml"
	local aghome_data_dir="$DATA_DIR/$aghome_id"
	local aghome_state_dir="$STATE_DIR/$aghome_id"
	local aghome_state_pid_file="$aghome_state_dir/$aghome_id.pid"
	local aghome_state_log_file="$aghome_state_dir/$aghome_id.log"
	local aghome_service_file
	if is-mac; then
		aghome_service_file="$SERVICE_DIR/$aghome_id.plist" # @todo unknown
	else
		aghome_service_file="$SERVICE_DIR/$aghome_id.service"
	fi
	local aghome_bin_cmd=(
		"$aghome_bin_file"
		'--config' "$aghome_conf_file"
		'--work-dir' "$aghome_data_dir"
		'--pidfile' "$aghome_state_pid_file"
		'--logfile' "$aghome_state_log_file"
	)
	function __aghome_exists {
		test -x "$aghome_bin_file"
	}
	function aghome_install {
		local action action_title temp_bin_file
		action='install'
		if __aghome_exists; then
			action='upgrade'
		fi
		action_title="$(__uppercase_first_letter "$action")"

		# check
		if test -z "$aghome_installer"; then
			die_incompatible_service "$aghome_title"
		fi

		# log
		echo-style --h1="$action_title $aghome_title"

		# check we are the right one
		check_installation "$aghome_id" "$aghome_bin_file"

		# ensure directories
		sudo-helper -- mkdir -p "$aghome_conf_dir" "$aghome_data_dir" "$aghome_state_dir"

		# download the installer, prior to disabling
		temp_bin_file="$(
			fs-temp \
				--directory='setup-dns' \
				--file='AdGuardHome'
		)"
		down "https://static.adguard.com/adguardhome/release/${aghome_installer}" \
			--archive-glob="AdGuardHome/AdGuardHome" \
			--filepath="$temp_bin_file" || :
		# ^ allow failures, in case dns is botched

		# if downloaded, stop and install
		if test -f "$temp_bin_file"; then
			if test -x "$aghome_bin_file"; then
				# only tell prior cmd to stop if the prior cmd exists
				sudo-helper -- "${aghome_bin_cmd[@]}" --service stop || :
			fi
			sudo-helper -- mv "$temp_bin_file" "$aghome_bin_file" || :
			sudo-helper -- chmod +x "$aghome_bin_file" || :
			# ^ allow failure,s as we will check this later
		fi

		# confirm success
		if test -x "$aghome_bin_file"; then
			echo-style --g1="$action_title $aghome_title"
		else
			echo-style --error="Unable to make executable: $aghome_bin_file" >/dev/stderr
			echo-style --e1="$action_title $aghome_title"
			return 1
		fi
	}
	function aghome_uninstall {
		# check
		if ! __aghome_exists; then
			return 0
		fi

		# log
		echo-style --h1="Uninstall $aghome_title"

		# stop and uninstall the service
		sudo-helper -- "${aghome_bin_cmd[@]}" --service stop || :
		sudo-helper -- "${aghome_bin_cmd[@]}" --service uninstall || :

		# ensure adguard home has stopped
		killall "$aghome_id" || :

		# clean it all up
		do_remove --reload --service="$aghome_id" -- "$aghome_bin_file" "$aghome_conf_dir" "$aghome_data_dir" "$aghome_state_dir" "$aghome_service_file"

		# log
		echo-style --g1="Uninstall $aghome_title"
	}
	function aghome_configure {
		local action action_title upstream_servers server pattern replace
		action="$1" # enable/disable
		action_title="$(__uppercase_first_letter "$action")"

		# check
		if ! __aghome_exists; then
			return 0
		fi

		# log
		echo-style --h1="Configure and $action_title $aghome_title"

		# this is here, because we need to seed the configuration file before we can do changes to it
		if test ! -f "$aghome_conf_file" -a "$action" = 'enable'; then
			sudo-helper -- "${aghome_bin_cmd[@]}" --service install || :
			sudo-helper -- "${aghome_bin_cmd[@]}" --service start || :
			confirm --ppid=$$ -- "Press <enter> once you have completed the initial $aghome_title setup..."
		fi

		# stop before config update
		sudo-helper -- "${aghome_bin_cmd[@]}" --service stop || :

		# prepare desired providers
		upstream_servers=(
			"${dot_servers[@]}"
			"${doh_servers[@]}"
			"${quic_servers[@]}"
			"${sdns_servers[@]}"
		)
		if test "${#upstream_servers[@]}" -eq 0; then
			upstream_servers=(
				"${ipv4_servers[@]}"
				"${ipv6_servers[@]}"
			)
		fi

		# update the configuration with the new upstreams
		pattern='  upstream_dns:\n(  - .+\n)+'
		replace=$'  upstream_dns:\n'
		for server in "${upstream_servers[@]}"; do
			replace+="  - $server"$'\n'
		done
		sudo-helper --inherit \
			-- sd "$pattern" "$replace" "$aghome_conf_file"
		sudo-helper -- \
			"${aghome_bin_cmd[@]}" --check-config

		# enable or disable
		# Service control action: status, install, uninstall, start, stop, restart, reload (configuration).
		if test "$action" = 'enable'; then
			sudo-helper -- "${aghome_bin_cmd[@]}" --service install || :
			sudo-helper -- "${aghome_bin_cmd[@]}" --service reload || sudo-helper -- "${aghome_bin_cmd[@]}" --service start || :
			sudo-helper -- "${aghome_bin_cmd[@]}" --service status || :
		else
			sudo-helper -- "${aghome_bin_cmd[@]}" --service uninstall || :
		fi

		# log
		echo-style --g1="Configure and $action_title $aghome_title"
	}
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_adguard_home "$@"
fi
