#!/usr/bin/env bash

function what_is_my_ip() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Outputs your IP address(es).

			USAGE:
			what-is-my-ip [--] ...<type>

			TYPES:
			local
			    Return only local IP address.

			remote
			    Return only remote IP address.

			QUIRKS:
			If no <type> is specified, all types will be returned.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_types=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_types+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_types+=("$item") ;;
		esac
	done

	# ensure types
	if test "${#option_types[@]}" -eq 0; then
		option_types=(
			'local'
			'remote'
		)
	fi

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"

	# =====================================
	# Helpers

	function get_ip_local {
		# [ip] filters out bad interfaces, [ifconfig] works better on alpine
		if command-exists ip && ! is-alpine; then
			# https://stackoverflow.com/a/26694162/130638
			# -P is for perl regular expressions and is rarely supported
			# ip -4 addr show eth0 | grep --only-matching -P '(?<=inet\s)\d+(\.\d+){3}'

			# works on all interfaces, filters out DOWN/UNKNOWN interfaces, such as broken docker virtual network interfaces
			ip -brief address | rg --only-matching --regexp='UP\s+(.+?)[/ ]' --replace='$1'
		elif command-exists ifconfig; then
			# fetch all 192.168.x and 10.0.x addresses
			# mac prefixes with `inet ...` and has unwanted prefix `broadcast ...`
			# alpine prefixes with `inet addr:...` and has unwanted prefix `Bcast:...` and `Mask:...`
			ifconfig | rg --only-matching --regexp='inet.+?((192\.168\.|10\.0\.)\d+\.\d+)' --replace='$1'
		else
			echo-style --error="$0: Getting the local IP address is unsupported on this platform." >/dev/stderr
			return 19 # ENODEV 19 Operation not supported by device
		fi
	}

	function get_ip_remote {
		# does not take into account cloudflare warp
		# fetch http://ipecho.net/plain
		# fetch https://ipinfo.io/ip

		# does take into account cloudflare warp
		fetch https://whatmyip.bevry.workers.dev
	}

	# =====================================
	# Act

	local type
	if test "${#option_types[@]}" -eq 1; then
		"get_ip_${option_types[0]}"
	else
		for type in "${option_types[@]}"; do
			printf '%s: ' "$(uppercase_first_letter "$type")"
			"get_ip_$type"
		done
	fi

)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	what_is_my_ip "$@"
fi
