#!/usr/bin/env bash

function echo_clear_lines() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Deletes as many lines as it received.

			USAGE:
			... | echo-clear-lines [...options]
			echo-clear-lines[...options] < ...

			OPTIONS:
			--piped
			    If piping, provide this, otherwise don't.

			$(stdinargs_options_help --)

			EXAMPLE:

			echo 'sup'
			printf 'a\nb\nc' | echo-clear-lines --piped
			# ^ retains: sup

			file="\$(mktemp)"
			echo 'sup'
			printf 'a\nb\nc' | tee "\$file"; echo-clear-lines < "\$file"
			# ^ retains: sup
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_piped='no' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-piped'* | '--piped'*)
			option_piped="$(get-flag-value --affirmative --fallback="$option_piped" -- "$item")"
			;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*) option_args+=("$item") ;;
		esac
	done

	# =====================================
	# Action

	# test cases:
	# confirm --ppid=$$ -- "Press <enter> once you are ready to continue..."
	# ^ without \e[J it will have an indentation at the start

	function on_line {
		local line="$1"
		# if we are piping (there is newline we want to keep from pressing return in the terminal), or if the input is deleting rather than clearing lines, then we can only safely clear the current line
		# touch test.txt; fs-rm --quiet --no-confirm --trash -- test.txt
		# setup-util-sd --uninstall; (create an error in do_brew); setup-util-sd
		# regexp should match [echo-clear-lines] [echo-revolving-door] [is-shapeshifter]
		if [[ $option_piped == 'yes' || $line =~ $'\e\[[0-9]*[AKGFJ]' ]]; then
			printf '\e[G\e[2K' # set cursor to start of line, and clear from there
		else
			printf '\e[F\e[J' # set cursor to the start of the prior line, and delete everything from there (aka echo-clear-line)
		fi
	}
	function on_inline {
		printf '\e[G\e[2K' # set cursor to start of line, and clear from there
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_clear_lines "$@"
fi
