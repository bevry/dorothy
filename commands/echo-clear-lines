#!/usr/bin/env bash

function echo_clear_lines() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Deletes as many lines as it received.

			USAGE:
			echo-clear-lines [...options] [--] ...<input>
			echo-lines ...<input> | echo-clear-lines [...options]

			OPTIONS:
			--here-string | --herestring | '--<<<'
			    If using a here string, provide this option to discard the trailing newline that here strings add.

			--count=<count>
			    If provided, use this many lines rather than erasing lines as they happen.

			$(stdinargs_options_help --)

			EXAMPLE:

			echo 'sup'
			printf 'a\nb\nc'
			echo-clear-lines -- $'a\nb\nc'
			# ^ retains: sup
			# ^ Note that the argument technique should be discouraged, as can cause [Argument list too long] error:
			#   https://github.com/bevry/dorothy/actions/runs/7622089094/job/20759535555#step:4:3259

			echo 'sup'
			printf 'a\nb\nc'
			echo-clear-lines --stdin < <(printf 'a\nb\nc')
			# ^ retains: sup
			# ^ Use this instead of the arguments otpion, and do not use <<< as it prints a trailing newline, which would erase 'sup'.

			echo 'sup'
			printf 'a\nb\nc'
			printf 'a\nb\nc' | echo-clear-lines
			# ^ retains: sup

			file="\$(mktemp)"
			echo 'sup'
			printf 'a\nb\nc' | tee "\$file
			echo-clear-lines < "\$file"
			# ^ retains: sup
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_here_string='no' option_columns='' option_count='' option_count_only='no' option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--count='*) option_count="${item#*=}" ;;
		'--no-count-only'* | '--count-only'*)
			option_count_only="$(get-flag-value --affirmative --fallback="$option_count_only" -- "$item")"
			;;
		'--columns='*) option_columns="${item#*=}" ;;
		'--here-string' | '--herestring' | '--<<<')
			option_here_string='yes'
			option_args+=('--stdin')
			;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinargs options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*) option_args+=("$item") ;;
		esac
	done

	# =====================================
	# Action

	# heredocs don't appear as inline, they always appear as complete lines
	# so a here-string without a trailing line will appear as a complete line
	# and a here-string with a trailing line, will appear as a complete line and another complete empty line

	local count=0 had_inline='no'
	function clear_lines {
		# adapt
		if [[ $option_here_string == 'yes' || $had_inline == 'yes' ]]; then
			if [[ $count -ne 0 ]]; then
				count="$((count - 1))"
			fi
		fi
		# clear
		if [[ $option_count_only == 'yes' ]]; then
			__print_lines "$count"
		elif [[ $count -eq 0 ]]; then
			printf '\e[G\e[J'
		else
			printf '\e[%dF\e[J' "$count"
		fi
	}
	function on_line {
		local input="$1" lines
		if [[ -z $input ]]; then
			# it is a complete line, so add 1 to count
			# we don't send empty input to echo-wrap/echo-count-lines as empty input will appear as 0
			count="$((count + 1))"
		elif __is_shapeshifter -- "$input"; then
			# if shapeshifter, reset count
			count=0
		else
			# if not shapeshifter, wrap and count
			lines="$(echo-wrap --columns="$option_columns" -- "$input" | echo-count-lines --stdin)"
			count="$((count + lines))"
		fi
	}
	function on_inline {
		# if inline, proceed as normal but remove a line
		on_line "$1"
		had_inline='yes'
	}
	function on_finish {
		clear_lines
	}
	if [[ -n $option_count ]]; then
		count="$option_count"
		clear_lines
	else
		stdinargs "${option_args[@]}"
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	echo_clear_lines "$@"
fi
