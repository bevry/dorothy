#!/usr/bin/env bash
export BINDIR
if is-mac; then
	BINDIR="$HOME/bin"
else
	BINDIR="/usr/local/bin"
fi
mkdir -p "$BINDIR" # it is here to make sure it is gets included in PATH from essentials
source "$DOROTHY/sources/essentials.sh"
source "$DOROTHY/sources/strict.bash"

# installers
# https://github.com/AdguardTeam/AdGuardHome/releases
# https://github.com/cloudflare/cloudflared/releases
# https://github.com/DNSCrypt/dnscrypt-proxy/releases
arch="$(get-arch)"
aghome_installer=''
cloudflared_installer=''
dnscrypt_installer=''
if is-mac; then
	if test "$arch" = 'a64'; then
		aghome_installer='AdGuardHome_darwin_arm64.zip'
		dnscrypt_installer='dnscrypt-proxy-macos_arm64' # ...
	elif test "$arch" = 'x64'; then
		aghome_installer='AdGuardHome_darwin_amd64.zip'
		cloudflared_installer='cloudflared-darwin-amd64.tgz'
		dnscrypt_installer='dnscrypt-proxy-macos_x86_64' # ...
	fi
elif is-linux; then
	if test "$arch" = 'a64'; then
		aghome_installer='AdGuardHome_linux_arm64.tar.gz'
		cloudflared_installer='cloudflared-linux-arm64'
		dnscrypt_installer='dnscrypt-proxy-linux_arm64' # ...
	elif test "$arch" = 'x64'; then
		aghome_installer='AdGuardHome_linux_amd64.tar.gz'
		cloudflared_installer='cloudflared-linux-amd64'
		dnscrypt_installer='dnscrypt-proxy-linux_x86_64' # ...
	elif test "$arch" = 'x32'; then
		aghome_installer='AdGuardHome_linux_386.tar.gz'
		cloudflared_installer='cloudflared-linux-386'
		dnscrypt_installer='dnscrypt-proxy-linux_i386' # ...
	fi
fi


# -------------------------------------
# AdGuard Home

function aghome_install {
	# Install
	if command-exists AdGuardHome; then
		echo 'AdGuard Home is being upgraded...'
	else
		echo 'AdGuard Home is being installed...'
	fi

	# fetch the platform and architecture specific installer
	# https://github.com/AdguardTeam/AdGuardHome/releases/
	if test -n "$aghome_installer"; then
		down-zip-file "https://static.adguard.com/adguardhome/release/${aghome_installer}" "AdGuardHome/AdGuardHome" "$BINDIR/AdGuardHome"
	else
		stderr echo 'AdGuard Home support has not yet been added for this platform'
		return 1
	fi
	chmod +x "$BINDIR/AdGuardHome"
	echo 'AdGuard Home is now installed'

	# Configure
	echo 'AdGuard Home is being configured...'
	ok sudo "$BINDIR/AdGuardHome" -s uninstall
	sudo "$BINDIR/AdGuardHome" -s install
	confirm "Press any key once you have completed the AdGuard Home setup..."
	echo 'AdGuard Home is configured'
}

function aghome_uninstall {
	if command-exists AdGuardHome; then
		echo 'AdGuard Home is being uninstalled...'
		ok sudo AdGuardHome -s uninstall
		ok rm -v "$BINDIR/AdGuardHome"
		ok rm -iv "$BINDIR/AdGuardHome.yaml"
		echo 'AdGuard Home is now unisntalled'
	else
		echo 'AdGuard Home has already been uninstalled'
	fi
}

# -------------------------------------
# cloudflared
# https://developers.cloudflare.com/1.1.1.1/dns-over-https/cloudflared-proxy/
# https://developers.cloudflare.com/argo-tunnel/downloads/

function cloudflared_install {
	# Install
	if command-exists cloudflared; then
		echo 'cloudflared has already been installed'
	else
		# https://github.com/cloudflare/cloudflared/releases
		if is-mac; then
			echo 'cloudflared is being installed...'
			brew install cloudflare/cloudflare/cloudflared
			echo 'cloudflared has been installed'
		elif test -n "$cloudflared_installer"; then
			echo 'cloudflared is being installed...'
			f="$(mktemp)"
			github-release-file-download cloudflare/cloudflared "$cloudflared_installer" "$f"
			sudo mv "$f" "$BINDIR/cloudflared"
			chmod +x "$BINDIR/cloudflared"
			echo 'cloudflared has been installed'
		else
			stderr echo 'cloudflared support has not yet been added for this platform'
			return 1
		fi

		# Then Configure
		echo 'cloudflared is being configured...'
		mkdir -p "$HOME/.cloudflared" # for cert.pem
		sudo mkdir -p '/usr/local/etc/cloudflared/' # for config.yml

		# create the sample config
		f="$(mktemp)"
		cat << EOF > "$f"
proxy-dns: true
proxy-dns-upstream:
- https://1.1.1.2/dns-query
- https://1.0.0.2/dns-query
EOF
		sudo mv "$f" '/usr/local/etc/cloudflared/config.yml'

		# then prompt user to overwrite
		confirm "You need to (1) Go to https://dash.teams.cloudflare.com/gateway/locations (2) Create a location (3) Press enter an replace the DNS settings."
		sudo vim '/usr/local/etc/cloudflared/config.yml'
		if is-mac; then
			sudo cloudflared tunnel login
			sudo cloudflared service install
			sudo launchctl start com.cloudflare.cloudflared
		else
			"$BINDIR/cloudflared" tunnel login
			sudo "$BINDIR/cloudflared" service install
		fi
		echo 'cloudflared is now configured'
	fi
}

function cloudflared_uninstall {
	# Uninstall
	if command-exists cloudflared; then
		if is-mac; then
			echo 'cloudflared is being uninstalled...'
			ok sudo launchctl stop com.cloudflare.cloudflared
			ok sudo launchctl remove com.cloudflare.cloudflared
			ok sudo cloudflared service uninstall
			ok brew uninstall cloudflare/cloudflare/cloudflared
			echo 'cloudflared is now uninstalled'
		else
			echo 'cloudflared is being uninstalled...'
			ok sudo cloudflared service uninstall
			ok sudo rm -vi "$BINDIR/cloudflared"
			echo 'cloudflared is now uninstalled'
		fi
	else
		echo 'cloudflared has already been uninstalled'
	fi
}

# -------------------------------------
# DNSCrypt Proxy

function dnscrypt_install {
	# Install
	if command-exists dnscrypt-proxy; then
		echo 'DNSCrypt-Proxy has already been installed'
	else
		if is-mac; then
			echo 'DNSCrypt-Proxy is installing...'
			brew install dnscrypt-proxy
			echo 'DNSCrypt-Proxy is now installed'
		elif test -n "$dnscrypt_installer"; then
			echo 'dnscrypt-proxy is being installed...'
			f="$(mktemp)"
			github-release-file-download DNSCrypt/dnscrypt-proxy "$dnscrypt_installer" "$f"
			sudo mv "$f" "$BINDIR/dnscrypt-proxy"
			chmod +x "$BINDIR/dnscrypt-proxy"
			echo 'dnscrypt-proxy has been installed'
		else
			stderr echo 'DNSCrypt-Proxy support has not yet been added for this platform'
			return 1
		fi

		# Then Configure
		echo 'DNSCrypt-Proxy is being configuring...'
		if is-missing "/usr/local/etc/dnscrypt-proxy.toml"; then
			down "https://gist.githubusercontent.com/balupton/48057270a67d70e2ac984fdfa475ad29/raw/dnscrypt-proxy.toml" "/usr/local/etc/dnscrypt-proxy.toml"
		fi
		if is-mac; then
			sudo brew services start dnscrypt-proxy
		else
			stderr echo 'DNSCrypt-Proxy service support has not yet been added for this platform'
			return 1
		fi
		echo 'DNSCrypt-Proxy is now configured'
	fi
}

function dnscrypt_uninstall {
	# Uninstall
	if command-exists dnscrypt-proxy; then
		if is-mac; then
			echo 'DNSCrypt-Proxy is being uninstalled...'
			ok sudo rm -vi /usr/local/etc/dnscrypt-proxy.toml
			sudo brew services stop dnscrypt-proxy
			ok brew uninstall dnscrypt-proxy
			echo 'DNSCrypt-Proxy is now uninstalled'
		else
			stderr echo 'DNSCrypt-Proxy service support has not yet been added for this platform'
			return 1
		fi
	else
		echo 'DNSCrypt-Proxy is already uninstalled'
	fi
}

# -------------------------------------
# Setup

function dns_uninstall {
	aghome_uninstall
	dnscrypt_uninstall
	cloudflared_uninstall
}

function dns_configured {
	out="$(dig -x google.com)"
	if echo "$out" | grep ";; SERVER: 127.0.0.1#53(127.0.0.1)"; then
		echo 'Custom DNS is configured and running correctly'
	else
		echo 'Custom DNS is not configured'
		return 1
	fi
}

function dns_setup {
	# services
	services=()
	if test -n "$aghome_installer"; then
		services+=(adguard-home)
	fi
	if test -n "$cloudflared_installer"; then
		services+=(cloudflared)
	fi
	if test -n "$dnscrypt_installer"; then
		services+=(dnscrypt)
	fi
	services+=(system)

	# service
	service="system"
	if is-string "${1-}"; then
		service="$1"
	elif is-string "${DNS_SERVICE-}"; then
		service="$DNS_SERVICE"
	else
		service="${1:-"$(choose "${services[@]}")"}"
	fi

	# prepare
	select-dns cf

	# install
	dns_uninstall
	if test "$service" = "cloudflared"; then
		cloudflared_install
	elif test "$service" = "dnscrypt"; then
		dnscrypt_install
	elif test "$service" = "system"; then
		echo 'Skipping custom DNS: using the builtin system DNS'
		return 0
	elif test "$service" = "adguard-home" -o "$service" = "adguard"; then
		aghome_install
	else
		stderr echo "ERROR: setup-dns requires the DNS_SERVICE environment variable to be set, or requires a service to be specified, available services are: ${services[*]}"
		return 1
	fi

	# confirm
	select-dns local
	dns_configured
}

if test "${1-}" = "uninstall"; then
	dns_uninstall
	select-dns
elif (test -z "${1-}" && dns_configured) || dns_setup "${1-}"; then
	echo 'DNS setup complete'
else
	select-dns
	echo 'DNS setup FAILED'
fi
