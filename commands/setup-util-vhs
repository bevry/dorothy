#!/usr/bin/env bash

# https://github.com/charmbracelet/vhs#installation
# Make sure to tap [Show all 35 assets]

# https://github.com/charmbracelet/vhs/releases
# vhs-0.6.0.aarch64.rpm
# vhs-0.6.0.armv7hl.rpm
# vhs-0.6.0.i386.rpm
# vhs-0.6.0.tar.gz
# vhs-0.6.0.x86_64.rpm
# vhs_0.6.0_aarch64.apk
# vhs_0.6.0_amd64.deb
# vhs_0.6.0_arm64.deb
# vhs_0.6.0_armhf.deb
# vhs_0.6.0_armv7.apk
# vhs_0.6.0_Darwin_arm64.tar.gz
# vhs_0.6.0_Darwin_x86_64.tar.gz
# vhs_0.6.0_i386.deb
# vhs_0.6.0_Linux_arm.tar.gz
# vhs_0.6.0_Linux_arm64.tar.gz
# vhs_0.6.0_Linux_i386.tar.gz
# vhs_0.6.0_Linux_x86_64.tar.gz
# vhs_0.6.0_Windows_i386.zip
# vhs_0.6.0_Windows_x86_64.zip
# vhs_0.6.0_x86.apk
# vhs_0.6.0_x86_64.apk

# rpm repo support requires the following, which isn't important as they provide .rpm files anyway
# print_line '[charm]
# name=Charm
# baseurl=https://repo.charm.sh/yum/
# enabled=1
# gpgcheck=1
# gpgkey=https://repo.charm.sh/yum/gpg.key' | sudo tee /etc/yum.repos.d/charm.repo

# brew support doesn't work as requies ffmpeg, however we do a custom install of ffmpeg as we need all options, we could do [--ignore-dependencies] but [setup-util] does not yet support that
# brew dependencies are: ffmpeg, json-c, libwebsockets and ttyd

function setup_util_vhs() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=vhs; then
		return 0
	fi

	# setup
	local arch options=(
		--cli='vhs'
		"$@"
		APT_KEY='https://repo.charm.sh/apt/gpg.key'
		APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://repo.charm.sh/apt/ * *'
		GO='github.com/charmbracelet/vhs'
		NIX='vhs'
		AUR='vhs' # ARCH
		PORT='vhs'
		SCOOP='vhs'
		XBPS='vhs' # VOID
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='charmbracelet/vhs' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB="$2"
		)
	}
	function add_apk_option {
		options+=(
			APK="$(get_github_asset_url "$1")"
		)
	}
	function add_deb_option {
		options+=(
			DEB="$(get_github_asset_url "$1")"
		)
	}
	function add_rpm_option {
		options+=(
			RPM="$(get_github_asset_url "$1")"
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '_Darwin_arm64.tar.gz' 'vhs'
		elif test "$arch" = 'x64'; then
			add_download_option '_Darwin_x86_64.tar.gz' 'vhs'
		fi
	elif is-linux; then
		if test "$arch" = 'a64'; then
			add_apk_option '_aarch64.apk'
			add_deb_option '_arm64.deb'
			add_rpm_option '.aarch64.rpm'
			add_download_option '_Linux_arm64.tar.gz' 'vhs'
		elif test "$arch" = 'a32'; then
			add_apk_option '_armv7.apk'
			add_deb_option '_armhf.deb'
			add_rpm_option '.armv7hl.rpm'
			add_download_option '_Linux_arm.tar.gz' 'vhs'
		elif test "$arch" = 'x64'; then
			add_apk_option '_x86_64.apk'
			add_deb_option '_amd64.deb'
			add_rpm_option '.x86_64.rpm'
			add_download_option '_Linux_x86_64.tar.gz' 'vhs'
		elif test "$arch" = 'x32'; then
			add_apk_option '_x86.apk'
			add_deb_option '_i386.deb'
			add_rpm_option '.i386.rpm'
			add_download_option '_Linux_i386.tar.gz' 'vhs'
		fi
	elif is-wsl; then
		if test "$arch" = 'x64'; then
			add_download_option '_Windows_x86_64.zip' 'vhs.exe'
		elif test "$arch" = 'x32'; then
			add_download_option '_Windows_i386.zip' 'vhs.exe'
		fi
	fi
	setup-util "${options[@]}"

	# setup ttyd
	# https://github.com/tsl0922/ttyd
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_vhs "$@"
fi
