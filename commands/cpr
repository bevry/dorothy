#!/usr/bin/env bash

# @todo figure out how to make --eval compatible with paths that have spaces

function cpr_() (
	source "$DOROTHY/sources/bash.bash"

	# determine tools
	local verify_tools=()
	local copy_tools=()
	if command-exists rsync; then
		verify_tools+=(rsync)
		copy_tools+=(rsync)
	fi
	if command-exists gcp; then
		copy_tools+=(gcp)
	fi
	if command-exists scp; then
		copy_tools+=(scp)
	fi
	if command-exists cp; then
		copy_tools+=(cp)
	fi
	if command-exists diff; then
		verify_tools+=(diff)
	fi
	if command-exists git; then
		verify_tools+=(git)
	fi

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:

			Copy everything from one location to another, features:
			- preserves attributes
			- progress updates
			- local and remote sources

			USAGE:

			cpr [...options] [--] <origin> <destination>
			cpr [...options] [--origin=<origin>] [--destination=<destination>]

			<origin> and <destination> can be a local path on your current machine, or a remote path.

			If a remote path, it should be in the format of:
			    [username@hostname:/path] for files
			    [username@hostname:/path/] for directories

			The [hostname] is the hostname or IP address of a valid SSH server.

			Enable SSH on macOS via System Preferences > Sharing > Remote Login.
			Enable SSH on Ubuntu via https://ubuntu.com/server/docs/service-openssh


			OPTIONS:

			--tool=...
			    if specified, skips tool prompt. Available tools on this machine are:
			    for copy: $(echo-join ', ' -- "${copy_tools[@]}")
			    for verify: $(echo-join ', ' -- "${verify_tools[@]}")

			--no-confirm
			    if enabled, do not confirm anything.

			--dry
			    if enabled, only output the determined command, do not run it.

			--sudo
			    if enabled, run the determined command as the sudo user.

			--verify
			    if enabled, only verify that the target contains all the files from the source, do not modify anything.

			Additional OPTIONS enabled when [--tool=rsync] is used:

			--remove
			    if enabled, remove source files as they are successfully copied to the target.

			--checksum
			    if enabled, files are compared by their checksums, instead of the default quicker date and size comparison.

			--linux
			    if enabled, increases compatibility with between linux systems.

			--owner=<user>:<group>
			    if specified, uses this value for the ownership of copied files.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item tool='' origin='' destination=''
	local confirm='yes' dry='no' sudo='no' verify='no'
	local remove='no' checksum='no' linux='no'
	local owner='' # manual
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--tool='*) tool="${item#*=}" ;;
		'--origin='* | '--source='*) origin="${item#*=}" ;;
		'--destination='*) destination="${item#*=}" ;;
		'--owner='*) owner="${item#*=}" ;;
		'--no-confirm'* | '--confirm'*)
			confirm="$(get-flag-value --affirmative --fallback="$confirm" -- "$item")"
			;;
		'--no-dry'* | '--dry'*)
			dry="$(get-flag-value --affirmative --fallback="$dry" -- "$item")"
			;;
		'--no-sudo'* | '--sudo'*)
			sudo="$(get-flag-value --affirmative --fallback="$sudo" -- "$item")"
			;;
		'--no-verify'* | '--verify'*)
			verify="$(get-flag-value --affirmative --fallback="$verify" -- "$item")"
			;;
		'--no-remove'* | '--remove'*)
			remove="$(get-flag-value --affirmative --fallback="$remove" -- "$item")"
			;;
		'--no-checksum'* | '--checksum'*)
			checksum="$(get-flag-value --affirmative --fallback="$checksum" -- "$item")"
			;;
		'--no-linux'* | '--linux'*)
			linux="$(get-flag-value --affirmative --fallback="$linux" -- "$item")"
			;;
		'--')
			if test -n "$origin" -o -n "$destination"; then
				help "[--] can only be used if <origin> and <destination> are not set via other means"
			fi
			origin="$1"
			destination="$2"
			shift "$#"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$item"; then
				help "Empty <origin> or <destination> argument provided."
			elif test -z "$origin"; then
				origin="$item"
			elif test -z "$destination"; then
				destination="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check origin and destination
	if test -z "$origin" -o -z "$destination"; then
		help "Both <origin> and <destination> must be specified."
	fi

	# ensure tool
	local tools=()
	if test "$verify" = 'yes'; then
		if test "${#verify_tools[@]}" -eq 0; then
			help 'No verify tools are available.' || :
			return 42 # ENOPROTOOPT 42 Protocol not available
		else
			tools=("${verify_tools[@]}")
		fi
	else
		if test "${#copy_tools[@]}" -eq 0; then
			help 'No copy tools are available.' || :
			return 42 # ENOPROTOOPT 42 Protocol not available
		else
			tools=("${copy_tools[@]}")
		fi
	fi
	tool="$(
		choose-option --required \
			--question='Which tool to use?' \
			--filter="$tool" -- "${tools[@]}"
	)"

	# rsync options
	if test "$tool" = 'rsync'; then
		# ensure checksum, if copy or verify
		if test -z "$checksum"; then
			if confirm --negative --ppid=$$ -- "Compare files via checksum, instead of the quicker and default date and size comparison?"; then
				checksum='yes'
			else
				checksum='no'
			fi
		fi
		# ensure remove, if copy or verify
		if test -z "$remove"; then
			if confirm --negative --ppid=$$ -- "Remove the source files after successful copies?"; then
				remove='yes'
			else
				remove='no'
			fi
		fi
		# ensure linux, if copy or verify
		if test -z "$linux"; then
			if confirm --bool --ppid=$$ -- "Are both machines Linux machines?"; then
				linux='yes'
			else
				linux='no'
			fi
		fi
	fi

	# adjustments
	function adjust_format {
		local thing="$1" value="$2" what
		if test "${value:-1}" = '/'; then
			what='directory'
		else
			what='file'
		fi
		what="$(
			choose-option --required \
				--question="Is the $thing a file or a directory? $(echo-style --code="$value")" \
				--filter="$what" -- file directory
		)"
		if test "$what" = 'file' -a "${value:-1}" = '/'; then
			value="${value:0:-1}"
			echo-style "Adjusted $thing to " --code="$value" >/dev/stderr
		elif test "$what" = 'directory' -a "${value:-1}" != '/'; then
			value="${value}/"
			echo-style "Adjusted $thing to " --code="$value" >/dev/stderr
		fi
		print_line "$value"
	}
	function adjust_spaces {
		local thing="$1" value="$2" adjustment
		adjustment="$(echo-escape-spaces -- "$value")"
		if test "$adjustment" != "$value"; then
			echo-style "Adjusted $thing to " --code="$value" >/dev/stderr
		fi
		print_line "$adjustment"
	}
	function adjust_faux {
		local question suggestion tangent
		suggestion="$(get-local-to-remote "$1" 2>/dev/null || echo)"
		if test -n "$suggestion"; then
			question="$(
				cat <<-EOF
					What would you like to do?

					Using rsync with a remote directory that is mounted locally can be slow.
					It is recommended to use its remote location instead, which autodetection implies it as:
					$(echo-style --code_notice="$suggestion")
					Alternatively, attempt a different tool as they can be better under these circumstances.
				EOF
			)"
			tangent="$(
				choose-option \
					--question="$question" \
					--label -- \
					'exit' 'rethink and exit' \
					'ignore' 'ignore suggestion and continue anyway' \
					'different' 'attempt a different tool'
			)"
			if test "$tangent" = 'ignore'; then
				echo-style --dim='Faux Remotes: ignore and continue'
				return 0
			elif test "$tangent" = 'different'; then
				echo-style --dim='Faux Remotes: attempting a different tool'
				cpr --confirm="$confirm" --dry="$dry" --sudo="$sudo" --verify="$verify" -- "$origin" "$destination"
				return
			else
				echo-style --dim='Faux Remotes: exit'
				# exit / default
				return 1
			fi
		fi
		return 0
	}
	if test "$confirm" != 'no'; then
		origin="$(adjust_format origin "$origin")"
		destination="$(adjust_format destination "$destination")"
		origin="$(adjust_spaces origin "$origin")"
		destination="$(adjust_spaces destination "$destination")"
		if test "$tool" = 'rsync'; then
			adjust_faux "$origin"
			adjust_faux "$destination"
		fi
	fi

	# =====================================
	# Action

	# prepare
	local cmd=()

	# adjustments
	if test "$sudo" = 'yes'; then
		cmd+=(sudo)
	fi

	# tool
	if test "$tool" = 'rsync'; then
		# via rsync, file by file progress
		cmd+=(rsync)

		# -P: same as --partial --progress
		# --partial: keep partially transferred files
		# --progress: show progress during transfer
		#
		# --archive, -a: archive mode; equals -rlptgoD (no -H,-A,-X)
		#   --recursive, -r: recurse into directories
		#   --links, -l: copy symlinks as symlinks
		#   --perms, -p: preserve permissions
		#   --times, -t: preserve modification times
		#   --group, -g: preserve group
		#   --owner, -o: preserve owner (super-user only)
		#   -D: same as --devices --specials
		#   --devices: preserve device files (super-user only)
		#   --specials: preserve special files
		#
		# --human-readable, -h: output numbers in a human-readable format
		cmd+=(
			'-P'
			'--archive'
			'--human-readable'
		)

		# verify
		if test "$verify" = 'yes'; then
			# -i, --itemize-changes       output a change-summary for all updates
			# -n, --dry-run               show what would have been transferred
			cmd+=(
				'--itemize-changes'
				'--dry-run'
			)
		fi

		# linux
		if test "$linux" = 'yes'; then
			# --acls, -A: preserve ACLs (implies --perms)
			# --xattrs, -X: preserve extended attributes
			# --atimes, -U: preserve access (use) times
			cmd+=(
				'--acls'
				'--xattrs'
				'--atimes'
			)

			# --crtimes, -N: preserve create times (newness)
			# --crtimes not supported on ubuntu server on arm, nor manjero on x86
			# cmd+=('--crtimes')
		fi

		# checksum
		if test "$checksum" = 'yes'; then
			# --checksum, -c: skip based on checksum, not mod-time & size
			cmd+=('--checksum')
		fi

		# remove
		if test "$remove" = 'yes'; then
			cmd+=('--remove-source-files')
		fi

		# owner
		if test -n "$owner"; then
			cmd+=("--chown=${owner}")
		fi

		# paths
		cmd+=(
			"$origin"
			"$destination"
		)

		# workaround for rsync always returning success exit code
		# https://superuser.com/q/1700581/32418
		if test "$verify" = 'yes'; then
			function on_complete {
				if grep --quiet --regexp='^>' "$1"; then
					return 1
				else
					return 0
				fi
			}
		fi

	elif test "$tool" = 'gcp'; then
		# via gcp, overall progress
		cmd+=('gcp')

		# sanity check
		if test "$verify" = 'yes'; then
			help "[--tool=gcp] is incompatible with [--verify]"
		fi

		# -a, --archive: same as -dR --preserve=all
		# -d: same as --no-dereference --preserve=links
		# -R, -r, --recursive: copy directories recursively
		# --preserve PRESERVE: preserve specified attributes; accepted values: 'all', or one or more amongst {'ownership', 'timestamps', 'mode'}
		#
		# -v, --verbose: display what is being done
		cmd+=(
			'--archive'
			'--verbose'
		)

		# paths
		cmd+=(
			"$origin"
			"$destination"
		)

	elif test "$tool" = 'scp'; then
		# via scp
		cmd+=('scp')

		# sanity check
		if test "$verify" = 'yes'; then
			help "[--tool=scp] is incompatible with [--verify]"
		fi

		# -A: Allows forwarding of ssh-agent(1) to the remote system.  The default is not to forward an authentication agent.
		# -p: Preserves modification times, access times, and modes from the original file.
		# -r: Recursively copy entire directories.  Note that scp follows symbolic links encountered in the tree traversal.
		cmd+=(
			'-A'
			'-p'
			'-r'
		)

		# paths
		cmd+=(
			"$origin"
			"$destination"
		)

	elif test "$tool" = 'cp'; then
		# via cp
		cmd+=('cp')

		# sanity check
		if test "$verify" = 'yes'; then
			help "[--tool=cp] is incompatible with [--verify]"
		fi

		# -a: Same as -pPR options. Preserves structure and attributes of files but not directory structure.
		# -P; If the -R option is specified, no symbolic links are followed.  This is the default.
		# -R: When source_file designates a directory, cp copies the directory and the entire subtree connected at that point.  If the source_file ends in a /, the contents of the directory are copied rather than the directory itself.  This option also causes symbolic links to be copied, rather than indirected through, and for cp to create spe- cial files rather than copying them as normal files.  Created directories have the same mode as the corresponding source direc- tory, unmodified by the process' umask.
		#
		# -L: If the -R option is specified, all symbolic links are followed.
		# -p: Cause cp to preserve the following attributes of each source file in the copy: modification time, access time, file flags, file mode, user ID, and group ID, as allowed by permissions.  Access Control Lists (ACLs) and Extended Attributes (EAs), including resource forks, will also be preserved.
		# -f: If the destination file cannot be opened, remove it and create a new file, without prompting for confirmation regardless of its permissions.
		# -v: Cause cp to be verbose, showing files as they are copied.
		cmd+=(
			'-a'
			'-L'
			'-p'
			'-f'
			'-v'
		)

		# paths
		cmd+=(
			"$origin"
			"$destination"
		)

	elif test "$tool" = 'diff'; then
		cmd+=('diff')

		# sanity check
		if test "$verify" != 'yes'; then
			help "[--tool=diff] requires [--verify]"
		fi

		# -q  --brief: Output only whether files differ.
		# -r  --recursive: Recursively compare any subdirectories found.
		cmd+=(
			'--brief'
			'--recursive'
		)

		# paths
		cmd+=(
			"$origin"
			"$destination"
		)

	elif test "$tool" = 'git'; then
		cmd+=(
			'git'
			'diff'
		)

		# sanity check
		if test "$verify" != 'yes'; then
			help "[--tool=git] requires [--verify]"
		fi

		# --no-index: This form is to compare the given two paths on the filesystem. You can omit the --no-index option when running the command in a working tree controlled by Git and at least one of the paths points outside the working tree, or when running the command outside a working tree controlled by Git. This form implies --exit-code.
		cmd+=('--no-index')

		# paths
		cmd+=(
			"$origin"
			"$destination"
		)

	else
		help "Invalid tool: $tool"
	fi

	# run
	local output
	if test "$dry" = 'yes'; then
		print_line "${cmd[@]}"
	elif test "$(type -t 'on_complete')" = 'function'; then
		print_line "${cmd[@]}"
		output="$(mktemp)"
		"${cmd[@]}" | tee "$output"
		on_complete "$output"
	else
		eval-helper --no-quiet --wrap --shapeshifter \
			-- "${cmd[@]}"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	cpr_ "$@"
fi
