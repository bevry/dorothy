#!/usr/bin/env bash

function echo_trim_each_line_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	local inputs=(' a ' $'\t a \t\n b ' $'\t a \t' ' b ')
	local expected=$'a\na\nb\na\nb'

	eval-tester --name='trimming arguments' --stdout="$expected" \
		-- echo-trim-each-line -- "${inputs[@]}"

	{
		print_lines "${inputs[@]}"
	} | eval-tester --name='trimming arguments' --stdout="$expected" \
		-- echo-trim-each-line --stdin

	echo-segment --g1="TEST: $0"
	return 0
)
function echo_trim_each_line() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Trims surrounding whitespace from each line.

			USAGE:
			echo-trim-each-line [...options] [--] ...<input>
			echo-lines ...<input> | echo-trim-each-line [...options]

			OPTIONS:
			$(stdinargs_options_help --)

			EXAMPLE:

			echo-trim-each-line -- ' a '

			    a

			echo-trim-each-line -- $'\t a \t\n b '

			    a
			    b

			echo-lines -- $'\t a \t' ' b ' | echo-trim-each-line --stdin

			    a
			    b

		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# =====================================
	# Action

	function on_line {
		# str can be a multiline string, trim all trailing and leading whitespace characters using bash parameter expansion
		local str="$1"
		str="${str#"${str%%[![:space:]]*}"}" # remove leading whitespace characters
		str="${str%"${str##*[![:space:]]}"}" # remove trailing whitespace characters
		print_line "$str"
		# print_line "$1" | grep --only-matching --regexp='^[[:space:]]*[^[:space:]]\+[[:space:]]*$'
		# print_line "$1" | awk '{$1=$1};1'
		# print_line "$1" | sd '^[[:blank:]]+|[[:blank:]]+$' ''
		# print_line "$1" | sed -e 's/^[[:blank:]]+|[[:blank:]]+$//'
	}

	stdinargs "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_trim_each_line_test
	else
		echo_trim_each_line "$@"
	fi
fi
