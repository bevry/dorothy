#!/usr/bin/env bash

function setup_util_brew() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util --check --checker=is-brew "$@"; then
		return 0
	fi

	# environment provides:
	# HOMEBREW_ARCH (macos), HOMEBREW_PREFIX (macos, linux)
	if [[ -z ${HOMEBREW_PREFIX-} ]]; then
		echo-error --bold='setup-util-brew: cannot setup brew because HOMEBREW_PREFIX is missing, this could be due to:' --newline \
			'- homebrew is only supported on macOS and Windows' --newline \
			'- this command was executed before Dorothy could configure the shell environment, this most likely occurred because a Dorothy maintainer invoked a dorothy command within the dorothy install process'
		env
		return 6 # ENXIO 6 Device not configured
	fi

	# ensure we are running inside the system bash, such that after homebrew install this continues
	local system_bash_invoker
	if [[ ${DOROTHY_RUN-} == 'yes' ]]; then
		system_bash_invoker="env BASH_CHECKED=yes /bin/bash '$(type -P 'dorothy')' run -- /bin/bash '$(type -P 'setup-util-brew')' --uninstall --verbose"
	else
		system_bash_invoker="env BASH_CHECKED=yes /bin/bash '$(type -P 'setup-util-brew')' --uninstall --verbose"
	fi
	if [[ $* == *'--uninstall'* && ${BASH_CHECKED-} != 'yes' ]]; then
		echo-error --bold='cannot uninstall homebrew while running inside a homebrew shell, continue the uninstallation by running:' --newline \
			--code="$system_bash_invoker"
		return 6 # ENXIO 6 Device not configured
	fi

	# enable EVAL_INSTALL, etc
	source "$(type -P setup-util)"

	# uninstall brew, and adapt the system accordingly
	function brew_uninstall {
		# reconfigure shells for the lack of brew, by trimming the brew shells
		grep --invert-match --fixed-strings --regexp="$HOMEBREW_PREFIX" -- /etc/shells | echo-wait --atomic -- /etc/shells

		# set the default shell to a non-brew shell
		setup-shell --no-brew

		# ensure that the login shell is not brew
		if [[ $SHELL == "$HOMEBREW_PREFIX/"* ]]; then
			echo-error --bold='cannot uninstall homebrew while running inside a homebrew login shell, continue the uninstallation by running:' --newline \
				--code="$system_bash_invoker"
			return 6 # ENXIO 6 Device not configured
		fi

		# reset anything that depends on brew
		setup-dns --service='system' || :

		# uninstall brew
		if __is_brew; then
			if [[ -n ${HOMEBREW_ARCH-} ]]; then
				arch -"$HOMEBREW_ARCH" \
					/bin/bash -c "$(fetch https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" -- --force
			else
				/bin/bash -c "$(fetch https://raw.githubusercontent.com/Homebrew/install/HEAD/uninstall.sh)" -- --force
			fi
		fi
		source "$DOROTHY/sources/environment.sh"

		# remove any leftover directories
		# use /* as the actual homebrew location can be a read-only filesystem
		fs-rm --optional --quiet --no-confirm --sudo -- "$HOMEBREW_PREFIX"/* /usr/local/* /opt/homebrew/* || :

		# reconfigure git after the uninstallation of brew
		setup-git --slim || :
	}

	# recommended installation method, it is pretty much the only one that works properly
	# https://github.com/bevry/dorothy/commit/fff6fbc079aaa6ab9bb8438e02c307ebad46fd75
	# https://github.com/bevry/dorothy/commit/69dbbe81bf30f9e0d9a1dd1d00eca3f3c88b943b
	function brew_install {
		if [[ -n ${HOMEBREW_ARCH-} ]]; then
			arch "-${HOMEBREW_ARCH}" \
				/bin/bash -c "$(fetch https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		else
			/bin/bash -c "$(fetch https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
		fi
		source "$DOROTHY/sources/environment.sh" # child processes will also inherit these changes
	}

	# upgrade brew
	function brew_upgrade {
		if __is_brew; then
			brew update
		else
			brew_install
		fi
	}

	# setup
	local options=(
		--name='Homebrew'
		--checker='is-brew'
		"$@"
		EVAL_INSTALL='brew_install'
		EVAL_UPGRADE='brew_upgrade'
		EVAL_UNINSTALL='brew_uninstall'
	)
	setup_util "${options[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	setup_util_brew "$@"
fi
