#!/usr/bin/env bash

# https://en.wikipedia.org/wiki/X86-64
# https://en.wikipedia.org/wiki/AArch64
# https://askubuntu.com/a/1320647/22776
# https://stackoverflow.com/q/67996157/130638

function get_arch() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the architecture of the current system.

			USAGE:
			get-arch

			OUTPUTS:
			[a64] for ARM 64 bit, including Raspberry Pi and Apple M1
			[x64] for AMD/Intel 64 bit, aka x86_64, including Apple M1 via $(echo-style --code='arch -x86_64 ...')
			[x32] for AMD/Intel 32 bit, aka x86
			[a32] for ARM 32 bit, including Raspberry Pi 1, 2, 3
			[r64] for RISC-V 64 bit

			RETURNS:
			[0] if architecture was known
			[1] if architecture was unknown or could not be determined
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	local arch
	arch="$(uname -m)" # -i is only linux, -m is linux and apple
	if test "$arch" = 'aarch64' -o "$arch" = 'arm64'; then
		__print_lines 'a64' # raspberry pi, apple m1
	elif [[ $arch == x86_64* ]]; then
		if [[ "$(uname -a)" == *ARM64* ]]; then
			__print_lines 'a64' # apple m1 running via `arch -x86_64 /bin/bash -c 'uname -m'`
		else
			__print_lines 'x64'
		fi
	elif [[ $arch == i*86 ]]; then
		__print_lines 'x32'
	elif [[ $arch == arm* ]]; then
		__print_lines 'a32'
	elif test "$arch" = 'riscv64'; then
		__print_lines 'r64'
	else
		return 1
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_arch "$@"
fi
