#!/usr/bin/env bash

# https://en.wikipedia.org/wiki/X86-64
# https://en.wikipedia.org/wiki/AArch64
# https://askubuntu.com/a/1320647/22776
# https://stackoverflow.com/q/67996157/130638

# APPLE INTEL
# > uname -a
# Darwin balupton-mbp.local 22.6.0 Darwin Kernel Version 22.6.0: Wed Jul 31 21:42:48 PDT 2024; root:xnu-8796.141.3.707.4~1/RELEASE_X86_64 x86_64
# > uname -v
# Darwin Kernel Version 22.6.0: Wed Jul 31 21:42:48 PDT 2024; root:xnu-8796.141.3.707.4~1/RELEASE_X86_64
# > uname -m
# x86_64
# > uname -p
# arm
# > uname -r
# 23.6.0

# APPLE SILICON
# > uname -a
# Darwin balupton-mini.local 23.6.0 Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:21 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T8103 arm64
# > uname -m
# arm64
# > uname -v
# Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:21 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T8103
# > uname -p
# arm

# APPLE SILICON EMULATED
# > arch -x86_64 /bin/bash -c 'uname -a'
# Darwin balupton-mini.local 23.6.0 Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:21 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T8103 x86_64
# > arch -x86_64 /bin/bash -c 'uname -m'
# x86_64
# > arch -x86_64 /bin/bash -c 'uname -v'
# Darwin Kernel Version 23.6.0: Mon Jul 29 21:14:21 PDT 2024; root:xnu-10063.141.2~1/RELEASE_ARM64_T8103
# > arch -x86_64 /bin/bash -c 'uname -p'
# i386

# ALPINE INTEL via PODMAN
# uname -a
# Linux d20f3e6b5dd8 6.10.10-200.fc40.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Sep 12 18:26:09 UTC 2024 x86_64 Linux
# uname -v
#1 SMP PREEMPT_DYNAMIC Thu Sep 12 18:26:09 UTC 2024
# uname -m
# x86_64

# UBUNTU INTEL via PODMAN
# uname -a
# Linux 82e02a27be5f 6.10.10-200.fc40.x86_64 #1 SMP PREEMPT_DYNAMIC Thu Sep 12 18:26:09 UTC 2024 x86_64 x86_64 x86_64 GNU/Linux
# uname -v
#1 SMP PREEMPT_DYNAMIC Thu Sep 12 18:26:09 UTC 2024
# uname -m
# x86_64

function get_arch() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the architecture of the current system.

			USAGE:
			get-arch

			OUTPUTS:
			[a64] for ARM 64 bit, including Raspberry Pi, Apple Silicon, and Apple Silicon via $(echo-style --code='arch -x86_64 ...')
			[x64] for AMD/Intel 64 bit, aka x86_64
			[x32] for AMD/Intel 32 bit, aka x86
			[a32] for ARM 32 bit, including Raspberry Pi 1, 2, 3
			[r64] for RISC-V 64 bit

			RETURNS:
			[0] if architecture was known
			[1] if architecture was unknown or could not be determined
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	local arch
	arch="$(uname -m)" # -i is only linux, -m is linux and apple, -p follows [arch ...] emulation
	if [[ $arch == 'aarch64' || $arch == 'arm64' ]]; then
		__print_lines 'a64' # raspberry pi, apple silicon
	elif [[ $arch == x86_64* ]]; then
		if [[ "$(uname -v)" == *ARM64* ]]; then
			__print_lines 'a64' # apple silicon running via `arch -x86_64 /bin/bash -c 'uname -m'`
		else
			__print_lines 'x64'
		fi
	elif [[ $arch == i*86 ]]; then
		__print_lines 'x32'
	elif [[ $arch == arm* ]]; then
		__print_lines 'a32'
	elif [[ $arch == 'riscv64' ]]; then
		__print_lines 'r64'
	else
		return 1
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	get_arch "$@"
fi
