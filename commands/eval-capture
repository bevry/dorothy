#!/usr/bin/env bash
source "$DOROTHY/sources/bash.bash"

# disable strict mode so that we can test it specifically
set +eu

if [[ $* == '--test' ]]; then
	expected="$(
		cat <<-EOF
			root start
			middle start
			first hBE
			second hBE
			third ehBE
			trap -- 'EVAL_CAPTURE_RETURN=\$?; if [[ \$- = *e* ]]; then eval_capture_wrapper_trap "\$EVAL_CAPTURE_RETURN" "\${FUNCNAME-}" "\${cmd[*]}" "\${BASH_SUBSHELL-}" "\$EVAL_CAPTURE_CONTEXT"; return \$?; fi' ERR
			middle failure 1
			trap -- 'EVAL_CAPTURE_RETURN=\$?; if [[ \$- = *e* ]]; then eval_capture_wrapper_trap "\$EVAL_CAPTURE_RETURN" "\${FUNCNAME-}" "\${cmd[*]}" "\${BASH_SUBSHELL-}" "\$EVAL_CAPTURE_CONTEXT"; return \$?; fi' ERR
			root failure 1
			core failure 1
			root start
			middle start
			first ehBE
			trap -- 'EVAL_CAPTURE_RETURN=\$?; if [[ \$- = *e* ]]; then eval_capture_wrapper_trap "\$EVAL_CAPTURE_RETURN" "\${FUNCNAME-}" "\${cmd[*]}" "\${BASH_SUBSHELL-}" "\$EVAL_CAPTURE_CONTEXT"; return \$?; fi' ERR
			middle failure 1
			root failure 1
		EOF
	)"
	eval-tester --name='as expected' --status='1' --stdout="$expected" \
		-- eval-capture --
	exit $?
elif [[ $* == '--' ]]; then
	: # all good, run
else
	echo-error 'eval-capture only exists for testing, you actually want to use eval_capture which is provided by sourcing bash.bash'
	exit 22 # EINVAL 22 Invalid argument
fi

function testing_failure() (
	__print_lines "first $-"
	false
	set +e
	__print_lines "second $-"
	false
	set -e
	__print_lines "third $-"
	false
	__print_lines "fourth $- YOU SHOULD NOT SEE THIS"
)
function testing_middle {
	local middle_status
	__print_lines 'middle start'
	eval_capture --statusvar=middle_status -- testing_failure
	trap -p | grep --regexp='ERR$' || : # use grep as CI has SIGPIPE traps
	if [[ $middle_status -eq 0 ]]; then
		__print_lines "middle ok $middle_status"
	else
		__print_lines "middle failure $middle_status"
	fi
	return "$middle_status"
}
function testing_root {
	local root_status
	__print_lines 'root start'
	eval_capture --statusvar=root_status -- testing_middle
	trap -p | grep --regexp='ERR$' || : # use grep as CI has SIGPIPE traps
	if [[ $root_status -eq 0 ]]; then
		__print_lines "root ok $root_status"
	else
		__print_lines "root failure $root_status"
	fi
	return "$root_status"
}

core_status=
eval_capture --statusvar=core_status -- testing_root
trap -p | grep --regexp='ERR$' || : # use grep as CI has SIGPIPE traps
if [[ $core_status -eq 0 ]]; then
	__print_lines "core ok $core_status"
else
	__print_lines "core failure $core_status"
fi

# test that trap was removed
trap -p | grep --regexp='ERR$' && {
	__print_lines 'trap was not removed'
	exit 1
}

# test that root-level failures fail
set -e
testing_root
print_line "finale $- YOU SHOULD NOT SEE THIS"
