#!/usr/bin/env bash

function get_profile() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/config.sh"

	local property_options=(
		name
		email
		url
		username
		possesive-pronoun
	)
	local source_options=(
		config
		git
		npm
		os
	)

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			$(echo-style --h1='SYNOPSIS')
			$(
				echo-style \
					--bold='get-profile' ' ' \
					--italic='[' \
					--bold="$(
						echo-join \
							"$(
								echo-style --disable-bold --italic='|' --bold
							)" \
							-- "${property_options[@]}"
					)" \
					--disable-bold \
					--italic=']' ' ' --italic='[' \
					--bold='--' ' ' \
					--italic='...[' \
					--bold="$(
						echo-join \
							"$(
								echo-style --disable-bold --italic='|' --bold
							)" \
							-- "${source_options[@]}" '...'
					)" \
					--disable-bold+italic=']]'
			)

			$(echo-style --h1='DESCRIPTION')
			Attempts to retrieve a profile property from one or more sources.

			$(echo-style --h1='CONFIGURATION')
			The $(echo-style --bold='config') source uses the $(echo-style --bold='profile.bash') configuration file.

			$(echo-style --h1='OPTIONS')
			$(
				echo-style \
					--bold='get-profile' ' ' \
					--italic='[property]' ' ' --italic='[' \
					--bold='--' ' ' \
					--italic='...[source]]'
			)

			$(echo-style --italic='property')
			    if provided, it must be one of these values:
			        $(
				echo-style --bold="$(
					echo-join "$(
						echo-style --disable-bold --italic=',' ' ' --bold
					)" -- "${property_options[@]}"
				)"
			)
			    if omitted, you will be prompted to make a selection.

			$(echo-style --italic='source')
			    if provided, it must be one or more of these values:
			        $(
				echo-style --bold="$(
					echo-join "$(
						echo-style --disable-bold --italic=',' ' ' --bold
					)" -- "${source_options[@]}" '...'
				)"
			)
			    if omitted, all sources will be used.
			    if $(echo-style --bold='...') is used, it will be expanded to all sources.

			$(echo-style --h1='EXIT STATUS')
			$(echo-style --green='[0] if a value was found.')
			stdout will output the fetched value.
			stderr will be empty.

			$(echo-style --red='[6 Device not configured] if no value was found.')
			stdout will be empty.
			stderr will output that the result is undefined.

			$(echo-style --h1='EXAMPLES')
			Attempt to retrieve the name from the first available source, these are equivalent:

			    $(echo-style --bold='get-profile name')
			    $(echo-style --bold='get-profile name --')
			    $(echo-style --bold='get-profile name -- ...')

			Attempt to retrieve the name from only npm:

			    $(echo-style --bold='get-profile name -- npm')

			Attempt to retrieve the name from the first available source, starting with npm and git:

			    $(echo-style --bold='get-profile name -- npm git ...')
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	local selected_property=''
	local selected_sources=()
	function select_property {
		selected_property="$(
			choose-option --required \
				--question="Which profile property to fetch the value for?" \
				-- "${property_options[@]}"
		)"
	}
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'...')
			selected_sources+=("${source_options[@]}")
			;;
		'--')
			if test -z "$selected_property"; then
				select_property
			fi
			continue
			;;
		*)
			if test -z "$selected_property"; then
				if is-needle --needle="$item" -- "${property_options[@]}"; then
					selected_property="$item"
				else
					help "An invalid property option was provided: $item"
				fi
			else
				selected_sources+=("$item")
			fi
			;;
		esac
	done

	# =====================================
	# Adjustments

	# if no property, then prompt the user
	if test -z "$selected_property"; then
		select_property
	fi

	# convert empty source selection, to use all source options
	if test "${#selected_sources[@]}" -eq 0; then
		selected_sources=("${source_options[@]}")
	fi

	# =====================================
	# Action

	local result selected_source
	for selected_source in "${selected_sources[@]}"; do
		result=''
		case "$selected_source" in
		'config')
			load_dorothy_config 'profile.bash'
			case "$selected_property" in
			'name') result="${NAME-}" ;;
			'email') result="${EMAIL-}" ;;
			'url') result="${URL-}" ;;
			'username') result="${USERNAME-}" ;;
			'possesive-pronoun') result="${POSSESSIVE_PRONOUN-}" ;;
			*) ;; # continue to next source/property combination
			esac
			;;
		'git')
			case "$selected_property" in
			'name' | 'email')
				result="$(
					git config --global "user.${selected_property}"
				)"
				;;
			'username')
				result="$(
					git config --global 'github.user' || git config --global 'gitlab.user'
				)"
				;;
			*) ;; # continue to next source/property combination
			esac
			;;
		'npm')
			case "$selected_property" in
			'name' | 'email' | 'url')
				if command-exists npm; then
					# 2>/dev/null to hide warning about old `.` instead of `-` format
					result="$(
						nvm-env -- npm config get "init-author-${selected_property}" 2>/dev/null || nvm-env -- npm config get "init.author.${selected_property}" 2>/dev/null
					)"
				fi
				;;
			*) ;; # continue to next source/property combination
			esac
			;;
		'os')
			case "$selected_property" in
			'name')
				result="$(
					id -F
				)"
				;;
			'username')
				result="$(
					whoami
				)"
				;;
			*) ;; # continue to next source/property combination
			esac
			;;
		*) help "An invalid source option was provided: $selected_source" ;;
		esac

		# if we have a result, then exit with it
		if test -n "$result"; then
			print_line "$result"
			return 0
		fi
	done

	# if we are here, then no result was found, so apply a default if supported
	if test "$selected_property" = 'possesive-pronoun'; then
		print_line 'their'
		return 0
	fi

	# if still nothing, do not output anything, just return a failure
	# as outputting something causes that something to be visible to the user when doing things like `="$(get-profile ... || :)"` which is unintituive
	return 6 # ENXIO 6 Device not configured
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_profile "$@"
fi
