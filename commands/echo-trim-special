#!/usr/bin/env bash

function echo_trim_special_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	local styles=(
		clear-line
		delete-line
		clear-screen
		enable-cursor-blinking
		disable-cursor-blinking
		show-cursor
		hide-cursor
		reset-cursor
		cursor-blinking-block
		cursor-steady-block
		cursor-blinking-underline
		cursor-steady-underline
		cursor-blinking-bar
		cursor-steady-bar
		alternative-screen-buffer
		default-screen-buffer
		bell
		newline
		tab
		backspace
		carriage-return
		escape
		home
		terminal-title
		end-terminal-title
		terminal-resize
		end-terminal-resize
		terminal-clipboard
		end-terminal-clipboard
		reset
		bold
		dim
		italic
		underline
		double-underline
		blink
		invert
		conceal
		strike
		framed
		circled
		overlined
		foreground-black
		foreground-red
		foreground-green
		foreground-yellow
		foreground-blue
		foreground-magenta
		foreground-cyan
		foreground-white
		foreground-purple
		foreground-gray
		foreground-grey
		foreground-intense-black
		foreground-intense-red
		foreground-intense-green
		foreground-intense-yellow
		foreground-intense-blue
		foreground-intense-magenta
		foreground-intense-cyan
		foreground-intense-white
		foreground-intense-purple
		foreground-intense-gray
		foreground-intense-grey
		background-black
		background-red
		background-green
		background-yellow
		background-blue
		background-magenta
		background-cyan
		background-white
		background-purple
		background-gray
		background-grey
		background-intense-black
		background-intense-red
		background-intense-green
		background-intense-yellow
		background-intense-blue
		background-intense-magenta
		background-intense-cyan
		background-intense-white
		background-intense-purple
		background-intense-gray
		background-intense-grey
	)
	local args=() style
	for style in "${styles[@]}"; do
		args+=("--$style=$style")
	done

	{
		echo-style "${args[@]}" | echo-trim-special --stdin
	} | eval-tester --stdout=$'red' -- \
		cat

	echo-style --g1="TEST: $0"
	return 0
)
function echo_trim_special() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Trims special characters from <input>.

			USAGE:
			echo-trim-special [...options] [--] ...<input>
			echo-lines ...<input> | echo-trim-special [...options]

			OPTIONS:
			$(stdinargs_options_help --)

			EXAMPLE:

			echo-trim-special -- "\$(echo-style --green='a/b?c!e f\$g')"

			    abce fg
			    # exit status: 0

			echo-style --green='a/b?c!e f' | echo-trim-special --stdin

			    abce fg
			    # exit status: 0

			QUIRKS:
			This will trim slashes and question marks, etc.

		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# =====================================
	# Dependencies

	local bin_gsed_or_sed
	bin_gsed_or_sed="$(echo-gnu-command --install -- gsed)"

	# =====================================
	# Action

	function on_line {
		# @todo replace with `echo-regexp` and `echo-write`
		# don't use [sd] here, as this is used by [down], and thus [setup-util-sd]
		# https://www.gnu.org/software/sed/manual/html_node/Character-Classes-and-Bracket-Expressions.html
		__print_lines "$1" | "$bin_gsed_or_sed" -E 's/[^[:print:]]//g; s/\[[0-9]+m//g; s/[^[:alnum:][:space:].-]//g'
	}

	stdinargs "$@"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		echo_trim_special_test
	else
		echo_trim_special "$@"
	fi
fi
