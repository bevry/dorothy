#!/usr/bin/env bash
source "$DOROTHY/sources/essentials.sh"
source "$DOROTHY/sources/strict.bash"

# Install ruby if necessary
echo -e "\nEnsuring ruby is installed..."
brew_ruby='ruby'
if test -n "${RUBY_VERSION-}" -a "${RUBY_VERSION-}" != 'system'; then
	brew_ruby="ruby@${RUBY_VERSION}"
fi
env CLI=ruby \
	APK=ruby \
	APT='ruby-full' \
	BREW="$brew_ruby" \
	PACMAN=ruby \
	setup-util

# Clear caches that can conflict with paths and old installs
# Using only the intended one, which is GEM_HOME
echo -e "\nCleaning caches..."
if test -d "$HOME/.gem"; then
	echo "Cleaning: $HOME/.gem"
	rm -Rf "$HOME/.gem"
fi
if test -d "$HOME/.ruby"; then
	echo "Cleaning: $HOME/.ruby"
	rm -Rf "$HOME/.ruby"
fi
if is-string "${GEM_HOME-}"; then
	if test -d "$GEM_HOME"; then
		echo "Cleaning: $GEM_HOME"
		rm -Rf "$GEM_HOME"
	fi
	mkdir -p "$GEM_HOME"
fi

# Reload paths
echo -e '\nReload paths to help changes be detected...'
source "$DOROTHY/sources/paths.sh"

# Check
if ! command-exists gem; then
	stderr echo -e '\nUnable to find [gem] executable, so cannot proceed... ❌'
	exit 1
fi

# Helper
function act {
	for arg in "$@"; do
		local name="${arg% *}"
		local version="${arg#* }"  # will be the same as name, if no version was provided
		if test "$version" = "$name"; then
			version=''
		fi
		env GEM="$name" GEM_VERSION="$version" setup-util gem
	done
}

# Update
# As we wipe gems each time, this is no longer needed
# also, it causes the following error on apt systems
# ERROR:  Your RubyGems was installed trough APT, and upgrading it through RubyGems
# 	itself is unsupported. If you really need the latest version of RubyGems (tip:
# 	you usually don't), then you need to install RubyGems (and Ruby) manually,
# 	maybe using tools like ruby-install, rvm, etc.
# echo -e '\nUpdating ruby gems...'
# gem update --system

# Install
echo -e '\nInstalling ruby gems...'
if is-present "${RUBY_INSTALL-}"; then
	act "${RUBY_INSTALL[@]}"
fi

# Done
echo -e '\nInstalled ruby and its gems successfully. ✅'
