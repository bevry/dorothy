#!/usr/bin/env bash

function setup_ruby() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile' 'empty'

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# environment provides:
	# GEM_HOME

	# environment.bash provides:
	# HOMEBREW_RUBY_VERSION

	# setup.bash provides:
	local GEM_INSTALL=()
	local RUBY_INSTALL=() # deprecated, use GEM_INSTALL
	load_dorothy_config 'setup.bash'

	# deprecations
	if test "${#RUBY_INSTALL[@]}" -ne 0; then
		GEM_INSTALL+=("${RUBY_INSTALL[@]}")
		dorothy-config 'setup.bash' -- \
			--field='RUBY_INSTALL' --replace= \
			--field='GEM_INSTALL' --array="$(print_lines "${GEM_INSTALL[@]}" | sort --ignore-case | uniq)"
	fi

	# adjustments
	mapfile -t GEM_INSTALL < <(dorothy-config --packages-var='GEM_INSTALL' -- "${GEM_INSTALL[@]}")

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			setup-ruby [--flags]

			FLAGS:
			--optional
			    Only setup if it is needed by packages.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_optional=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-optional'* | '--optional'*)
			option_optional="$(get-flag-value --affirmative --fallback="$option_optional" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# check
	if test "$option_optional" = 'yes' -a "${#GEM_INSTALL[@]}" -eq 0 && ! confirm --negative --ppid=$$ -- 'Setup Ruby?'; then
		return 0
	fi

	# =====================================
	# Start

	echo-segment --h1="Setup Ruby"

	# =====================================
	# Install

	echo-segment --h2='Install ruby'
	setup-util-ruby --upgrade --no-quiet
	echo-segment --h2='Install ruby'

	# =====================================
	# Caches

	echo-segment --h2='Pruning cache'

	# .ruby is an deprecated cache location, clear it
	if test -d "$HOME/.ruby"; then
		echo-style --dim="Pruning:       $HOME/.ruby"
		fs-rm --quiet --no-confirm -- "$HOME/.ruby"
	fi

	# clear .gem
	if test -d "$HOME/.gem"; then
		echo-style --dim="Pruning:       $HOME/.gem"
		fs-rm --quiet --no-confirm -- "$HOME/.gem"
	fi

	# clear GEM_HOME and remake it
	if test -n "${GEM_HOME-}"; then
		if test -d "$GEM_HOME"; then
			echo-style --dim="Pruning:       $GEM_HOME"
			fs-rm --quiet --no-confirm -- "$GEM_HOME"
		fi
		mkdir -p "$GEM_HOME"
	fi

	echo-segment --g2='Pruning cache'

	# =====================================
	# Reload

	# reload paths for changes to be detected and confirm installation

	echo-segment --h2='Reload paths'
	source "$DOROTHY/sources/environment.sh"
	if ! command-exists gem; then
		echo-style --e2='Unable to find [gem] executable, so cannot proceed... ❌' >/dev/stderr
		return 1
	fi
	echo-style \
		--dim="Ruby Path:      $(type -P ruby)" $'\n' \
		--dim="Ruby Version:   $(ruby --version)" $'\n' \
		--dim="Gem Path:       $(type -P gem)" $'\n' \
		--dim="Gem Version:    $(gem --version)"
	echo-segment --g2='Reload paths'

	# =====================================
	# Update

	# As we wipe gems each time, this is no longer needed
	# also, it causes the following error on apt systems
	# ERROR:  Your RubyGems was installed trough APT, and upgrading it through RubyGems
	# 	itself is unsupported. If you really need the latest version of RubyGems (tip:
	# 	you usually don't), then you need to install RubyGems (and Ruby) manually,
	# 	maybe using tools like ruby-install, rvm, etc.
	# echo
	# print_line 'Updating ruby gems...'
	# gem update --system

	# =====================================
	# Packages

	setup-util --installer=GEM -- "${GEM_INSTALL[@]}"

	# =====================================
	# Finish

	echo-segment --g1="Setup Ruby"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_ruby "$@"
fi
