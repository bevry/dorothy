#!/usr/bin/env bash

# https://github.com/syncthing/syncthing
# https://apt.syncthing.net/
# alternative to resilio sync

# https://github.com/syncthing/syncthing/releases
# syncthing-dragonfly-amd64-v1.23.7-rc.2.tar.gz
# syncthing-freebsd-386-v1.23.7-rc.2.tar.gz
# syncthing-freebsd-amd64-v1.23.7-rc.2.tar.gz
# syncthing-freebsd-arm-v1.23.7-rc.2.tar.gz
# syncthing-freebsd-arm64-v1.23.7-rc.2.tar.gz
# syncthing-illumos-amd64-v1.23.7-rc.2.tar.gz
# syncthing-linux-386-v1.23.7-rc.2.tar.gz
# syncthing-linux-amd64-v1.23.7-rc.2.tar.gz
# syncthing-linux-arm-v1.23.7-rc.2.tar.gz
# syncthing-linux-arm64-v1.23.7-rc.2.tar.gz
# syncthing-linux-loong64-v1.23.7-rc.2.tar.gz
# syncthing-linux-mips-v1.23.7-rc.2.tar.gz
# syncthing-linux-mips64-v1.23.7-rc.2.tar.gz
# syncthing-linux-mips64le-v1.23.7-rc.2.tar.gz
# syncthing-linux-mipsle-v1.23.7-rc.2.tar.gz
# syncthing-linux-ppc64-v1.23.7-rc.2.tar.gz
# syncthing-linux-ppc64le-v1.23.7-rc.2.tar.gz
# syncthing-linux-riscv64-v1.23.7-rc.2.tar.gz
# syncthing-linux-s390x-v1.23.7-rc.2.tar.gz
# syncthing-macos-amd64-v1.23.7-rc.2.zip
# syncthing-macos-arm64-v1.23.7-rc.2.zip
# syncthing-macos-universal-v1.23.7-rc.2.zip
# syncthing-netbsd-386-v1.23.7-rc.2.tar.gz
# syncthing-netbsd-amd64-v1.23.7-rc.2.tar.gz
# syncthing-netbsd-arm-v1.23.7-rc.2.tar.gz
# syncthing-netbsd-arm64-v1.23.7-rc.2.tar.gz
# syncthing-openbsd-386-v1.23.7-rc.2.tar.gz
# syncthing-openbsd-amd64-v1.23.7-rc.2.tar.gz
# syncthing-openbsd-arm-v1.23.7-rc.2.tar.gz
# syncthing-openbsd-arm64-v1.23.7-rc.2.tar.gz
# syncthing-solaris-amd64-v1.23.7-rc.2.tar.gz
# syncthing-source-v1.23.7-rc.2.tar.gz
# syncthing-source-v1.23.7-rc.2.tar.gz.asc
# syncthing-windows-386-v1.23.7-rc.2.zip
# syncthing-windows-amd64-v1.23.7-rc.2.zip
# syncthing-windows-arm-v1.23.7-rc.2.zip
# syncthing-windows-arm64-v1.23.7-rc.2.zip

# @todo support bsd

function setup_util_syncthing() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Preparation

	# https://docs.syncthing.net/users/autostart.html#linux
	# https://docs.syncthing.net/users/autostart.html#using-the-desktop-environment-kde-gnome-xfce-cinnamon

	# https://docs.syncthing.net/users/config.html
	# user: Set to require authentication.
	# password: Contains the bcrypt hash of the real password.
	# copyOwnershipFromParent: On Unix systems, tries to copy file/folder ownership from the parent directory (the directory itâ€™s located in). Requires running Syncthing as a privileged user, or granting it additional capabilities (e.g. CAP_CHOWN on Linux).

	local service_title='Syncthing'
	local service_ids=(
		"syncthing@$(whoami)" # this is virtual
	)
	local service_desktop_path='/usr/share/applications/syncthing-start.desktop'
	local service_desktop_autostarter="$XDG_CONFIG_HOME/autostart/syncthing-start.desktop"
	local service_uninstall_paths=(
		# desktop
		"$service_desktop_path"
		"$service_desktop_autostarter"

		# user config and data
		"$XDG_CONFIG_HOME/syncthing"                  # linux
		"$HOME/Library/Application Support/Syncthing" # macOS

		# app data
		"$XDG_DATA_HOME/syncthing"
	)

	# =====================================
	# Setup Utility

	# despite docs, no apk
	local options=(
		--cli='syncthing'
		--app='Syncthing'
		"$@"
		APT_KEY='https://syncthing.net/release-key.gpg'
		APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://apt.syncthing.net/ syncthing stable'
		APT='syncthing' # UBUNTU
		AUR='syncthing' # ARCH
		BREW='syncthing'
		BSD='syncthing'
		CARGO='syncthing'
		CASK='homebrew/cask/syncthing'
		CHOCO='syncthing'
		NIX='syncthing'
		PORT='syncthing'
		RPM='syncthing' # FEDORA
		SCOOP='syncthing'
		XBPS='syncthing'   # VOID
		ZYPPER='syncthing' # SUSE
	)
	setup-util "${options[@]}"
	# @todo: installing via download requires installing the service, and I currently don't know how to do that
	#
	# function get_github_asset_url {
	# 	github-download \
	# 		--dry \
	# 		--slug='syncthing/syncthing' \
	# 		--latest \
	# 		--asset-regexp="$(echo-escape-regexp -- "$1")" | echo-first-line || :
	# }
	# function add_download_option {
	# 	options+=(
	# 		DOWNLOAD="$(get_github_asset_url "$1")"
	# 		DOWNLOAD_ARCHIVE_GLOB="$2"
	# 	)
	# }
	# arch="$(get-arch)"
	# if is-mac; then
	# 	if test "$arch" = 'a64'; then
	# 		add_download_option '-macos-arm64-' 'syncthing'
	# 	else
	# 		add_download_option '-macos-amd64-' 'syncthing'
	# 	fi
	# elif is-wsl; then
	# 	if test "$arch" = 'a64'; then
	# 		add_download_option '-windows-arm64-' '*/syncthing.exe'
	# 	elif test "$arch" = 'a32'; then
	# 		add_download_option '-windows-arm-' '*/syncthing.exe'
	# 	elif test "$arch" = 'x64'; then
	# 		add_download_option '-windows-amd64-' '*/syncthing.exe'
	# 	elif test "$arch" = 'x32'; then
	# 		add_download_option '-windows-386-' '*/syncthing.exe'
	# 	fi
	# else
	# 	if test "$arch" = 'a64'; then
	# 		add_download_option '-linux-arm64-' 'syncthing'
	# 	elif test "$arch" = 'a32'; then
	# 		add_download_option '-linux-arm-' 'syncthing'
	# 	elif test "$arch" = 'x64'; then
	# 		add_download_option '-linux-amd64-' 'syncthing'
	# 	elif test "$arch" = 'x32'; then
	# 		add_download_option '-linux-386-' 'syncthing'
	# 	elif test "$arch" = 'r64'; then
	# 		add_download_option '-linux-riscv64-' 'syncthing'
	# 	fi
	# fi

	# if missing, complete uninstall and exit
	if command-missing syncthing && ! get-app --quiet -- 'Syncthing'; then
		# remove service
		service-helper --remove -- \
			-- "${service_ids[@]}"

		# remove paths
		fs-rm --confirm --sudo \
			-- "${service_uninstall_paths[@]}"

		# all done for uninstall
		return 0
	fi

	# if installed, configure service if supported
	if service-helper --supported; then
		if is-headful; then
			# headful, ask for autostart
			if test -f "$service_desktop_path"; then
				if confirm --positive --ppid=$$ -- "Autostart $service_title?"; then
					symlink-helper \
						--existing="$service_desktop_path" \
						--symlink="$service_desktop_autostarter"
				else
					fs-rm --no-confirm --sudo \
						-- "$service_desktop_autostarter"
				fi
			fi

		# verify the service was initialised
		elif ! service-helper --exists -- "${service_ids[@]}"; then
			echo-error "$service_title was installed, however the service was not."
			return 1
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_syncthing "$@"
fi
