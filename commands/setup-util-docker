#!/usr/bin/env bash

# https://docs.docker.com/engine/install/fedora/
# https://docs.docker.com/engine/install/fedora/#install-using-the-convenience-script
# https://docs.docker.com/engine/install/ubuntu/
# https://docs.docker.com/engine/install/ubuntu/#install-using-the-convenience-script
# https://docs.docker.com/engine/install/linux-postinstall/
# don't go rootless, is too complicated

# for some reason https://docs.docker.com/engine/install/linux-postinstall/ recommends
#	sudo-helper -- groupadd docker || :
#	sudo-helper -- usermod -aG docker "$USER"
# yet https://snapcraft.io/docker recommends
#	sudo-helper -- addgroup --system docker || :
#	sudo-helper -- adduser "$USER" docker || :
# we will prcoeed with the official instructions

# old ways
#	sudo-helper -- service docker restart
# new ways are what are implemented

# @todo experiemnt with using `newgrp docker` instead to workaround need for postinstall

function setup_util_docker() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-helper)"

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Sets up Docker according to the recommended procedure for your platform.

			USAGE:
			setup-util-docker

			OPTIONS:
			--postinstall
			--debug
			--check

			...
			    All other options are forwarded to $(echo-style --code='setup-util').
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='install' util=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--postinstall') action='postinstall' ;;
		'--debug') action='debug' ;;
		'--check') action='check' ;;
		'--install') action='install' ;;
		'--uninstall') action='uninstall' ;;
		'--action='*) action="${item#*=}" ;;
		*) util+=("$item") ;;
		esac
	done

	# ensure action inside util
	util+=("--action=$action")

	# =====================================
	# Preparation

	local service_title='Docker'
	local service_app='Docker'
	local service_ids=(
		'containerd'
		'docker.socket'
		'docker'
	)
	local service_user
	service_user="$(whoami)" # $USER fails inside newgrp
	local service_group='docker'
	local service_config_paths=(
		"$HOME/.docker" # not uninstalled
	)

	# =====================================
	# Setup Utility

	function __check_group {
		is-group -- "$service_group"
	}
	function __check_user_in_group {
		is-user-in-group --user="$service_user" --group="$service_group"
	}
	function delete_service_group {
		if ! __check_group; then
			return 0
		fi
		# remove the group from all users and the system, better than delgroup which is more focused only on the current user
		sudo-helper -- groupdel "$service_group"
	}
	function install_user_group {
		# official installer may already added the group for us
		if ! __check_group; then
			# add a group to the system, better than addgroup which is more focused only on the current user
			sudo-helper -- groupadd "$service_group"
		fi

		# official installer may already added the user to the group for us
		if ! __check_user_in_group; then
			# add the user to the group, better than adduser which is more focused only on the current user
			sudo-helper -- gpasswd -a "$service_user" "$service_group"
		fi
	}
	function add_permissions_to_config {
		mkdir -p "${service_config_paths[@]}"
		fs-own --user="$service_user" --group="$service_group" --permissions='g+Xrw' \
			-- "${service_config_paths[@]}"
	}
	function __check_docker_exists {
		command-exists docker
	}
	function uninstall_tooling {
		# remove packages
		if is-dnf; then
			# https://docs.docker.com/engine/install/fedora/
			sudo dnf remove docker \
				docker-client \
				docker-client-latest \
				docker-common \
				docker-latest \
				docker-latest-logrotate \
				docker-logrotate \
				docker-selinux \
				docker-engine-selinux \
				docker-engine || :
		elif command-exists apt-get snap; then
			# https://docs.docker.com/engine/install/ubuntu/
			sudo-helper -- apt-get purge -y \
				containerd \
				docker \
				docker-ce \
				docker-ce-cli \
				docker-ce-rootless-extras \
				docker-engine \
				docker.io \
				runc ||
				:
			sudo-helper -- snap remove --purge docker || :
			sudo-helper -- apt-get autoremove -y --purge || :
			sudo-helper -- dpkg --configure -a || :
			sudo-helper -- apt-get update || :
			sudo-helper -- apt-get -f install || :
		fi

		# ensure services are removed
		service-helper --remove -- \
			-- "${service_ids[@]}"
	}
	function uninstall_files {
		mount-helper --unmount --target=/var/lib/docker
		fs-rm --no-confirm --sudo -- \
			/etc/apparmor.d/docker \
			/etc/docker \
			/usr/bin/docker-compose \
			/var/lib/containerd \
			/var/lib/docker \
			/var/run/docker.sock
	}
	function run_uninstall {
		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Removing $service_title tooling.")" \
			--success="$(echo-style --success="Removed $service_title tooling.")" \
			--failure="$(echo-style --error="Failed to remove $service_title tooling.")" \
			-- uninstall_tooling

		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Removing $service_title files.")" \
			--success="$(echo-style --success="Removed $service_title files.")" \
			--failure="$(echo-style --error="Failed to remove $service_title files.")" \
			-- uninstall_files

		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Removing $service_title group.")" \
			--success="$(echo-style --success="Removed $service_title group.")" \
			--failure="$(echo-style --error="Failed to remove $service_title group.")" \
			-- delete_service_group
	}
	function do_uninstall {
		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Uninstalling $service_title.")" \
			--success="$(echo-style --success="Uninstalled $service_title.")" \
			--failure="$(echo-style --error="Failed to uninstall $service_title.")" \
			-- run_uninstall
	}
	function install_dependencies {
		# https://forums.docker.com/t/installing-docker-on-ubuntu-16-04-lts-throws-error-for-command-linux-image-extra/21546?u=balupton
		# https://askubuntu.com/a/1236711/22776
		setup-util-devel
		setup-util-snap --optional
		if is-raspi; then
			# this should cooincide with setup-linux-rapsi
			setup-util --optional --name='Raspberry Pi Modules' \
				APT='linux-modules-extra-raspi' # UBUNTU
		fi
		# setup-util --optional --name='Kernel Virtualisation Helpers' \
		# 	APT='linux-image-extra-virtual' # UBUNTU
	}
	function install_tooling() (
		# run inside a subshell
		set +Eeu # disable strict mode inside this subshell
		eval "$(fetch https://get.docker.com)"
		command-exists docker
	)
	function install_postinstall {
		# this (newgrp) works, but fails on tty items
		print_line "$0 --postinstall" | newgrp "$service_group" || {
			echo-style --warning='Failed to postinstall, you must restart your computer, then run:' >/dev/stderr
			echo-style '    ' --code='setup-util-docker --postinstall' >/dev/stderr
			if confirm --positive --ppid=$$ -- "Restart now?"; then
				sudo-helper -- shutdown --reboot >/dev/stderr
			else
				return 1
			fi
		}
	}
	function run_install {
		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Installing $service_title dependencies.")" \
			--success="$(echo-style --success="Installed $service_title dependencies.")" \
			--failure="$(echo-style --error="Failed to install $service_title dependencies.")" \
			-- install_dependencies

		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Installing $service_title tooling.")" \
			--success="$(echo-style --success="Installed $service_title tooling.")" \
			--failure="$(echo-style --error="Failed to install $service_title tooling.")" \
			-- install_tooling

		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Installing $service_title group.")" \
			--success="$(echo-style --success="Installed $service_title group.")" \
			--failure="$(echo-style --error="Failed to install $service_title group.")" \
			-- install_user_group

		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Installing $service_title setup.")" \
			--success="$(echo-style --success="Installed $service_title setup.")" \
			--failure="$(echo-style --error="Failed to install $service_title setup.")" \
			-- install_postinstall
	}
	function do_install {
		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Installing $service_title.")" \
			--success="$(echo-style --success="Installed $service_title.")" \
			--failure="$(echo-style --error="Failed to install $service_title.")" \
			-- run_install
	}
	function run_official_linux_checks() (
		# run inside a subshell
		set +Eeu # disable strict mode inside this subshell
		eval "$(fetch https://raw.githubusercontent.com/docker/docker/master/contrib/check-config.sh)"
	)
	function restart_docker {
		service-helper --disable --stop -- docker docker.socket containerd || :
		sleep 3
		service-helper --start -- containerd docker.socket docker || :
		sleep 3
		service-helper --status --running -- containerd docker.socket docker
	}
	function run_debug {
		# if failing to connect to your local dns serice
		# ensure the dns service is listening to
		# 0.0.0.0 instead of 127.0.0.1 or 127.0.0.53

		# if bridge fails, then the docker install is buggered
		# restart, reinstall docker, or reinstall the operating system
		# as the bridge only fails if something is wrong
		# (this took weeks of debugging discover)

		# eval_helper --no-quiet --wrap --shapeshifter \
		# 	-- restart_docker

		local run_status
		eval_save_ec eval_helper --no-quiet --no-wrap \
			-- docker run --rm -it --cap-add=NET_ADMIN --net=bridge --dns="$(what-is-my-dns exposed)" alpine sh -c "$(cat "$DOROTHY/commands/debug-network")"
		if test "$run_status" -ne 0; then
			echo-style --notice='If failing, try restart your computer, and run:' ' ' --code='setup-util-docker --postinstall'
			return "$run_status"
		fi
	}
	function run_checks {
		eval_helper --quiet --wrap --shapeshifter \
			--pending="$(echo-style --bold="Testing hello-world container...")" \
			--success="$(echo-style --success="Verified hello-world.")" \
			--failure="$(echo-style --error="Failed to verify hello-world.")" \
			-- docker run --rm hello-world

		eval_helper --quiet --wrap --shapeshifter \
			--pending="$(echo-style --bold="Testing container gateway networking...")" \
			--success="$(echo-style --success="Verified container gateway networking.")" \
			--failure="$(echo-style --error="Failed to verify container gateway networking.")" \
			-- docker run --rm --net=host alpine ping -c4 "$(what-is-my-gateway)"

		eval_helper --quiet --wrap --shapeshifter \
			--pending="$(echo-style --bold="Testing container internet connection...")" \
			--success="$(echo-style --success="Verified container internet connection.")" \
			--failure="$(echo-style --error="Failed to verify container internet connection.")" \
			-- docker run --rm --net=host alpine ping -c4 cloudflare.com
	}
	function do_checks {
		local check_status
		eval_capture --statusvar=check_status -- \
			eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Testing $service_title...")" \
			--success="$(echo-style --success="$service_title is working.")" \
			--failure="$(echo-style --error="Failed to verify docker works.")" \
			-- run_checks
		if test "$check_status" -ne 0; then
			echo-style --notice='Debug with:' ' ' --code='setup-util-docker --debug'
			return "$check_status"
		fi
	}
	function run_postinstall {
		eval_helper --quiet --no-wrap --shapeshifter \
			--pending="$(echo-style --bold="Correcting permissions...")" \
			--success="$(echo-style --success="Corrected permissions.")" \
			--failure="$(echo-style --error="Failed to correct permissions.")" \
			-- add_permissions_to_config

		if is-linux; then
			eval_helper --quiet --no-wrap --shapeshifter \
				--pending="$(echo-style --bold="Restarting $service_title...")" \
				--success="$(echo-style --success="Restarted $service_title.")" \
				--failure="$(echo-style --error="Failed to restart $service_title.")" \
				-- restart_docker

			eval_capture -- \
				eval_helper --quiet --no-wrap --shapeshifter \
				--pending="$(echo-style --bold="Running verification of $service_title...")" \
				--success="$(echo-style --success="Verified $service_title.")" \
				--failure="$(echo-style --error="Failed to verify $service_title, however if the following checks pass, those were just warnings.")" \
				-- run_official_linux_checks
		fi

		do_checks
	}

	# simple actions
	if test "$action" = 'postinstall'; then
		run_postinstall
		return
	elif test "$action" = 'check'; then
		do_checks
		return
	elif test "$action" = 'debug'; then
		run_debug
		return
	fi

	# macos
	# https://docs.docker.com/desktop/install/mac-install/
	if is-mac; then
		setup-util "${util[@]}" --app="$service_app" CASK='docker'
		while command-missing docker; do
			echo
			echo-style --code='docker' --dim=' command not found'
			echo-style --notice="Continue installation via the $service_app app..."
			open "$(get-app -- "$service_app")"

			echo
			confirm --ppid=$$ -- "Press <enter> once $service_app has finished installing..."
		done
		do_checks
		# /Applications/Docker.app/Contents/MacOS/Docker --uninstall
	elif is-linux; then
		# uninstall
		if test "$action" = 'uninstall'; then
			do_uninstall

		elif test "$action" = 'install'; then
			# check if groups have failed, if so uninstall first
			# if docker is missing, then that's fine, we need to install
			if __check_docker_exists && __check_group && __check_user_in_group; then
				echo-style --success="$service_title already installed."
			elif __check_docker_exists && ! __check_user_in_group; then
				echo-error "Prior misconfigured $service_title installation detected..."
				echo-style 'Try uninstall: ' --code='setup-util-docker --uninstall' >/dev/stderr
				echo-style 'Then install: ' --code='setup-util-docker' >/dev/stderr
				return 1
			elif ! __check_docker_exists; then
				do_install
			else
				echo-error 'Invalid state.'
				return 1
			fi
		fi # end install
	fi  # end os

)

# fire if invoked stqandalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_docker "$@"
fi

# =====================================
# DOCKER NETWORKING

# https://docs.docker.com/network/bridge
# https://docs.docker.com/network/bridge/#access-the-outside-world-from-a-container
# by default docker0 bridge is used, which is often invalid
# you can create a correctly configured bridge network with
#
# eval-helper --no-quiet --wrap --shapeshifter \
# 	-- reset_firewall
#
# eval-helper --no-quiet --wrap --shapeshifter \
# 	-- configure_firewall
#
# sudo-helper -- systemctl daemon-reload
#
# docker network rm web || :
# docker network create \
# 	--driver bridge \
# 	--subnet "$(what-is-my-subnet)" \
# 	--gateway "$(what-is-my-gateway)" \
# 	--opt parent="$(what-is-my-interface)" \
# 	web
#
# however all BRIDGES cannot access the outside internet, only HOST can access the outside world, this is intentional design by docker
# as such you must use the HOST network
#
# firewall changes and these flags have no effect
#
# --cap-add=NET_ADMIN --privileged --net=web
#
# adding these to the .service file also has no effect
#
# AmbientCapabilities=CAP_NET_BIND_SERVICE
# CapabilityBoundingSet=CAP_NET_BIND_SERVICE

# =====================================
# RELOAD DOCKER

# try-sudo systemctl restart docker
# try-sudo systemctl reload docker
# try-sudo service docker restart

# network
# print_line 'create docker network'
# docker network rm web || echo
# try-sudo systemctl restart docker
# try-sudo systemctl reload docker
# try-sudo service docker restart

# docker network create \
# 	--driver bridge \
# 	--subnet 192.168.0.0/16 \
# 	--gateway 192.168.4.1 \
# 	--opt parent=eth0 \
# 	web
# docker network ls

# =====================================
# DEBUG DOCKER

# https://developer.ibm.com/technologies/linux/tutorials/l-lpic1-109-4/

# NOTE: https://docs.docker.com/network/bridge/#use-the-default-bridge-network
# The default bridge network is considered a legacy detail of Docker and is not recommended for production use. Configuring it is a manual operation, and it has technical shortcomings.

# works:
# --net=host

# fails:
# --net=bridge
# --net=bridge --dns 9.9.9.9
# --net=bridge --dns=9.9.9.9 --dns-search=raspi8
# --dns-opt='DNSSEC=true' --dns-opt='DNSOverTLS=opportunistic'
# --net=bridge --dns 9.9.9.9
# try-sudo ... --privileged --net=bridge --dns=9.9.9.9
#  --dns-opt='edns0 trust-ad'
#  --dns-search='lan'
# --network web \

# alpine \
#	sh -c 'apk add curl bind-tools;

# try-sudo docker run -ti mmoy/ubuntu-netutils bash

# ubuntu \
# 	sh -c 'apt update -y; apt install -y curl dnsutils;

# set -x
# try-sudo docker run --rm --cap-add=NET_ADMIN --net=bridge --dns="$(what-is-my-dns exposed)" alpine sh -c "$(cat "$DOROTHY/commands/debug-network")"
# set +x
