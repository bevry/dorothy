#!/usr/bin/env bash
source "$DOROTHY/sources/essentials.sh"
source "$DOROTHY/sources/strict.bash"

# Prepare
ipv4servers=()
ipv6servers=()
servers=()
nofap="no"
function fetch_servers {
	# select provider
	providers=(
		adguard
		adguard-family
		cloudflare
		cloudflare-malware
		cloudflare-family
		cloudflare-teams
		google
		opendns
		quad9
		backup
		local
		env
	)
	provider=""
	if is-string "${1-}"; then
		provider="$1"
	elif is-string "${DNS_PROVIDER-}"; then
		provider="$DNS_PROVIDER"
	else
		provider="${1:-"$(choose "${providers[@]}")"}"
	fi

	# backup alias
	if test "$provider" = 'backup'; then
		dns_backup="${DNS_BACKUP_PROVIDER:-quad9}"
		echo "Using [$dns_backup] as the backup DNS provider..."
		provider="$dns_backup"
	fi

	# turn provider into servers
	if test "$provider" = "adguard"; then
		ipv4servers=(
			"176.103.130.130"
			"176.103.130.131"
		)
		ipv6servers=(
			"2a00:5a60::ad1:0ff"
			"2a00:5a60::ad2:0ff"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "adguard-family"; then
		# https://adguard.com/en/adguard-dns/overview.html
		# https://family.cloudflare-dns.com/dns-query
		nofap="yes"
		ipv4servers=(
			"176.103.130.132"
			"176.103.130.134"
		)
		ipv6servers=(
			"2a00:5a60::bad1:0ff"
			"2a00:5a60::bad2:0ff"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "cloudflare" -o "$provider" = "cf"; then
		# https://developers.cloudflare.com/1.1.1.1/setting-up-1.1.1.1
		ipv4servers=(
			"1.1.1.1"
			"1.0.0.1"
		)
		ipv6servers=(
			"2606:4700:4700::1111"
			"2606:4700:4700::1001"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "cloudflare-malware" -o "$provider" = "cf-malware"; then
		# https://developers.cloudflare.com/1.1.1.1/1.1.1.1-for-families/setup-instructions/router/
		ipv4servers=(
			"1.1.1.2"
			"1.0.0.2"
		)
		ipv6servers=(
			"2606:4700:4700::1112"
			"2606:4700:4700::1002"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "cloudflare-family" -o "$provider" = "cf-family"; then
		# https://developers.cloudflare.com/1.1.1.1/1.1.1.1-for-families/setup-instructions/router/
		nofap="yes"
		ipv4servers=(
			"1.1.1.3"
			"1.0.0.3"
		)
		ipv6servers=(
			"2606:4700:4700::1113"
			"2606:4700:4700::1003"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "cloudflare-teams" -o "$provider" = "cf-teams"; then
		# https://developers.cloudflare.com/1.1.1.1/1.1.1.1-for-families/setup-instructions/router/
		nofap="yes"
		ipv4servers=(
			"172.64.36.1"
			"172.64.36.2"
		)
		ipv6servers=()
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "google"; then
		ipv4servers=(
			"8.8.8.8"
			"8.8.4.4"
		)
		ipv6servers=(
			"2001:4860:4860::8888"
			"2001:4860:4860::8844"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "opendns"; then
		# https://support.opendns.com/hc/en-us/articles/227986667-Does-OpenDNS-support-IPv6-
		ipv4servers=(
			"208.67.222.222"
			"208.67.220.220"
		)
		ipv6servers=(
			"2620:0:ccc::2"
			"2620:0:ccd::2"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "quad9"; then
		ipv4servers=(
			"9.9.9.9"
			"149.112.112.112"
		)
		ipv6servers=(
			"2620:fe::fe"
			"2620:fe::9"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "local"; then
		ipv4servers=(
			"127.0.0.1"
		)
		ipv6servers=(
			"::1"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "local-5553"; then
		ipv4servers=(
			"127.0.0.1:5553"
		)
		ipv6servers=(
			"::1:5553"
		)
		servers=(
			"${ipv4servers[@]}"
			"${ipv6servers[@]}"
		)
	elif test "$provider" = "env"; then
		nofap="${DNS_NOFAP:-maybe}"
		if is-present "${DNS_SERVERS-}"; then
			servers=("${DNS_SERVERS[@]}")
		else
			if is-present "${DNS_IPV4SERVERS-}"; then
				ipv4servers=("${DNS_IPV4SERVERS[@]}")
				servers+=("${ipv4servers[@]}")
			fi
			if is-present "${DNS_IPV6SERVERS-}"; then
				ipv6servers=("${DNS_IPV6SERVERS[@]}")
				servers+=("${ipv6servers[@]}")
			fi
		fi
		if test "${#servers[@]}" -eq 0; then
			stderr echo "ERROR: select-dns: env provider requires the DNS_SERVERS environment variable to be set to an array of DNS servers to use"
			return 1
		fi
	elif test "$#" -ne 0 && confirm-positive "Are these the DNS servers you wish to use? $*"; then
		servers=("$@")
	else
		stderr echo "ERROR: select-dns requires the DNS_PROVIDER environment variable to be set, or requires a provider to be specified, available providers are: ${providers[*]}"
		return 1
	fi
}

# https://support.apple.com/en-us/HT202516
if is-mac; then
	if command-exists networksetup; then
		fetch_servers "$@"
		echo "configuring dns to ${servers[*]}"
 		# dns="$(networksetup -getdnsservers Wi-Fi | tr '\n' ' ')"
		# ^ doesn't work in mojave: There aren't any DNS Servers set on Wi-Fi.
		networksetup -listallnetworkservices | grep -v '\*' | while read -r interface; do
			echo "networksetup: $interface"
			# shellcheck disable=SC2086
			sudo networksetup -setdnsservers "$interface" "${servers[@]}"
		done
	else
		stderr echo "Cannot figure out how to set DNS on this MacOS version"
		exit 1
	fi
elif command-exists systemd-resolve; then
	# dependencies
	env QUIET=y setup-util-ripgrep
	env QUIET=y setup-util-sd
	env QUIET=y setup-util-netscript

	# fetch
	fetch_servers "$@"
	echo "configuring dns to ${servers[*]}"

	# configure defaults
	# once we have a way of accurately detecting our own `setup-dns` service is being used, we can change DNSOverTLS=true to enforce
	# as if we are still using say the gateway's DNS, then that will fail and our system will get disconnected
	DNSSEC='true'
	DNSOverTLS='opportunistic'  # use `true` to enforce

	# https://unix.stackexchange.com/a/334475/50703
	# resolvectl is new way
	# systemd-resolve is old way

	# old ways
	# sudo systemd-resolve --statistics
	# sudo systemd-resolve --reset-server-features
	# sudo systemd-resolve --revert --interface="$interface"

	# https://www.internetsociety.org/blog/2018/12/dns-privacy-in-linux-systemd/
	# Finally, setting ‘Domains’ to ‘~.’ instructs ‘systemd-resolved’ to prefer the specified nameserver over any per-link DNS server that may be available. This is an important setting as otherwise a non-DoT per-link DNS resolver could take precedence over the DoT resolver.
	# The default-route command expects a boolean
		#   parameter, and configures whether the link may be used as
		#   default route for DNS lookups, i.e. if it is suitable for
		#   lookups on domains no other link explicitly is configured
		#   for.
	# https://www.man7.org/linux/man-pages/man1/resolvectl.1.html
	# https://www.man7.org/linux/man-pages/man5/resolved.conf.5.html
	# https://www.freedesktop.org/software/systemd/man/resolved.conf.html

	# trying to disable dhcp dns on eth0 is proving impossible
	# https://askubuntu.com/q/1350022/22776
	# these don't work:
	# https://askubuntu.com/a/1140516/22776
	# https://askubuntu.com/a/1047618/22776
	# sudo apt remove netplan: https://renediepstraten.nl/?p=51
	# https://netplan.io/examples/
	# sudo apt-get purge cloud-init: https://askubuntu.com/a/1068584/22776
	# dns=default: /etc/NetworkManager/NetworkManager.conf
	# sudo vim /etc/systemd/network/eth0.network
	# sudo vim /etc/systemd/networkd.conf
	# sudo vim /etc/systemd/resolved.conf
	# [Network]
	# UseDNS=false
	# [DHCP]
	# UseDNS=false
	# [DHCPv4]
	# UseDNS=false
	# [DHCPv6]
	# UseDNS=false
	# [IPv6AcceptRA]
	# UseDNS=false

	# trim existing values
	contents="$(cat /etc/systemd/resolved.conf | sd -p '^(DNS|DNSSEC|DNSOverTLS|Domains)=.+?\n' '')"
	# add new values
	printf "$contents\nDNS=${servers[*]}\nDNSSEC=${DNSSEC}\nDNSOverTLS=${DNSOverTLS}\nDomains=~.\n" | sudo tee /etc/systemd/resolved.conf  &>/dev/null
	# cat /etc/systemd/resolved.conf

	# https://unix.stackexchange.com/a/442599/50703
	# all three are necessary it seems, as have had issues with just systemd-resolved
	sudo systemctl daemon-reload
	sudo systemctl restart systemd-networkd # NOTE THAT THIS WIPES THE ETH0 DNS CONFIGURATION
	sudo systemctl restart systemd-resolved

	# reset
	sudo resolvectl reset-server-features

	# apply interface changes
	interfaces="$(resolvectl status --no-pager | rg 'Link \d \((.+?)\)' --replace '$1')"
	mapfile -t interfaces <<<"$interfaces"
	for interface in "${interfaces[@]}"; do
		# reset
		# sudo systemd-resolve --revert --interface="$interface"
		sudo resolvectl revert "$interface" || continue

		# OLD WAY
		# args=(
		# 	'--set-domain=~.'
		# 	'--set-dnsovertls=true'
		# 	'--set-dnssec=true'
		# )
		# for server in "${servers[@]}"; do
		# 	args+=("--set-dns=$server")
		# done
		# sudo systemd-resolve "${args[@]}" --interface="$interface"

		# apply changes
		sudo resolvectl default-route "$interface" false
		# sudo resolvectl llmnr "$interface" false
		# sudo resolvectl mdns "$interface" false
		sudo resolvectl domain "$interface" '~.'
		sudo resolvectl dnssec "$interface" "${DNSSEC}"
		sudo resolvectl dnsovertls "$interface" "${DNSOverTLS}"
		sudo resolvectl dns "$interface" "${servers[@]}"
		sleep 1
		sudo ifdown "$interface"
		sleep 1
		sudo ifup "$interface"
		sleep 1
		# sudo ip a show "$interface"
	done

	# flush and check
	sudo resolvectl flush-caches --no-pager
	sudo resolvectl status --no-pager
	# sudo resolvectl dns --no-pager
	# sudo resolvectl statistics

	# check
	# resolvectl query yahoo.com

	# if there are bogus ones, use the following to delete
	# https://stackoverflow.com/a/34326753/130638
	# ip link

else
	# this is probably worth a try:
	# https://dedunu.info/2020/05/24/ubuntu-20-04-server-change-dns-and-domain
	# https://ubuntu.com/server/docs/network-configuration
	# https://unix.stackexchange.com/a/442599/50703
	# the below I could not get to work
	# if command-missing nmcli; then
	# 		sudo apt install -y network-manager
	# fi
	# nmcli device show
	# sudo nmcli device set eth0 autoconnect yes managed yes
	# sudo nmcli device connect eth0
	# sudo nmcli device modify eth0 'ipv4.dns'"${ipv4servers[@]}"
	# Error: Failed to add/activate new connection: Connection 'eth0' is not available on device eth0 because device is strictly unmanaged
	# # these don't work
	# nmcli connection modify eth0 ipv4.dns "${ipv4servers[@]}"
	# nmcli connection modify eth0 ipv6.dns "${ipv6servers[@]}"

	stderr echo "DNS selection not yet implemented for this operating system"
	exit 1
fi

# NoFap
if command-exists http && test -n "${NOFAP_DISCORD_WEBHOOK-}"; then
	message=''
	user="${NOFAP_DISCORD_USERNAME:-"<@$(whoami)>"}"
	if test "$nofap" = "yes"; then
		message="$user changed ${HIS_PRONOUN:-his} DNS selection to \`$provider\` which is NoFap compliant ✅"
	elif test "$nofap" = "no"; then
		message="$user changed ${HIS_PRONOUN:-his} DNS selection to \`$provider\` which VIOLATES NoFap ❌"
	else
		message="$user changed ${HIS_PRONOUN:-his} DNS selection to \`$provider\` which NoFap comliance is UNKNOWN"
	fi
	http -q --check-status "$NOFAP_DISCORD_WEBHOOK" Authorization:"${NOFAP_DISCORD_WEBHOOK_AUTH-}" content="$message"
fi
