#!/usr/bin/env bash
# shellcheck disable=2034
source "$DOROTHY/sources/strict.bash"

if is-help-empty "$@"; then
	stderr cat <<-EOF
		USAGE:

		echo-color [--!style] [--!style+!style] value [--!style=value] [--!style+!style=value]

		EXAMPLES:

		echo-color --bold --blue 'this is bold and blue' 'so is this' --yellow ' but this is bold and yellow'
		echo-color --bg-red+hi-white='this is very bad' --green+bold=' while this is good'

		STYLES:

		Colors: black, red, green, yellow, blue, magenta, cyan, white
		Modifiers: background_*, intense_*, background_intense_*
		Modifier aliases: bg-*, hi-*, bg-hi-*
		Modes: reset, bold, dim, underline, blink, invert
		Targets: nocolor, color
		Special: h1, e1, g1, header, error

		QUIRKS:

		If [env NO_COLOR=yes] or [env COLOR=no] then styles will be omitted.

		Use [--color] to indicate the value should only be outputted if colors are.

		Use [--nocolor] to indicate the value should only be outputted if colors are not.

		value="$(echo-color --bold="first" --nocolor=' ' --color+dim=' → ' --bold="second")"; echo "$value"
		# outputs colorised: first → second

		value="$(env NO_COLOR=yes echo-color --bold="first" --nocolor=' ' --color+dim=' → ' --bold="second")"; echo "$value"
		# outputs no-colors: first second

		EXPLANATION:

		[--style=value] will apply the style only to that value.
		[--style value value] will apply the style to all subsequent values, until [--reset] is provided.
		[--blue --bold value] will make value be blue and bold.

		TIPS:

		[--h1=value] for segment headers
		[--e1=value] for segment failure footers
		[--g1=value] for segment success footers
		[--error=value] for unexpected errors
		[--header] for general headers
		[--dim] for quoting

		Remember [$'\n'] is available to you to place newlines between arguments, e.g.
		echo-color value $'\n' value
	EOF
	exit 22 # Invalid argument
fi

# check if no color
color_target='/dev/stdout'
if test "${1-}" = '--no-color'; then
	color_target='/dev/null'
	shift
elif is-affirmative "${NO_COLOR-}" || test "$(echo-exit-code is-affirmative "${COLOR-}")" -eq 1; then
	color_target='/dev/null'
fi

# colors which will be sought later
# https://en.wikipedia.org/wiki/ANSI_escape_code#Colors
# https://gist.github.com/Prakasaka/219fe5695beeb4d6311583e79933a009
# https://mywiki.wooledge.org/BashFAQ/037

# foreground
black=$'\e[30m'   # tput setaf 0
red=$'\e[31m'     # tput setaf 1
green=$'\e[32m'   # tput setaf 2
yellow=$'\e[33m'  # tput setaf 3
blue=$'\e[34m'    # tput setaf 4
magenta=$'\e[35m' # tput setaf 5
cyan=$'\e[36m'    # tput setaf 6
white=$'\e[37m'   # tput setaf 7
purple="$magenta"
gray="$white"
grey="$white"

# intense_foreground
intense_black=$'\e[90m'   # tput setaf 8
intense_red=$'\e[91m'     # tput setaf 9
intense_green=$'\e[92m'   # tput setaf 10
intense_yellow=$'\e[93m'  # tput setaf 11
intense_blue=$'\e[94m'    # tput setaf 12
intense_magenta=$'\e[95m' # tput setaf 13
intense_cyan=$'\e[96m'    # tput setaf 14
intense_white=$'\e[97m'   # tput setaf 15
intense_purple="$intense_magenta"
intense_gray="$intense_white"
intense_grey="$intense_white"

# background
background_black=$'\e[40m'   # tput setab 0
background_red=$'\e[41m'     # tput setab 1
background_green=$'\e[42m'   # tput setab 2
background_yellow=$'\e[43m'  # tput setab 3
background_blue=$'\e[44m'    # tput setab 4
background_magenta=$'\e[45m' # tput setab 5
background_cyan=$'\e[46m'    # tput setab 6
background_white=$'\e[47m'   # tput setab 7
background_purple="$background_magenta"
background_gray="$background_white"
background_grey="$background_white"

# background_intense
background_intense_black=$'\e[100m'   # tput setab 8
background_intense_red=$'\e[101m'     # tput setab 9
background_intense_green=$'\e[102m'   # tput setab 10
background_intense_yellow=$'\e[103m'  # tput setab 11
background_intense_blue=$'\e[104m'    # tput setab 12
background_intense_magenta=$'\e[105m' # tput setab 13
background_intense_cyan=$'\e[106m'    # tput setab 14
background_intense_white=$'\e[107m'   # tput setab 15
background_intense_purple="$background_intense_magenta"
background_intense_gray="$background_intense_white"
background_intense_grey="$background_intense_white"

# modes
reset=$'\e[0m'     # tput sgr0
bold=$'\e[1m'      # tput bold
dim=$'\e[2m'       # tput dim
underline=$'\e[4m' # tput sgr 0 1
blink=$'\e[5m'     # tput blink
invert=$'\e[7m'    # tput rev
h1="${invert}"
e1="${background_red}${intense_white}"
g1="${background_green}${intense_white}"
h2="${bold}${underline}"
g2="${bold}${green}"
e2="${bold}${red}"
h3="${bold}"
g3="${green}"
e3="${red}"
header="${bold}${underline}"
error="${background_intense_red}${intense_white}"

# helper
function colorize() {
	local style="$1"

	# swap fg-* and *-fg with *
	# swap bg-hi-* and *-bg-hi with background_intense_*
	# swap bg-* and *-bg with background_*
	# swap hi-* and *-hi with intense_
	if [[ "$style" = 'fg-'* ]]; then
		style="${style:3}"
	elif [[ "$style" = *'-fg' ]]; then
		style="${style:0:-3}"
	elif [[ "$style" = 'bg-hi-'* ]]; then
		style="background_intense_${style:6}"
	elif [[ "$style" = *'-hi-bg' ]]; then
		style="background_intense_${style:0:-6}"
	elif [[ "$style" = 'bg-'* ]]; then
		style="background_${style:3}"
	elif [[ "$style" = *'-bg' ]]; then
		style="background_${style:0:-3}"
	elif [[ "$style" = 'hi-'* ]]; then
		style="intense_${style:3}"
	elif [[ "$style" = *'-hi' ]]; then
		style="intense_${style:0:-3}"
	fi

	# colour
	if test -n "${!style}"; then
		echo -n "${!style}"
	fi
}

# act
for arg in "$@"; do
	flag=''
	value=''

	# check flag status
	if test "${arg:0:2}" != '--'; then
		# not a flag
		echo -n "$arg"
		continue
	fi
	flag="${arg:2}"

	# get the flag and value combo
	for ((i = 0; i < ${#flag}; i++)); do
		if test "${flag:i:1}" = '='; then
			value="${flag:i+1}"
			flag="${flag:0:i}"
			break
		fi
	done

	# handle style+style combinations
	value_target='/dev/stdout'
	last_i=0
	for ((i = 0; i <= ${#flag}; i++)); do
		if test "${flag:i:1}" = '+' -o "$i" -eq "${#flag}"; then
			style="${flag:last_i:i-last_i}"
			last_i="$((i + 1))"
			if test "$style" = 'color'; then
				value_target="$color_target"
			elif test "$style" = 'nocolor'; then
				if test "$color_target" != '/dev/null'; then
					value_target="/dev/null"
				fi
			else
				colorize "$style" >"$color_target"
			fi
		fi
	done

	# value
	if test -n "$value"; then
		echo -n "$value" >"$value_target"
		echo -n "$reset" >"$color_target"
	fi
done

# finish up
echo -n "$reset" >"$color_target"
echo >/dev/stdout
