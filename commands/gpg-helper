#!/usr/bin/env bash

# use `gpg --debug-level guru` for debugging

function gpg_helper() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Helpers for interacting with GPG (GNU Pretty Good Privacy).

			USAGE:

			gpg-helper config

			    Output the GPG configuration files.

			gpg-helper configure

			    Open the gpg configuration files in your desired editor.

			gpg-helper permissions

			    Correct the permissions for the GPG files.

			gpg-helper list
			  <public|private>

			    Output the details for all keys.

			gpg-helper get
			  <public|private>

			    Output the identifier of a selected key.

			gpg-helper import
			  <file>

			    Import the contents of a specific key file.

			gpg-helper export
			  <public|private>
			  <key id>

			    Output the contents of a specific key.

			    This [gpg-helper export public] is what you want to share your public key with another.

			gpg-helper delete
			  <public|private>
			  <key id>

			    Delete a specific key.

			gpg-helper new

			    Generate a new key.

			gpg-helper edit
			  <key id>

			    Edit a specific private key.

			gpg-helper trust
			  <private key id>

			    Mark that you trust a specific key.

			gpg-helper password
			  <private key id>

			    Change the password of a specific key.

			gpg-helper extend
			  <private key id>
			  <date>

			    Extend a specific key to a specific date, or if no date was supplied, then a year from now.

			gpg-helper expire
			  <private key id>

			    Expire a specific key by marking its expiry date was this very moment.

			gpg-helper encrypt
			  <the file>
			  <their user id, e.g. email>
			  [your secret user id, e.g. email]

			    Encrypt a file between yourself and someone else.

				 You must have imported their public key into your keyring already.

			gpg-helper decrypt
			  <the file>

			    Decrypt a file that has been encrypted to your public key.

			gpg-helper symmetric
			  <the file>

			    Encrypt a file using a passphrase instead.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			action="$item"
			option_args+=("$@")
			shift $#
			break
			;;
		esac
	done

	# ensure valid action
	local actions=(
		'config'
		'configure'
		'permissions'
		'list'
		'get'
		'import'
		'export'
		'delete'
		'new'
		'edit'
		'trust'
		'password'
		'extend'
		'expire'
		'encrypt'
		'decrypt'
		'symmetric'
	)
	action="$(
		choose-option --required \
			--question='which action to perform?' \
			--filter="$action" -- "${actions[@]}"
	)"

	# =====================================
	# Dependencies

	setup-util-sd --quiet
	setup-util-gpg --quiet

	# =====================================
	# Helpers

	# Guides
	# https://www.gnupg.org/gph/en/manual.html
	# https://riseup.net/en/security/message-security/openpgp/best-practices
	# https://debian-administration.org/users/dkg/weblog/97
	# https://davesteele.github.io/gpg/2014/09/20/anatomy-of-a-gpg-key/
	# https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/
	# http://curtiswallen.com/pgp/
	# https://carouth.com/blog/2014/05/25/signing-pgp-keys/
	# https://www.phildev.net/pgp/gpgsigning.html
	# https://easyengine.io/tutorials/linux/gpg-keys/
	# https://www.youtube.com/watch?v=ZSa-d_9O5DA

	# Codes
	# sec => 'secret key'
	# ssb => 'secret subkey'
	# pub => 'public key'
	# sub => 'public subkey'

	# helpers
	function get_mode {
		local mode="${1-}"
		choose-option \
			--question='What type of GPG key do you wish to fetch?' \
			--filter="$mode" -- 'public' 'private'
	}
	function get_date {
		local date="${1-}"
		if test -n "$date"; then
			print_line "$date"
		else
			date-helper --gpg --next-year
		fi
	}

	# =====================================
	# Actions

	# permissions
	function act_permissions {
		fs-own --changes --permissions='a-xrw,u+Xrw' \
			-- "$GNUPGHOME"
	}

	# configure
	function act_configure {
		# shut it down
		killall gpg-agent &>/dev/null || :
		killall gpg &>/dev/null || :

		# fix its permissions
		act_permissions

		# configure
		if confirm --positive --ppid=$$ -- "Apply sensible defaults?"; then
			# http://github.com/isaacs/github/issues/675
			# ^ no longer necessary, and intereferes with gpg edit key
			config-helper --file="$GNUPGHOME/gpg.conf" -- \
				--find='no-tty' --replace=''

			# pinentry
			local agent_file agent_program
			agent_program="$(type -P pinentry)"
			if test -n "$agent_program"; then
				agent_file="$GNUPGHOME/gpg-agent.conf"
				touch "$agent_file"
				config-helper --file="$agent_file" -- \
					--find='pinentry-program .+' --replace="pinentry-program $agent_program"
			fi
		fi

		# review
		if confirm --negative --ppid=$$ -- "Review configuration?"; then
			edit --wait -- "$GNUPGHOME/" "$GNUPGHOME/"*".conf"
		fi

		# restart
		gpg-agent --daemon || :
	}

	# info
	function act_config {
		echo-file -- "$GNUPGHOME/"*".conf"
	}

	# list [mode]
	function act_list {
		local mode="${1-}"
		mode="$(get_mode "$mode")"
		if test "$mode" = 'private'; then
			gpg --keyid-format LONG -K
		else
			gpg --keyid-format LONG -k
		fi
	}

	# get [mode] [key]
	function act_get {
		local mode="${1-}" key="${2-}" flag type keys=()
		mode="$(get_mode "$mode")"
		if test "$mode" = 'private'; then
			flag="K"
			type='sec'
		else
			flag='k'
			type='pub'
		fi

		# get keys, trimming spaces
		mapfile -t keys < <(
			gpg --fingerprint --keyid-format LONG "-$flag" |
				grep --after-context=1 --fixed-strings --regexp="$type" |
				grep --fixed-strings --regexp='Key fingerprint =' |
				sd '.*=' '' |
				sd ' *' ''
		)

		choose-option --required \
			--question='Which key to select?' \
			--default="$key" \
			-- "${keys[@]}"
	}

	# import [key]
	function act_import {
		# https://unix.stackexchange.com/a/184952
		# --allow-secret-key-import is deprecated
		act_permissions
		local file="${1-}" key
		if contains-line --stdin --needle='-----BEGIN PGP PRIVATE KEY BLOCK-----' <"$file"; then
			key="$(fs-temp --file --extension='gpg')"
			gpg -o "$key" --dearmor "$file"
			gpg --import "$key"
			fs-rm --quiet --no-confirm -- "$key"
		else
			gpg --import "$file"
		fi
	}

	# export [mode] [key]
	function act_export {
		local mode="${1-}" key="${2-}"
		mode="$(get_mode "$mode")"
		key="$(act_get "$mode" "$key")"
		if test "$mode" = 'private'; then
			gpg --armor --export-options backup --export-secret-keys "$key"
		else
			gpg --armor --export-options backup --export "$key"
		fi
	}

	# delete [mode] [key]
	function act_delete {
		local mode="${1-}" key="${2-}"
		mode="$(get_mode "$mode")"
		key="$(act_get "$mode" "$key")"
		if confirm --bool --ppid=$$ -- "Confirm you wish to delete [$mode] key [$key]?"; then
			if test "$mode" = 'private'; then
				gpg --delete-secret-keys "$key"
			else
				gpg --delete-keys "$key"
			fi
		fi
	}

	# new
	function act_new {
		gpg --gen-key
	}

	# edit [key]
	function act_edit {
		local key="${1-}"
		key="$(act_get private "$key")"
		gpg --edit-key "$key"
	}

	# trust [key]
	function act_trust {
		local key="${1-}"
		key="$(act_get private "$key")"
		if confirm --positive --ppid=$$ -- "Confirm you wish to trust key [$key]?"; then
			echo-style --notice='Use:' ' ' --code='trust' ', ' --code='5' ', ' --code='save'
			gpg --edit-key "$key"
		fi
	}

	# password [key]
	function act_password {
		local key="${1-}"
		key="$(act_get private "$key")"
		if confirm --positive --ppid=$$ -- "Confirm you wish to change the password for [$key]?"; then
			echo-style --notice='Use:' ' ' --code='passwd' ', ' --code='save'
			gpg --edit-key "$key"
		fi
	}

	# extend [key] [date]
	function act_extend {
		local key="${1-}" date="${2-}"
		key="$(act_get private "$key")"
		date="$(get_date "$date")"
		if confirm --positive --ppid=$$ -- "Confirm you wish to extend key [$key] to [$date]?"; then
			gpg --quick-set-expire "$key" "$date"
		fi
	}

	# expire [key]
	function act_expire {
		local key="${1-}"
		key="$(act_get private "$key")"
		date="$(date -v +0d "+%Y-%m-%d")"
		if confirm --positive --ppid=$$ -- "Confirm you want to expire key [$key]?"; then
			gpg --quick-set-expire "$key" "$date"
		fi
	}

	# encrypt <file> <their user id> <your secret key id>
	function act_encrypt {
		local file them you
		file="${1-}"
		them="${2-}"
		you="${3-}" # "$(act_get private "${3-}")"
		if test -z "$file" -o -z "$them"; then
			help "encrypt requires file and their user id"
		fi
		if test -n "$you"; then
			gpg -ase -r "$them" -u "$you" "$file"
		else
			gpg -ase -r "$them" "$file"
		fi
	}

	# decrypt <file>
	function act_decrypt {
		local file="${1-}"
		if test -z "$file"; then
			help "decrypt requires file"
		fi
		gpg -d "$file"
	}

	# symmetric <file>
	function act_symmetric {
		local file="${1-}"
		if test -z "$file"; then
			help "symmetric encryption requires file"
		fi
		gpg -c "$file"
	}

	# =====================================
	# Act

	if test "$(type -t "act_$action")" = 'function'; then
		"act_$action" "${option_args[@]}"
	else
		echo-style --error="Action [$action] not yet implemented." >/dev/stderr
		return 78 # ENOSYS 78 Function not implemented
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	gpg_helper "$@"
fi
