#!/usr/bin/env bash

# echo $'one\ntwo\nthree'; echo-clear-line; echo $'four\nfive'
# outputs:
# one
# two
# four
# five

# https://en.wikipedia.org/wiki/ANSI_escape_code#CSI_(Control_Sequence_Introducer)_sequences

# $'\u001b' = $'\e' = ESC (Escape Key)

# ESC [ = 0x9B = CSI (Control Sequence Introducer)
# Starts most of the useful sequences, terminated by a byte in the range 0x40 through 0x7E.[5]:â€Š5.4

# CSI n A = CUU (Cursor Up)
# Moves the cursor n (default 1) cells in the given direction. If the cursor is already at the edge of the screen, this has no effect.

# CSI n J = ED (Erase in Display
# Clears part of the screen. If n is 0 (or missing), clear from cursor to end of screen. If n is 1, clear from cursor to beginning of the screen. If n is 2, clear entire screen (and moves cursor to upper left on DOS ANSI.SYS). If n is 3, clear entire screen and delete all lines saved in the scrollback buffer (this feature was added for xterm and is supported by other terminal applications).

# CSI n K = EL (Erase in Line)
# Erases part of the line. If n is 0 (or missing), clear from cursor to the end of the line. If n is 1, clear from cursor to beginning of the line. If n is 2, clear entire line. Cursor position does not change.

# CSI n F = CPL (Cursor Previous Line)
# Moves cursor to beginning of the line n (default 1) lines up. (not ANSI.SYS)

# CSI n G = CHA (Cursor Horizontal Absolute)
# Moves the cursor to column n (default 1). (not ANSI.SYS)

# \e[A = move the cursor up 1 line
# \e[J = clear from cursor to end of screen
# printf $'\e[A\e[J'
# ^ incorrectly leaves whitespace when no trailing line present

# \e[A = move the cursor up 1 line
# \e[2K = clear entire line
# \e[G = moves the cursor to column 1
# printf $'\e[A\e[2K\e[G'
# ^ correctly leaves no whitespace when no trailing line present

# \e[F = Moves cursor to beginning of 1 lines up.
# \e[J = clear from cursor to end of screen.
printf $'\e[F\e[J'
# ^ correctly leaves no whitespace when no trailing line present

# \e[2K = clear entire line. Cursor position does not change
# printf $'\e[2K'
# \e[1K = clear from cursor to beginning of the line
# printf $'\e[1K'
# ^ doesn't erase anything if there was a trailing newline
# ^ as this only works on the current line
