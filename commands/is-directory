#!/usr/bin/env bash

function is_directory() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Check if all <path>s are a directory (and not a symlink).

			USAGE:
			is-directory [...options] [--] ...<path>

			OPTIONS:
			--sudo
			    If specified, use sudo on directorysystem interactions.
			--user=<user>
			--group=<group>
			    If specified use this user and/or group for directorysystem interactions.

			RETURNS:
			[0] if all <path>s were a directory
			[1] if any <path>s were not a directory
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inputs=() option_sudo='no' option_user='' option_group=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--')
			option_inputs+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_inputs+=("$item") ;;
		esac
	done

	# verify
	if [[ ${#option_inputs[@]} -eq 0 ]]; then
		help 'No <input>s provided.'
	fi

	# =====================================
	# Action

	local input
	if [[ $option_sudo == 'yes' || -n $option_user || -n $option_group ]]; then
		for input in "${option_inputs[@]}"; do
			sudo-helper --inherit --user="$option_user" --group="$option_group" -- is-directory.bash -- "$input" || return
		done
	else
		for input in "${option_inputs[@]}"; do
			is-directory.bash -- "$input" || return
		done
	fi
	return 0
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	is_directory "$@"
fi
