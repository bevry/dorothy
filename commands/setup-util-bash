#!/usr/bin/env bash
# trunk-ignore-all(shellcheck/SC2016)

# https://repology.org/project/bash/versions

# @note that if they have installed bash via homebrew, and that is what is invoking this script, and then that is what is being uninstalled, the script will crash once bash has been removed. Other methods shouldn't have this issue, as they move the bash executable to a 'trash' equiavlent directory, which allows the invoked script to continue. This is such an edge case, it's not worth doing more on, unless a user actually reports a valid need for a warning or workaround. A workaround being ensuring this script invokes with the system bash instead of the installed bash.

# @todo instead of compiling from source with DOWNLOAD, consider using homebrew bottles
# can use [get-macos-release-name] to figure it out programatically
# https://github.com/Homebrew/homebrew-core/pkgs/container/core%2Fbash
# > brew info --json bash | jq -r ".[].bottle.stable.files"

function setup_util_bash() (
	source "$DOROTHY/sources/bash.bash"
	# imports:
	# IS_BASH_VERSION_OUTDATED
	# BASH_VERSION_CURRENT
	# BASH_VERSION_LATEST

	# enable DOWNLOAD_BUILD_EVAL
	source "$(type -P setup-util)"

	# if outdated bash, then enable upgrade option
	local extras=()
	if test "$IS_BASH_VERSION_OUTDATED" = 'yes'; then
		extras+=('--upgrade')
	fi

	# setup bash
	function build_bash {
		# dependencies
		setup-util-devel --quiet
		source "$DOROTHY/sources/environment.sh"

		# build
		./configure
		make
	}
	local bottle_url='' macos_release arch options=(
		"${extras[@]}"
		--cli='bash'
		"$@"
		APK='bash' # ALPINE
		APT='bash' # UBUNTU
		AUR='bash' # ARCH
		BREW='bash'
		EMERGE='app-shells/bash' # GENTOO
		URPMI='bash'             # MAGEIA
		NIX='nixpkgs.bash'
		RPM='bash'    # FEDORA
		XBPS='bash'   # VOID
		ZYPPER='bash' # SUSE
	)
	arch="$(get-arch)"
	if is-mac; then
		macos_release="$(get-macos-release-name)"
		if test "$arch" = 'a64'; then
			if test "$macos_release" = 'ventura'; then
				bottle_url='https://ghcr.io/v2/homebrew/core/bash/blobs/sha256:f3a42b9282e6779504034485634a2f3e6e3bddfc70b9990e09e66e3c8c926b7d'
			elif test "$macos_release" = 'monterey'; then
				bottle_url='https://ghcr.io/v2/homebrew/core/bash/blobs/sha256:5e7e3e3387fc60e907683b437ac6e64879e117a3c5c1421fe6e6257f6aaa3c69'
			elif test "$macos_release" = 'big_sur'; then
				bottle_url='https://ghcr.io/v2/homebrew/core/bash/blobs/sha256:d19858831275271cc8aa9a1a28de6223faa44c6ebbc88e83898fd559de5b627e'
			fi
		elif test "$arch" = 'x64'; then
			if test "$macos_release" = 'ventura'; then
				bottle_url='https://ghcr.io/v2/homebrew/core/bash/blobs/sha256:fd01a9dbdc56f6313a725cb345a3b991cfdaa9e1a91b08fd9791a0e695b55723'
			elif test "$macos_release" = 'monterey'; then
				bottle_url='https://ghcr.io/v2/homebrew/core/bash/blobs/sha256:05a5f9435c9e9ffe8377b03e0ca6b27bbb32cc01aff47dd1692cd8d7e735ab3a'
			elif test "$macos_release" = 'big_sur'; then
				bottle_url='https://ghcr.io/v2/homebrew/core/bash/blobs/sha256:680dd3b37e17cc4fa1af6dd8c51c774dd0c9aa3e594e96527020845516b1ea77'
			fi
		fi
	fi # don't use linux bottle, as linux is too varied, and doesn't work on opensuse/leap: https://github.com/bevry/dorothy/actions/runs/6048593518/job/16414257095
	if test -n "$bottle_url" && fetch --bearer-token='QQ==' --ok "$bottle_url"; then
		options+=(
			DOWNLOAD="$bottle_url"
			DOWNLOAD_BEARER_TOKEN='QQ=='
			DOWNLOAD_ARCHIVE_FORMAT='tar'
			DOWNLOAD_ARCHIVE_GLOB='bash/*/bin/bash'
		)
	else
		options+=(
			DOWNLOAD="https://ftp.gnu.org/gnu/bash/bash-${BASH_VERSION_LATEST}.tar.gz"
			DOWNLOAD_ARCHIVE_FORMAT='tar'
			DOWNLOAD_ARCHIVE_GLOB='bash-*/*'
			DOWNLOAD_BUILD_EVAL='build_bash'
		)
	fi
	setup_util "${options[@]}"

	# check if still outdated, if so, install via building instead
	if is-bash-version-outdated --quiet; then
		options+=(
			--upgrade
			--order='download ...'
		)
		setup_util "${options[@]}"
	fi

	# setup bash completions
	# https://github.com/scop/bash-completion
	options=(
		"${extras[@]}"
		--optional
		--no-fallback
		--name='Bash Completions'
		"$@"
		APK='bash-completion' # ALPINE
		APT='bash-completion' # UBUNTU
		AUR='bash-completion' # ARCH
		BREW='bash-completion'
		RPM='bash-completion'    # FEDORA
		ZYPPER='bash-completion' # SUSE
	)
	setup_util "${options[@]}"

	# if we are interactive, allow shell modification
	if is-interactive; then
		# if the login shell is outdated bash, and if the new bash is installed, then update the login shell to the newer bash
		# @todo figure out how this works if login shell is the now uninstall bash
		local login_shell bash_shell
		login_shell="${SHELL-}"
		bash_shell="$(type -P bash)"
		if test -n "$login_shell"; then
			login_shell_name="$(basename "$login_shell")"
			if test "$login_shell_name" = 'bash' -a "$login_shell" != "$bash_shell"; then
				login_shell_version="$("$login_shell" -c -- 'echo $BASH_VERSION')"
				bash_shell_version="$("$bash_shell" -c -- 'echo $BASH_VERSION')"
				if test "$login_shell_version" != "$bash_shell_version"; then
					echo-style --h2="Your login shell is an outdated version of bash."
					echo-style --h2="You will now be prompted now to change it to a more modern shell."
					setup-shell
					echo-style --h2="Close this terminal, open a new one, then run the command you ran again."
					return 0
				fi
			fi
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_bash "$@"
fi
