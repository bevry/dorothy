#!/usr/bin/env bash

function is_bash_version_outdated_test() (
	source "$DOROTHY/sources/bash.bash"
	# imports:
	# IS_BASH_VERSION_OUTDATED
	# BASH_VERSION_CURRENT
	# BASH_VERSION_LATEST

	# test if the known version is still the latest available version
	echo-style --h1="TEST: $0"

	local bash_version_latest_available
	bash_version_latest_available="$(
		fetch 'https://ftp.gnu.org/gnu/bash/?C=M;O=D' | echo-regexp -o --regexp='href="bash-([0-9.]+?)[.]tar[.]gz"' --replace='$1'
	)"
	echo-style --h2='latest known bash version is the latest available bash version'
	echo-style --bold='current bash version' ' = ' --invert="$BASH_VERSION_CURRENT"
	echo-style --bold='latest known bash version' ' = ' --invert="$BASH_VERSION_LATEST"
	echo-style --bold='latest available bash version' ' = ' --invert="$bash_version_latest_available"
	if [[ $BASH_VERSION_LATEST != "$bash_version_latest_available" ]]; then
		echo-style --e2='latest known bash version is the latest available bash version'
		return 1
	fi
	echo-style --g2='latest known bash version is the latest available bash version'
	echo-style --g1="TEST: $0"
	return 0
)

function is_bash_version_outdated() (
	source "$DOROTHY/sources/bash.bash"
	# imports:
	# IS_BASH_VERSION_OUTDATED
	# BASH_VERSION_CURRENT
	# BASH_VERSION_LATEST

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output whether the current bash version is outdated.

			USAGE:
			is-bash-version-outdated [...options]

			OPTIONS:
			--quiet
			    Don't output anything, just return exit status.

			QUIRKS:
			This checks whether the current version is supported by Dorothy, not whether the current version is the latest version.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	if [[ $option_quiet == 'no' ]]; then
		echo-style --bold='current bash version' ' = ' --invert="$BASH_VERSION_CURRENT"
		echo-style --bold='latest known bash version' ' = ' --invert="$BASH_VERSION_LATEST"
		echo-style --bold='version outdated' ' = ' --invert="$IS_BASH_VERSION_OUTDATED"
	fi
	[[ $IS_BASH_VERSION_OUTDATED == 'yes' ]]
	return # explicit return with [[ required for bash v3
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		is_bash_version_outdated_test
	else
		is_bash_version_outdated "$@"
	fi
fi
