#!/usr/bin/env bash

function config_edit() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Enforces a specific configuration by editing the configuration.

			USAGE:
			config-edit [--options]
			config-edit --fuse --line=<line>
			config-edit --fstab --line=<line>
			config-edit --sudoers --line=<line>
			config-edit --cron-system --line=<line>
			config-edit --cron-user --line=<line>
			config-edit --file --line=<line>

			OPTIONS:
			--name=<name>
			    The name of the configuration to edit, e.g. 'sudoers'

			--action=<add|remove|edit|has>
			--add
			--remove
			--has
			    Search for the <line> and return success if found, or failure if missing.
			--edit
			    Whether to add or remove the line, or edit the configuration.
			    Defaults to <add> if <line> is provided, otherwise <remove> if <needle> is provided, otherwise <edit> which will just trigger the <edit-command> command.

			--line=<line>
			    The line that should be inserted or removed.

			--searcher=<search-command>
			    A command that is called that will fetch relevant lines from the configuration file. Receives the line as the first argument.

			--comparer=<compare-command>
			    A command that is called that will compare the found lines (first argument) with the desired <line> (second argument).

			--editer=<edit-command>
			    A command that is called that will edit the configuration file.

			--applier=<apply-command>
			    A command that is called that will automatically replace the found lines (first argument) with the desired <line> (second argument) and save changes, inserting the desired <line> if no lines were found.

			--fuse | --fstab | --sudoers | --hosts | --cron-system | --cron-user | --file=<file>
			    Each of these set appropriate defaults for those configurations.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# helpers
	function default_comparer {
		test "$1" = "$2"
	}

	# process
	local item option_name='' option_file='' option_action='' option_line='' option_needle='' option_searcher='' option_comparer='default_comparer' option_editer='' option_applier=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--action='*) option_action="${item#*=}" ;;
		'--no-add'* | '--add'*)
			if test "$(get-flag-value --affirmative -- "$item")" = 'yes'; then
				option_action='add'
			else
				option_action='remove'
			fi
			;;
		'--no-remove'* | '--remove'*)
			if test "$(get-flag-value --affirmative -- "$item")" = 'yes'; then
				option_action='remove'
			else
				option_action='add'
			fi
			;;
		'--has') option_action='has' ;;
		'--edit') option_action='edit' ;;
		'--name='*) option_name="${item#*=}" ;;
		'--file='*)
			option_file="${item#*=}"
			option_name="$option_file"
			option_searcher='default_file_searcher'
			option_editer='default_file_editer'
			option_applier='default_file_applier'
			function default_file_searcher {
				rg --fixed-strings --regexp="$1" "$option_file"
			}
			function default_file_editer {
				edit --wait -- "$option_file"
			}
			function default_file_applier {
				local needle="${1:-"$2"}" replace="$2"
				config-helper --file="$option_file" -- \
					--string-find="$needle" --string-replace="$replace"
			}
			;;
		'--line='*) option_line="${item#*=}" ;;
		'--needle='*) option_needle="${item#*=}" ;;
		'--searcher='*) option_searcher="${item#*=}" ;;
		'--comparer='*) option_comparer="${item#*=}" ;;
		'--editer='*) option_editer="${item#*=}" ;;
		'--applier='*) option_applier="${item#*=}" ;;
		'--fuse')
			option_name='fuse'
			option_searcher='default_fuse_searcher'
			option_editer='default_fuse_editer'
			option_applier='default_fuse_applier'
			function default_fuse_searcher {
				rg --fixed-strings --regexp="$1" --line-regexp '/etc/fuse.conf'
			}
			function default_fuse_editer {
				edit --wait --sudo -- '/etc/fuse.conf'
			}
			function default_fuse_applier {
				local needle="${1:-"$2"}" replace="$2"
				sudo-helper --inherit \
					-- config-helper --file='/etc/fuse.conf' -- \
					--string-find="$needle" --string-replace="$replace"
			}
			;;
		'--fstab')
			option_name='fstab'
			option_searcher='default_fstab_searcher'
			option_editer='default_fstab_editer'
			option_applier='default_fstab_applier'
			function default_fstab_searcher {
				rg --fixed-strings --regexp="$1" '/etc/fstab'
			}
			function default_fstab_editer {
				edit --wait --sudo -- '/etc/fstab'
				if is-linux; then
					sudo-helper -- systemctl daemon-reload
				fi
			}
			function default_fstab_applier {
				local needle="${1:-"$2"}" replace="$2"
				sudo-helper --inherit \
					-- config-helper --file='/etc/fstab' -- \
					--string-find="$needle" --string-replace="$replace"
				if is-linux; then
					sudo-helper -- systemctl daemon-reload
				fi
			}
			;;
		'--sudoers')
			option_name='sudoers'
			option_searcher='default_sudoers_searcher'
			option_editer='default_sudoers_editer'
			function default_sudoers_searcher {
				sudo-helper -- cat /etc/sudoers | rg --fixed-strings --regexp="$1"
			}
			function default_sudoers_editer {
				# --inherit to maintain editor preferences
				sudo-helper --inherit -- visudo
			}
			;;
		'--hosts')
			option_name='fuse'
			option_searcher='default_hosts_searcher'
			option_editer='default_hosts_editer'
			option_applier='default_hosts_applier'
			function default_hosts_searcher {
				rg --fixed-strings --regexp="$1" --line-regexp '/etc/hosts.conf'
			}
			function default_hosts_editer {
				edit --wait --sudo -- '/etc/hosts'
			}
			function default_hosts_applier {
				local needle="${1:-"$2"}" replace="$2"
				sudo-helper --inherit \
					-- config-helper --file='/etc/hosts.conf' -- \
					--string-find="$needle" --string-replace="$replace"
			}
			;;
		'--cron-system')
			option_name='cron[system]'
			option_comparer='default_cron_system_comparer'
			option_searcher='default_cron_system_searcher'
			option_editer='default_cron_system_editer'
			function default_cron_system_comparer {
				test "$1" = "$2" || [[ $1 == *cronitor*"$2"* ]]
			}
			function default_cron_system_searcher {
				sudo-helper -- crontab -l | echo-wait | rg --fixed-strings --regexp="$1"
			}
			function default_cron_system_editer {
				# --inherit to maintain editor preferences
				sudo-helper --inherit -- crontab -e || :
				if is-mac; then
					service-helper --restart -- system/com.vix.cron
				else
					service-helper --restart -- cron
				fi
			}
			;;
		'--cron-user')
			option_name="cron[$USER]"
			option_comparer='default_cron_user_comparer'
			option_searcher='default_cron_user_searcher'
			option_editer='default_cron_user_editer'
			function default_cron_user_comparer {
				test "$1" = "$2" || [[ $1 == *cronitor*"$2"* ]]
			}
			function default_cron_user_searcher {
				crontab -l | echo-wait | rg --fixed-strings --regexp="$1"
			}
			function default_cron_user_editer {
				# user contrab already inherits editor preferences
				crontab -e || :
				if is-mac; then
					service-helper --restart -- system/com.vix.cron
				else
					service-helper --restart -- cron
				fi
			}
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	if is-vscode; then
		# https://github.com/Microsoft/vscode/issues/29523
		if [[ $option_line == *'	'* ]]; then
			option_line="${option_line/	/        }"
		fi
	fi

	if test -z "$option_needle" -a -n "$option_line"; then
		option_needle="$option_line"
	fi

	if test -z "$option_action"; then
		if test -n "$option_line"; then
			option_action='add'
		elif test -n "$option_needle"; then
			option_action='remove'
		else
			option_action='edit'
		fi
	fi

	if test "$option_action" = 'edit'; then
		if test -z "$option_editer" || ! command -v "$option_editer" >/dev/null; then
			help 'The editer command ' --code="$option_editer" ' does not exist.'
		else
			"$option_editer"
			return
		fi
	fi

	if test -z "$option_name"; then
		help 'You must provide a <name>'
	fi

	if test -z "$option_searcher" || ! command -v "$option_searcher" >/dev/null; then
		help 'The provided searcher command ' --code="$option_searcher" ' does not exist.'
	fi

	if test "$option_action" = 'has'; then
		if test -z "$("$option_searcher" "$option_needle" || :)"; then
			return 1
		else
			return 0
		fi
	fi

	if test -z "$option_comparer" || ! command -v "$option_comparer" >/dev/null; then
		help 'The provided comparer command ' --code="$option_comparer" ' does not exist.'
	fi

	if test -z "$option_editer" || ! command -v "$option_editer" >/dev/null; then
		help 'The provided editer command ' --code="$option_editer" ' does not exist.'
	fi

	if test -n "$option_applier" && ! command -v "$option_applier" >/dev/null; then
		help 'The provided applier command ' --code="$option_applier" ' does not exist.'
	fi

	# =====================================
	# Action

	# act
	local lines expected status
	if test "$option_action" = 'add'; then
		expected="$option_line"
	else
		expected=''
	fi
	while true; do
		lines="$("$option_searcher" "$option_needle" || :)"
		eval_capture --statusvar=status -- "$option_comparer" "$lines" "$expected"
		if test "$status" -eq 0; then
			echo-style --invert="$option_name" ' is ' --positive='correctly' ' configured.'
			if test -z "$expected"; then
				echo-style --positive='It already has the undesired configuration removed.'
			else
				echo-style --positive='It already has these lines:' $'\n' --code="$option_line" | echo-trim-padding --stdin
			fi
			break
		else
			echo-style --invert="$option_name" ' is ' --negative='incorrectly' ' configured.'
			if test -n "$lines"; then
				echo-style --negative='These lines must be removed:' $'\n' --code="$lines" | echo-trim-padding --stdin
			fi
			if test -n "$expected"; then
				echo-style --positive='These lines must be added:' $'\n' --code="$expected" | echo-trim-padding --stdin
			fi
			if test -n "$option_applier" && confirm --positive --ppid=$$ -- "$(echo-style --bold='Apply these changes ' --positive='automatically' --bold=', or ' --negative='manually' --bold='?')"; then
				"$option_applier" "$option_needle" "$expected" # don't use lines, as applier uses regex, and found lines aren't escaped for regex
			elif confirm --positive --ppid=$$ -- "$(echo-style --bold='Ready to apply the changes ' --bold+negative='manually?')"; then
				"$option_editer"
			else
				return 125 # ECANCELED 125 Operation cancelled
			fi
		fi
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	config_edit "$@"
fi
