#!/usr/bin/env bash

# is the array absolutely empty?

# failure if any value is truthy
# pass if all values are empty

# if you are using this in conjuction with a is-array-partial,
# or your own test -n or test -z calls,
# then there is no need for this

function is_array_empty() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Check if an array is entirely empty with zero non-empty elements.

			USAGE:
			is-array-empty [--] ...<element>

			OPTIONS:
			<element>
			    An element of the array.

			RETURNS:
			[0] if the array is entirely empty with zero non-empty elements.
			[1] if the array is not entirely empty, having at least one non-empty element.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inputs=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_inputs+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			option_inputs+=("$item" "$@")
			shift "$#"
			break
			;;
		esac
	done

	# =====================================
	# Action

	local input
	for input in "${option_inputs[@]}"; do
		if is-nonempty-string -- "$input"; then
			return 1
		fi
	done
	return 0
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	is_array_empty "$@"
fi
