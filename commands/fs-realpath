#!/usr/bin/env bash

function fs_realpath() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output the absolute (relative paths are expanded) and real (symlinks are resolved) respresentation of a path.

			USAGE:
			fs-realpath [...options] [--] ...<path>

			OPTIONS:
			--resolve=<YES/no>
			    If [--resolve=no] do not substitute symlinks with their targets.
			    Defaults to [--resolve=yes] as it is sensible, and supports macOS without needing GNU or Fish utilities.

			--validate=<YES/no>
			    If [--validate=yes] require every part of the path must be resolvable, aka do not support broken symlinks.
			    Defaults to [--validate=yes] as it supports macOS without needing GNU or Fish utilities.

			--relative=<NO/yes>
			    If [--relative=yes] don't resolve relative paths to an absolute path, aka support relative paths.
			    Defaults to [--relative=no] as that is probably desired, and it supports macOS without needing GNU or Fish utilities.

			--relative-to=<relative_to>
			    If provided, print the resolved path relative to DIR

			--relative-base=<relative_base>
			    If provided, print absolute paths unless paths below DIR

			QUIRKS:
			If you don't care about symlinks, you should prefer to use [fs-absolute] instead as it is simpler.
			Use [--resolve --broken --relative] to help you repair broken relative symlinks.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# options
	local item option_paths=() option_resolve='yes' option_validate='yes' option_relative='no' option_relative_to='' option_relative_base=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-resolve'* | '--resolve'*)
			option_resolve="$(get-flag-value --affirmative --fallback="$option_resolve" -- "$item")"
			;;
		'--no-validate'* | '--validate'*)
			option_validate="$(get-flag-value --affirmative --fallback="$option_validate" -- "$item")"
			;;
		'--relative-to='*) option_relative_to="${item#*=}" ;;
		'--relative-base='*) option_relative_base="${item#*=}" ;;
		'--no-relative'* | '--relative'*)
			# this must be after --relative-{to,base} otherwise it will capture them
			option_relative="$(get-flag-value --affirmative --fallback="$option_relative" -- "$item")"
			;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		help 'No <path>s provided.'
	fi

	# =====================================
	# Action

	function do_gnu_realpath {
		local gnu_realpath
		if __command_exists -- grealpath; then
			gnu_realpath='grealpath'
		elif __command_exists -- realpath; then
			if is-mac; then
				# usage: realpath [-q] [path ...]
				return 45 # ENOTSUP 45 Operation not supported
			elif is-alpine && [[ "$(realpath "$(type -P 'realpath')" || :)" == "$(type -P busybox || :)" ]]; then
				# Usage: realpath FILE...
				return 45 # ENOTSUP 45 Operation not supported
			elif is-linux; then
				gnu_realpath='realpath'
			else
				return 45 # ENOTSUP 45 Operation not supported
			fi
		else
			return 45 # ENOTSUP 45 Operation not supported
		fi

		### grealpath (macos coreutils), realpath (ubuntu) ###
		# realpath [OPTION]... FILE...
		# -e, --canonicalize-existing:   all components of the path must exist
		# -m, --canonicalize-missing:    no path components need exist or be a directory
		# -L, --logical:                 resolve '..' components before symlinks
		# -P, --physical:                resolve symlinks as encountered (default)
		# -q, --quiet:                   suppress most error messages
		# 	--relative-to=DIR:           print the resolved path relative to DIR
		# 	--relative-base=DIR:         print absolute paths unless paths below DIR
		# -s, --strip, --no-symlinks:    don't expand symlinks
		# -z, --zero:                    end each output line with NUL, not newline
		local path="$1"
		local args=()

		# grealpath always returns absolute paths, so do not support relative option
		if [[ $option_relative == 'yes' ]]; then
			return 45 # ENOTSUP 45 Operation not supported
		fi

		# grealpath supports validation, and non-validation
		if [[ $option_validate == 'yes' ]]; then
			args+=('--canonicalize-existing')
		else
			args+=('--canonicalize-missing')
		fi

		# grealpath supports resolution, and non-resolution
		if [[ $option_resolve == 'no' ]]; then
			args+=('--no-symlinks')
		fi

		# grealpath supports relative-to and relative-dir
		if [[ -n $option_relative_to ]]; then
			args+=("--relative-to=$option_relative_to")
		fi
		if [[ -n $option_relative_base ]]; then
			args+=("--relative-to=$option_relative_base")
		fi

		# execute
		"$gnu_realpath" "${args[@]}" "$path"
	}
	function do_gnu_readlink {
		# don't support unsupported args
		if [[ -n $option_relative_to || -n $option_relative_to ]]; then
			return 45 # ENOTSUP 45 Operation not supported
		fi

		local gnu_readlink
		if __command_exists -- greadlink; then
			gnu_readlink='greadlink'
		elif __command_exists -- readlink; then
			if is-mac; then
				# usage: readlink [-fn] [file ...]
				return 45 # ENOTSUP 45 Operation not supported
			elif is-alpine && [[ "$(readlink -f "$(type -P 'readlink')" || :)" == "$(type -P busybox || :)" ]]; then
				# Usage: readlink [-fnv] FILE
				return 45 # ENOTSUP 45 Operation not supported
			elif is-linux; then
				gnu_readlink='readlink'
			else
				return 45 # ENOTSUP 45 Operation not supported
			fi
		else
			return 45 # ENOTSUP 45 Operation not supported
		fi

		### greadlink macos coreutils), readlink (ubuntu) ###
		# readlink [OPTION]... FILE...
		# -f, --canonicalize:            canonicalize by following every symlink in every component of the given name recursively; all but the last component must exist
		# -e, --canonicalize-existing:   canonicalize by following every symlink in every component of the given name recursively, all components must exist
		# -m, --canonicalize-missing:    canonicalize by following every symlink in every component of the given name recursively, without requirements on components existence
		# -n, --no-newline:              do not output the trailing delimiter
		# -q, --quiet
		# -s, --silent:                  suppress most error messages (on by default)
		# -v, --verbose:                 report error messages
		# -z, --zero:                    end each output line with NUL, not newline
		local path="$1"

		# greadlink always resolves symlinks
		if [[ $option_resolve == 'no' ]]; then
			return 45 # ENOTSUP 45 Operation not supported
		fi

		# handle quirks
		if [[ $option_relative == 'yes' ]]; then
			if [[ $option_validate == 'yes' ]]; then
				# relative paths are not supported when validating
				return 45 # ENOTSUP 45 Operation not supported
			elif [[ ! -L $path ]]; then
				# unless canoniclizing, then symlinks are required
				return 45 # ENOTSUP 45 Operation not supported
			else
				"$gnu_readlink" "$path"
			fi
		else
			if [[ $option_validate == 'yes' ]]; then
				"$gnu_readlink" --canonicalize-existing "$path"
			else
				"$gnu_readlink" --canonicalize-missing "$path"
			fi
		fi
	}
	function do_fallback_readlink {
		# don't support unsupported args
		if [[ -n $option_relative_to || -n $option_relative_to ]]; then
			return 45 # ENOTSUP 45 Operation not supported
		fi

		local fallback_readlink
		if __command_exists -- readlink; then
			if is-mac; then
				# usage: readlink [-fn] [file ...]
				fallback_readlink='readlink'
			elif is-alpine && [[ "$(readlink -f "$(type -P 'readlink')" || :)" == "$(type -P busybox || :)" ]]; then
				# Usage: readlink [-fnv] FILE
				fallback_readlink='readlink'
			else
				return 45 # ENOTSUP 45 Operation not supported
			fi
		else
			return 45 # ENOTSUP 45 Operation not supported
		fi

		### readlink (macos) ###
		# readlink [-fn] [file ...]
		# If the given argument is not a symbolic link and the -f option is not specified, readlink will print nothing and exit with an error.  If the -f option is specified, the output is canonicalized by following every symlink in every component of the given path recursively.
		#
		# NOTES
		# -f fetches the absolutely resolved path

		if [[ $option_resolve == 'yes' && $option_relative == 'yes' && $option_validate == 'no' ]]; then
			if [[ -L $path ]]; then
				"$fallback_readlink" "$path"
			else
				return 45 # ENOTSUP 45 Operation not supported
			fi
		elif [[ $option_resolve == 'yes' && $option_relative == 'no' && $option_validate == 'yes' ]]; then
			# readlink will return correct output when valid
			# if invalid, will output nothing and have a failure exit code
			"$fallback_readlink" -f "$path"
		else
			return 45 # ENOTSUP 45 Operation not supported
		fi
	}
	function do_fallback_realpath {
		# don't support unsupported args
		if [[ -n $option_relative_to || -n $option_relative_to ]]; then
			return 45 # ENOTSUP 45 Operation not supported
		fi

		local fallback_realpath
		if __command_exists -- realpath; then
			if is-mac; then
				# usage: realpath [-q] [path ...]
				fallback_realpath='realpath'
			elif is-alpine && [[ "$(realpath "$(type -P 'realpath')" || :)" == "$(type -P busybox || :)" ]]; then
				# Usage: realpath FILE...
				fallback_realpath='realpath'
			else
				return 45 # ENOTSUP 45 Operation not supported
			fi
		else
			return 45 # ENOTSUP 45 Operation not supported
		fi

		### realpath (macos) ###
		# realpath [-q] [path ...]
		# If -q is specified, warnings will not be printed when realpath(3) fails.

		if [[ $option_resolve == 'yes' && $option_relative == 'no' && $option_validate == 'yes' ]]; then
			# realpath will return correct output when valid
			# if invalid, will output error (unless -q) and have failure exit code
			"$fallback_realpath" "$path"
		else
			return 45 # ENOTSUP 45 Operation not supported
		fi
	}
	function __fish_capable {
		__command_exists -- fish && [[ "$(version-compare "$(fish -c 'echo $FISH_VERSION')" 3.3.0)" -ge 0 ]]
		return
	}
	function do_fish_realpath {
		# don't support unsupported args
		if [[ -n $option_relative_to || -n $option_relative_to ]]; then
			return 45 # ENOTSUP 45 Operation not supported
		fi

		local fish_status
		eval_capture --statusvar=fish_status -- __fish_capable
		if [[ $fish_status -ne 0 ]]; then
			return 45 # ENOTSUP 45 Operation not supported
		fi

		### realpath (fish) ###
		# realpath [OPTIONS] PATH
		# realpath follows all symbolic links encountered for the provided PATH, printing the absolute path resolved. fish provides a realpath-alike builtin intended to enrich systems where no such command is installed by default.
		#  If a realpath command exists, that will be preferred.  builtin realpath will explicitly use the fish implementation of realpath.
		# -s or --no-symlinks:   Don't resolve symlinks, only make paths absolute, squash multiple slashes and remove trailing slashes.
		#
		# NOTES
		# https://gitter.im/fish-shell/fish-shell?at=60e4d29c9cf317173013b830
		# file:///opt/homebrew/Cellar/fish/3.5.1/share/doc/fish/cmds/realpath.html?highlight=realpath
		# not supported in fish v3.1.2
		# supported in fish version v3.3.0
		# exact compatibility unknown
		# if you are using an old version, remove fish and reinstall using [setup-util-fish]

		if [[ $option_relative == 'no' && $option_validate == 'no' ]]; then
			if [[ $option_resolve == 'no' ]]; then
				fish -c 'builtin realpath --no-symlinks "$argv[1]"' -- "$path"
			else
				fish -c 'builtin realpath "$argv[1]"' -- "$path"
			fi
		else
			return 45 # ENOTSUP 45 Operation not supported
		fi
	}

	local FALLBACK='yes'
	local methods=(
		do_gnu_realpath
		do_gnu_readlink
		do_fallback_readlink
		do_fallback_realpath
		do_fish_realpath
	)
	function resolve_symlink {
		local method method_status path="${1%/}" # trim the trailing slash, as a trailing slash will fail symlink detection

		# cycle through the options, and continue if the option is not supported
		for method in "${methods[@]}"; do
			eval_capture --statusvar=method_status -- "$method" "$path"
			if [[ $method_status -ne 45 ]]; then
				return "$method_status"
			fi
		done

		# if no option was supported, then install utilities and try again
		if [[ $FALLBACK == 'no' ]]; then
			# greadlink + macos-readlink support [--relative=yes] but require [--resolve=yes --validate=no] and for the symlink to exist
			echo-error 'fs-realpath depends on installed helper utilities, non of which support this combination of options:' $'\n' \
				--code="fs-realpath --resolve=$option_resolve --validate=$option_validate --relative=$option_relative -- $(echo-escape-command -- "$path")"
			return 45 # ENOTSUP 45 Operation not supported
		fi
		FALLBACK='no'
		get-installer --first-success --invoke --quiet -- realpath readlink fish
		resolve_symlink "$path"
	}

	local path
	for path in "${option_paths[@]}"; do
		resolve_symlink "$path"
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	fs_realpath "$@"
fi
