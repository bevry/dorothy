#!/usr/bin/env bash

function get_volumes() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the volumes attached to the current system.

			USAGE:
			get-volumes [...options]

			OPTIONS:
			--remote
			    Only output remote volumes, as a TSV of volume, server, directory.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_remote=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-remote'* | '--remote'*)
			option_remote="$(get-flag-value --affirmative --fallback="$option_remote" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"

	# =====================================
	# Action

	local mount volumes=()
	mount="$(mount)"
	mapfile -t volumes < <(rg --regexp='.+ on (.+) \(.+' --replace='$1' <<<"$mount")
	if test "${#volumes[@]}" -eq 0; then
		echo-style --error='No volumes found.' >/dev/stderr
		return 1
	fi

	local volume source server directory
	if test "$option_remote" = 'yes'; then
		for volume in "${volumes[@]}"; do
			source="$(rg --regexp='//(.+) on '"$volume"' .+' --replace='$1' <<<"$mount" || :)"
			if test -n "$source"; then
				server="$(rg --regexp='(.+)/.+' --replace='$1' <<<"$source")"
				directory="$(rg --regexp='.+(/.+)' --replace='$1' <<<"$source")"
				printf '%s\t%s\t%s\n' "$volume" "$server" "$directory"
			fi
		done
	else
		echo-lines -- "${volumes[@]}"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_volumes "$@"
fi
