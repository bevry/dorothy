#!/usr/bin/env sh
# can't do subshell wrapper, as in [sh] not [bash]

if test "$*" = '--help'; then
	cat <<-EOF >/dev/stderr
		ABOUT:
		Runs a series of network debugging commands.

		USAGE:
		debug-network
	EOF
	exit 22 # EINVAL 22 Invalid argument
fi

# see sources/bash.bash for details
print_string() {
	if test "$#" -ne 0; then
		printf '%s' "$*"
	fi
}
print_line() {
	print_string "$@"
	printf '\n'
}
# see commands/command_exists for details
__command_exists() {
	type "$1" >/dev/null 2>&1
}
# see commands/sudo-helper for details
__try_sudo() {
	if __command_exists sudo; then
		# check if password is required
		if
			! sudo --non-interactive true >/dev/null 2>&1
		then
			# password is required, let the user know what they are being prompted for
			print_line 'Your sudo/root/login password is required to execute the command:' >/dev/stderr
			print_line "sudo $*" >/dev/stderr
			sudo "$@" || return
		else
			# session still active, password not required
			sudo "$@" || return
		fi
	elif __command_exists doas; then
		set -x # <inform the user of why they are being prompted for a doas password>
		doas "$@" || return
		set +x # </inform>
	else
		"$@" || return
	fi
}

# only use double quotes, as we wrap it in single quotes in setup-docker --debug

domain="api.nordvpn.com"
server="9.9.9.9"
invalid="192.0.2.1"

print_line "PING:"
ping -c 5 "$server"
ping -c 5 "$domain"

print_line "NSLOOKUP:"
nslookup search

# install curl, dig (bind-tools/dnsutils), whois
if __command_exists apk; then
	__try_sudo apk update
	__try_sudo apk add curl bind-tools
elif __command_exists apt; then
	__try_sudo apt update
	__try_sudo apt install -y curl dnsutils whois
elif __command_exists pacman; then
	__try_sudo pacman -Syu
	__try_sudo pacman -Sy curl dnsutils
elif __command_exists zypper; then
	__try_sudo zypper update
	__try_sudo zypper install curl dnsutils
fi

print_line "DATE:"
date

print_line "RESOLVE:"
systemd-resolve --status

print_line "DNS LISTENERS:"
__try_sudo ss -lp "sport = :domain"

print_line "LISTENERS:"
__try_sudo netstat -tulpn | grep LISTEN

print_line "DNS:"
__try_sudo resolvectl dns

print_line "RESOLV:"
cat /etc/resolv.conf

print_line "ROUTE:"
__try_sudo route -n

print_line "DIG:"
dig "$domain"

print_line "TRACE:"
dig +trace "$domain"

print_line "DIG @%s:" "$invalid"
dig @"$invalid" "$domain"

print_line "DIG @%s:" "$server"
dig @"$server" hostname.bind chaos txt
dig @"$server" id.server chaos txt

print_line "HOST:"
host -va "$domain"

print_line "NSLOOKUP:"
nslookup -debug "$domain"

print_line "CURL:"
curl "$domain"

print_line "PING:"
ping -c 5 "$domain"

print_line "WHOIS:"
whois "$domain"

# maybe_sudo apt install traceroute
# inetutils-traceroute is worse

# print_line "TRACEROUTE:"
# traceroute -p 53 "$server"

# print_line "TRACEROUTE -r:"
# traceroute -r -p 53 "$server"
