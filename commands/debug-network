#!/usr/bin/env sh
# can't do subshell wrapper, as in [sh] not [bash]
# do not use any dorothy command, as this is eval'd on environments and situations where dorothy may not be available

if [ "$*" = '--help' ]; then
	cat <<-EOF >&2
		ABOUT:
		Runs a series of network debugging commands.

		USAGE:
		debug-network
	EOF
	exit 22 # EINVAL 22 Invalid argument
fi

# see [sources/bash.bash] for details
function __command_exists {
	type "$1" >/dev/null 2>&1 || return
	return
}
function __elevate {
	# trim -- prefix
	if [[ ${1-} == '--' ]]; then
		shift
	fi
	# forward to [eval-helper --elevate] if it exists, as it is more detailed
	if __command_exists -- eval-helper; then
		eval-helper --elevate -- "$@"
		return
	elif __command_exists -- sudo; then
		# check if password is required
		if ! sudo --non-interactive "$@" &>/dev/null; then
			# password is required, let the user know what they are being prompted for
			__print_lines 'Your password is required to momentarily grant privileges to execute the command:' >&2
			__print_lines "sudo $*" >&2
			sudo "$@"
			return
		else
			# session still active, password not required
			sudo "$@"
			return
		fi
	elif __command_exists -- doas; then
		local status=0
		set -x # <inform the user of why they are being prompted for a doas password>
		doas "$@" || status=$?
		set +x # </inform>
		return "$status"
	else
		"$@"
		return
	fi
}

# only use double quotes, as we wrap it in single quotes in setup-docker --debug

domain='api.nordvpn.com'
server='9.9.9.9'
invalid='192.0.2.1'

printf '%s\n' 'PING:'
ping -c 5 "$server"
ping -c 5 "$domain"

printf '%s\n' 'NSLOOKUP:'
nslookup search

# install curl, dig (bind-tools/dnsutils), whois
if __command_exists apk; then
	__elevate apk update
	__elevate apk add curl bind-tools
elif __command_exists apt; then
	__elevate apt update
	__elevate apt install -y curl dnsutils whois
elif __command_exists pacman; then
	__elevate pacman -Syu
	__elevate pacman -Sy curl dnsutils
elif __command_exists zypper; then
	__elevate zypper update
	__elevate zypper install curl dnsutils
fi

printf '%s\n' 'DATE:'
date

printf '%s\n' 'RESOLVE:'
systemd-resolve --status

printf '%s\n' 'DNS LISTENERS:'
__elevate ss -lp "sport = :domain"

printf '%s\n' 'LISTENERS:'
__elevate netstat -tulpn | grep LISTEN

printf '%s\n' 'DNS:'
__elevate resolvectl dns

printf '%s\n' 'RESOLV:'
cat /etc/resolv.conf

printf '%s\n' 'ROUTE:'
__elevate route -n

printf '%s\n' 'DIG:'
dig "$domain"

printf '%s\n' 'TRACE:'
dig +trace "$domain"

printf 'DIG @%s:\n' "$invalid"
dig @"$invalid" "$domain"

printf 'DIG @%s:\n' "$server"
dig @"$server" hostname.bind chaos txt
dig @"$server" id.server chaos txt

printf '%s\n' 'HOST:'
host -va "$domain"

printf '%s\n' 'NSLOOKUP:'
nslookup -debug "$domain"

printf '%s\n' 'CURL:'
curl "$domain"

printf '%s\n' 'PING:'
ping -c 5 "$domain"

printf '%s\n' 'WHOIS:'
whois "$domain"

# maybe_sudo apt install traceroute
# inetutils-traceroute is worse

# printf '%s\n's "TRACEROUTE:"
# traceroute -p 53 "$server"

# printf '%s\n's "TRACEROUTE -r:"
# traceroute -r -p 53 "$server"
