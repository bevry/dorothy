#!/usr/bin/env bash

function echo_url_coder_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	local inputs=(
		'https://sup.com/hello world'
		'https://sup.com/hello%20world'
	)
	local expected_encode=$'https://sup.com/hello%20world\nhttps://sup.com/hello%2520world'
	local expected_decode=$'https://sup.com/hello world\nhttps://sup.com/hello world'
	local action actions=('encode' 'decode')
	local tool all_tools=(deno node python3)
	local expected

	for action in "${actions[@]}"; do
		if [[ $action == 'encode' ]]; then
			expected="$expected_encode"
		else
			expected="$expected_decode"
		fi
		for tool in "${all_tools[@]}"; do
			if __command_exists -- "$tool"; then
				eval-tester --stdout="$expected" \
					-- echo-url-coder --action="$action" --tool="$tool" -- "${inputs[@]}"

				{
					__print_lines "${inputs[@]}"
				} | eval-tester --stdout="$expected" \
					-- echo-url-coder --action="$action" --tool="$tool" --stdin
			fi
		done
	done

	echo-style --g1="TEST: $0"
	return 0
)
function echo_url_coder() (
	source "$DOROTHY/sources/stdinargs.bash"

	local all_tools=(deno node python3)

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			For each input, decode or encode it's URL entities.

			USAGE:
			echo-url-coder [...options] [--] ...<input>
			echo-lines ...<input> | echo-url-coder [...options]

			OPTIONS:
			--tool=<tool>
			    The math engine to use.
			    Available tools in order of preference: ${all_tools[*]}

			$(stdinargs_options_help --)

			EXAMPLE:

			echo-url-coder --encode -- 'https://sup.com/hello world'

			    https://sup.com/hello%20world
			    # exit status: 0

			echo-lines -- 'https://sup.com/hello world' | echo-url-coder --encode --stdin

			    https://sup.com/hello%20world
			    # exit status: 0

			echo-url-coder --decode -- 'https://sup.com/hello%20world'

			    https://sup.com/hello world
			    # exit status: 0

			echo-lines -- 'https://sup.com/hello%20world' | echo-url-coder --decode --stdin

			    https://sup.com/hello world
			    # exit status: 0

		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_action='' option_tool=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--encode' | '--decode') option_action="${item#--}" ;;
		'--action='*) option_action="${item#*=}" ;;
		'--tool='*) option_tool="${item#*=}" ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinargs options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*) option_args+=("$item") ;;
		esac
	done

	# ensure tool
	if [[ $option_tool == '?' ]]; then
		option_tool="$(choose --required 'Which tool to use?' -- "${all_tools[@]}")"
		if __command_missing -- "$option_tool"; then
			get-installer --first-success --invoke --quiet -- "$option_tool"
		fi
	elif [[ -z $option_tool ]]; then
		local item
		for item in "${all_tools[@]}"; do
			if __command_exists -- "$item"; then
				option_tool="$item"
				break
			fi
		done
	fi

	# ensure action
	if [[ $option_action == '?' ]]; then
		option_action="$(choose --required 'Which action to perform?' -- 'encode' 'decode')"
	elif ! [[ $option_action =~ ^(encode|decode)$ ]]; then
		help "You must provide a valid <action>"
	fi

	# =====================================
	# Action

	# recode doesn't support url encoding/decoding: https://github.com/rrthomas/recode/issues/51
	# xmlstarlet is only for html/xml encoding
	local script
	if [[ $option_tool == 'deno' ]]; then
		script="$(type -P echo-url-coder.ts)"
	elif [[ $option_tool == 'node' ]]; then
		script="$(type -P echo-url-coder.js)"
	# elif [[ "$option_tool" = 'php' ]]; then
	# 	script="$(type -P echo-url-coder.php)"
	elif [[ $option_tool == 'python3' ]]; then
		script="$(type -P echo-url-coder.py)"
	else
		help "The tool [$option_tool] is not yet supported."
	fi
	function on_line {
		"$script" "$option_action" "$1"
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		echo_url_coder_test
	else
		echo_url_coder "$@"
	fi
fi
