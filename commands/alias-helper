#!/usr/bin/env bash

function alias_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Wrappers around macOS aliases to make things easier.

			USAGE:
			alias-helper <action>

			ACTIONS:
			new -- <alias-file-path> <target-file-path>
			    Makes a new macOS alias file at the <alias-file-path> pointing to the <target-file-path>.

			symlink -- <alias-file-path>
			    Converts the macOS alias file with its UNIX symlink equivalent.

			verify -- <alias-file-path>
			    Verify the path is a macOS alias file.

			target -- <alias-file-path>
			    Output the target if the path is a macOS alias file.

			info -- <alias-file-path>
			    Human friendly details about the macOS alias file.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$action"; then
				action="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# =====================================
	# Actions

	function get_alias_origin {
		local path="$1"
		osascript <<-EOF
			tell application "Finder"
				set theItem to (POSIX file "$path") as alias
				if the kind of theItem is "alias" then
					get the posix path of ((theItem) as text)
				end if
			end tell
		EOF
	}

	function get_alias_target {
		local path="$1"
		osascript 2>/dev/null <<-EOF
			tell application "Finder"
				set theItem to (POSIX file "$path") as alias
				if the kind of theItem is "alias" then
					get the POSIX path of ((original item of theItem) as text)
				end if
			end tell
		EOF
	}

	function do_verify {
		local path="$1" alias
		if test -L "$path"; then
			echo-style --bold+red="$path" ' ' --error='<- origin is a symlink not an alias' >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		elif test -e "$path"; then
			eval_capture --stdoutvar=alias -- get_alias_origin "$path"
			if test -n "$alias"; then
				# don't output anything, we are just verifying
				return 0
			else
				echo-style --bold+red="$path" ' ' --error='<- origin is not an alias' >/dev/stderr
				return 22 # EINVAL 22 Invalid argument
			fi
		else
			echo-style --bold+red="$path" ' ' --error='<- origin does not exist' >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi
	}

	function do_target {
		local path="$1" target verify_status
		eval_capture --statusvar=verify_status -- do_verify "$path"
		if test "$verify_status" -eq 0; then
			eval_capture --stdoutvar=target -- get_alias_target "$path"
			if test -n "$target"; then
				print_line "$target" # output the target from the origin
				return 0
			else
				echo-style --bold+red="$path" ' ' --error='<- alias target is broken' >/dev/stderr
				return 22 # EINVAL 22 Invalid argument
			fi
		fi
	}

	function do_info {
		local path="$1" origin target

		# verify
		eval_capture --stdoutvar=origin -- get_alias_origin "$path"
		if test -z "$origin"; then
			echo-style \
				--bold+red="$path" \
				$'\t' \
				$'\t' --error='← not an alias' >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi

		# target
		eval_capture --stdoutvar=target -- get_alias_target "$path"
		if test -z "$target"; then
			echo-style \
				--bold="$origin" \
				$'\t' \
				$'\t' --error='← target broken' >/dev/stderr
			return 9 # EBADF 9 Bad file descriptor
		fi
		if test ! -e "$target"; then
			echo-style \
				--bold="$origin" \
				--nocolor=$'\t' --color+dim=$'\t→\t' --bold+red="$target" \
				$'\t' --error='← target missing' >/dev/stderr
			return 2 # ENOENT 2 No such file or directory
		fi

		# success
		echo-style \
			--bold="$origin" \
			--nocolor=$'\t' --color+dim=$'\t→\t' --bold+green="$target"
	}

	function do_new {
		local path="$1" target="$2" type target_absolute path_absolute path_directory path_filename
		target_absolute="$(fs-absolute -- "$target")"
		path_absolute="$(fs-absolute -- "$path")"
		path_directory="$(fs-dirname -- "$path_absolute")"
		path_filename="$(basename "$path_absolute")"

		# act
		if test -d "$target_absolute"; then
			type='folder'
		elif test -f "$target_absolute"; then
			type='file'
		else
			echo-error 'Invalid path or unsupported type:' ' ' --code="$path"
			return 22 # EINVAL 22 Invalid argument
		fi

		# remove it if it already exists
		fs-rm --quiet --confirm -- "$path_absolute"

		osascript <<-EOF
			tell application "Finder"
				make new alias to $type (posix file "$target_absolute") at (posix file "$path_directory")
				set name of result to "$path_filename"
			end tell
		EOF

		# make the alias's permissions the same as the target's
		chmod "$(stat -f '%p' "$target_absolute")" "$path_absolute"
		#chmod --reference="$targetPath" "$path_absolute"
	}

	function do_symlink {
		local path="$1" origin target

		# verify alias
		eval_capture --stdoutvar=origin -- get_alias_origin "$path"
		if test -z "$origin"; then
			echo-style --bold+red="$path" ' ' --error='<- not an alias' >/dev/stderr
			return 22 # EINVAL 22 Invalid argument
		fi

		# verify target
		eval_capture --stdoutvar=target -- get_alias_target "$path"
		if test -z "$target"; then
			echo-style --bold="$origin" --dim=' → ' --bold+red="$target" ' ' --error='← target broken' >/dev/stderr
			return 9 # EBADF 9 Bad file descriptor
		fi
		if test ! -e "$target"; then
			echo-style --bold="$origin" --dim=' → ' --bold+red="$target" ' ' --error='← target missing' >/dev/stderr
			return 2 # ENOENT 2 No such file or directory
		fi

		# convert
		if test -f "$target"; then
			ln -nfs "$target" "$origin"
			print_line "converted $path -> $target"
		elif test -d "$target"; then
			ln -nfs "$target" "$origin"
			print_line "converted $path -> $target"
		fi
	}

	# =====================================
	# Act

	if test "$(type -t "do_$action")" = 'function'; then
		"do_$action" "${option_args[@]}"
	else
		help "<action> unsupported or yet implemented: $action" || :
		return 78 # ENOSYS 78 Function not implemented
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	alias_helper "$@"
fi
