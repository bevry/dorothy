#!/usr/bin/env bash

# NOTE:
# Help handling is implemented, however it is done specially, due to the following considerations.
# This script may be run directly, eval'd, or even sourced
# DOROTHY may or may not even exist yet
# Dorothy clone may or may not exist yet
# Bash v4 is not guaranteed
#
# Once dorothy is asserted to exist, we want to load environment, such that:
# Environment configuration wouldn't have loaded if:
#   in trial mode,
#   or invoked by a shell that was not yet configured for Dorothy.
# Environment configuration includes:
#   homebrew path, homebrew architecture, ecosystem paths, etc.
# Environment configuration is necessary so that:
#   dependencies can be detected and installed,
#   test dependencies can correctly infer their environment's capabilities

# =====================================
# Command

# do not use the cmd_ convention, as that would interfere with the dorothy worker
function dorothy_() (
	# sanity check that we are running in bash
	# sanity check, as [function .. () (], [elif], [&>], [local] are all bashisms, so other shells should have failed by now
	if [[ -z ${BASH_VERSION-} ]]; then
		printf '%s\n' "Dorothy requires bash to run. Refer to the installation instructions: $dorothy_install" >&2
		exit 6 # ENXIO 6 Device not configured
	fi

	# set only -e, as -u and pipefail not necessary right now, later we will load bash.bash
	set -e

	# vars that should be exported to subshells, which may or may not be inherited, as setup-environment-commands has not run yet
	local self="${BASH_SOURCE:-"$0"}" is_remote
	if [[ $self == *'.local/share/dorothy/commands/dorothy' && -f $self ]]; then
		is_remote='no'
	else
		is_remote='yes'
	fi
	export DOROTHY ZDOTDIR PATH XDG_CONFIG_HOME XDG_CACHE_HOME XDG_BIN_HOME XDG_DATA_HOME XDG_STATE_HOME
	if [[ -z ${DOROTHY-} ]]; then
		# handle (1) fresh installation situation and (2) cron situation (dorothy is installed, however environment is empty)
		# `env -i "$(which dorothy)" run env` <-- whoami returns user who has dorothy installed:
		# `sudo env -i "$(which dorothy)" run env` <-- whoami returns root, who does not have dorothy installed
		if [[ $is_remote == 'no' ]]; then
			# handle fresh environment situation / cron situation
			DOROTHY="${self%/commands/dorothy*}"
			if [[ -z ${HOME-} ]]; then
				export HOME
				HOME="${self%/.local/share/dorothy/commands/dorothy*}"
			fi
			if [[ -z ${USER-} ]]; then
				export USER
				USER="$(basename -- "$HOME")"
			fi
		else
			# handle fresh installation situation
			DOROTHY=''
		fi
	fi
	if [[ -z ${XDG_CONFIG_HOME-} ]]; then
		XDG_CONFIG_HOME="$HOME/.config"
	fi
	if [[ -z ${XDG_CACHE_HOME-} ]]; then
		XDG_CACHE_HOME="$HOME/.cache"
	fi
	if [[ -z ${XDG_BIN_HOME-} ]]; then
		XDG_BIN_HOME="$HOME/.local/bin"
	fi
	if [[ -z ${XDG_DATA_HOME-} ]]; then
		XDG_DATA_HOME="$HOME/.local/share"
	fi
	if [[ -z ${XDG_STATE_HOME-} ]]; then
		XDG_STATE_HOME="$HOME/.local/state"
	fi

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Helpers for interacting with the Dorothy dotfile ecosystem.

			USAGE:
			dorothy [...options] <action> [...arguments]

			OPTIONS:
			--help, -h
			    Show this help information.

			--slug=<slug>
			    If Dorothy needs to be installed/updated, use this slug.

			--branch=<branch>
			    If Dorothy needs to be fresh installed, checkout this branch.

			--reference=<reference> | --commit=<reference>
			    If Dorothy needs to be fresh installed, checkout this reference.

			--remote-name=<remote>
			    If Dorothy needs to be installed/updated, use this remote name.

			--xdg | --no-xdg
			    If [--xdg] is used, DOROTHY will be relocated to the XDG location.
			    If [--no-xdg] is used, a custom DOROTHY will be permitted.
			    If neither is provided, autodetection is used. This is the default.

			--skip-deps
			    Skip dependency checks, useful if you have already set them up and are on a slow machine.

			ACTIONS:

			dorothy install
			  [--clean]
			  [--skip-install]
			  [--user=<user>]

			    Installs Dorothy interactively, with configuration for dotfile modifications.

			    Unless [--clean] is provided, Dorothy will only extend your shell configuration.
			    If [--clean] is provided, Dorothy will prompt you if you would like to remove your default shell configuration for a lighter installation experience.

			dorothy uninstall

			    Removes the Dorothy sourcing from your dotfile configuration files.

			dorothy repl
			  [--shell=<shell>]
			  [--theme=<theme>]

			    Invoke a Dorothy-configured REPL, where you can run as many commands within the Dorothy environment as you'd like.
			    If a shell is provided, invoke Dorothy within that shell, otherwise prompt for which REPL-supported shell to use.

			dorothy run
				-- <command> [...]

				Invoke the <command> within the Dorothy environment, without the need to install Dorothy to access the command.

			dorothy update

			    Updates Dorothy to the latest version.

			dorothy commands

			    List all the Dorothy commands that are available to you.

			dorothy permissions

			    Correct permissions of new Dorothy commands, ensuring they are executable, and that git is aware of them.

			dorothy edit

			    Correct permissions, then open Dorothy's installation and user configuration in your desired editor.

			dorothy review

			    Correct permissions, then open Dorothy's installation and user configuration in your desired git reviewer.

			dorothy theme

			    Interactively configure your desired theme for Dorothy configured shells.

			dorothy dev

			    Automatically install Dorothy' development dependencies.

			dorothy format

			    Automatically format Dorothy's source code to its conventions.

			dorothy check

			    Automatically check Dorothy's source code to its conventions.

			dorothy lint

			    Automatically format and check Dorothy's source code to its conventions.
			    Files are processed by most recently modified first.

			dorothy test
			  ...[--bash=<version>]
			    Only test against this bash version or binary.
			  ...[--skip=<test>]
			    Skip this test.
			  ...[--only=<test> | [-- ...<test>]
			    Run only these tests

			    Run tests on Dorothy's source code.
			    Files are processed by most recently modified first.
			    Tests against all available bash versions on the machine [bash], and [bash-*].

			dorothy todos

			    Output information about possible improvements to make to Dorothy.

		EOF
		if [[ $# -ne 0 ]]; then
			# use printf, as __print_line not loaded yet
			printf '%s' "ERROR: $*" >&2
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process action arguments
	# @todo prevent double-action overwrite
	local item action='' option_xdg='' option_skip_deps='' option_slug option_branch option_reference option_remote_name option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--xdg' | '--xdg=yes') option_xdg='yes' ;;
		'--no-xdg' | '--xdg=no') option_xdg='no' ;;
		'--skip-deps' | '--skip-deps=yes') option_skip_deps='yes' ;;
		'--no-skip-deps' | '--skip-deps=no') option_skip_deps='no' ;;
		'--slug='*) option_slug="${item#*=}" ;;
		'--branch='*)
			option_branch="${item#*=}"
			option_reference="$option_branch"
			;;
		'--commit='* | '--ref='* | '--reference='*) option_reference="${item#*=}" ;;
		'--remote-name='* | '--remote='*) option_remote_name="${item#*=}" ;;
		'repl')
			action='repl'
			option_args+=("$@")
			shift $#
			;;
		'run')
			action='run'
			option_args+=("$@")
			shift $#
			;;
		'i' | 'install')
			action='install'
			option_args+=("$@")
			shift $#
			;;
		'uninstall')
			action='uninstall'
			;;
		'u' | 'up' | 'update')
			action='update'
			;;
		'p' | 'perm' | 'perms' | 'permissions')
			action='permissions'
			;;
		'e' | 'edit')
			action='edit'
			option_args+=("$@")
			shift $#
			;;
		'r' | 'review')
			action='review'
			;;
		'theme')
			action='theme'
			;;
		'd' | 'dev')
			action='dev'
			;;
		'f' | 'format')
			action='format'
			;;
		'c' | 'check')
			action='check'
			;;
		'l' | 'lint')
			action='lint'
			;;
		't' | 'test')
			action='test'
			option_args+=("$@")
			shift $#
			;;
		'todo' | 'todos')
			action='todos'
			;;
		'commands')
			action='commands'
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	if [[ -z $action ]]; then
		help "<action> must be provided."
	fi

	# =====================================
	# Variables

	# defaults
	local dorothy_slug='bevry/dorothy'
	local dorothy_reference='HEAD'
	local dorothy_homepage="https://github.com/$dorothy_slug"
	local dorothy_install="$dorothy_homepage#install"
	local dorothy_worker='https://dorothy.bevry.me'
	local dorothy_worker_run="$dorothy_worker/run"

	# options
	local the_slug="${option_slug:-"$dorothy_slug"}"
	local the_branch="${option_branch-}"
	local the_reference="${option_reference:-"$dorothy_reference"}"
	local the_upstream_remote_name="${option_remote_name:-"${the_slug%%/*}"}" # get everything before the first /
	local the_upstream_git_https="https://github.com/$the_slug.git"
	local the_bash_url="https://raw.githubusercontent.com/$the_slug/$the_reference/sources/bash.bash"
	local the_homepage="https://github.com/$the_slug"
	local the_browse_url
	if [[ $the_slug == "$dorothy_slug" && $the_reference == "$dorothy_reference" ]]; then
		the_browse_url="$the_homepage"
	else
		the_browse_url="$the_homepage/tree/$the_reference"
	fi
	local the_strongbox_url="$the_homepage/blob/$the_reference/docs/dorothy/private-configuration.md#strongbox"

	# =====================================
	# Sourcing

	# the local installation exists, and the invoked [dorothy] command is of the local installation
	if [[ $is_remote == 'no' && -n $DOROTHY && -f "$DOROTHY/sources/bash.bash" ]]; then
		# match with the local installation's [bash.bash]
		source "$DOROTHY/sources/bash.bash"
	else
		# we are the remote [dorothy] command, so match with the remote [bash.bash]
		eval "$(curl -fsSL "$the_bash_url")"
	fi

	# =====================================
	# Substitutions

	# see [commands/is-mac] for details
	function __is_mac {
		[[ "$(uname -s)" == 'Darwin' ]] || return
	}

	# see [commands/is-linux] for details
	function __is_linux {
		[[ "$(uname -s)" == 'Linux' ]] || return
	}

	# see [commands/is-manjaro] for details
	function __is_manjaro {
		uname -r | grep --quiet --ignore-case --fixed-strings --regexp='manjaro' || return
	}

	# see [commands/is-alpine] for details
	function __is_alpine {
		[[ -f /etc/os-release ]] && grep --quiet --ignore-case --regexp='ID=alpine' -- /etc/os-release 2>/dev/null || return
	}

	# see [commands/fs-realpath] for details
	function __fs_realpath {
		# options
		local item paths=()
		while [[ $# -ne 0 ]]; do
			item="$1"
			shift
			case "$item" in
			'--help' | '-h')
				help
				return
				;;
			'--')
				paths+=("$@")
				shift $#
				break
				;;
			'--'*)
				help "An unrecognised flag was provided: $item"
				return
				;;
			*) paths+=("$item") ;;
			esac
		done

		local gnu_realpath='' fallback_realpath='' gnu_readlink='' fallback_readlink=''
		if __command_exists -- grealpath; then
			gnu_realpath='grealpath'
		elif __command_exists -- realpath; then
			if __is_mac; then
				# usage: realpath [-q] [path ...]
				fallback_realpath='realpath'
			elif __is_alpine && [[ "$(realpath "$(type -P 'realpath')" || :)" == "$(type -P busybox || :)" ]]; then
				# Usage: realpath FILE...
				fallback_realpath='realpath'
			elif __is_linux; then
				gnu_realpath='realpath'
			fi
		fi
		if __command_exists -- greadlink; then
			gnu_readlink='greadlink'
		elif __command_exists -- readlink; then
			if __is_mac; then
				# usage: readlink [-fn] [file ...]
				fallback_readlink='readlink'
			elif __is_alpine && [[ "$(readlink -f "$(type -P 'readlink')" || :)" == "$(type -P busybox || :)" ]]; then
				# Usage: readlink [-fnv] FILE
				fallback_readlink='readlink'
			elif __is_linux; then
				gnu_readlink='readlink'
			fi
		fi

		# --resolve=yes --validate=yes --relative=no
		local path
		for path in "${paths[@]}"; do
			if [[ -n $gnu_realpath ]]; then
				"$gnu_realpath" --canonicalize-existing "$path"
				return
			elif [[ -n $gnu_readlink ]]; then
				"$gnu_readlink" --canonicalize-existing "$path"
				return
			elif [[ -n $fallback_readlink ]]; then
				"$fallback_readlink" -f "$path"
				return
			elif [[ -n $fallback_realpath ]]; then
				"$fallback_realpath" "$path"
				return
			elif __command_exists -- fish; then
				# this isn't --validate, but it is a last resort
				fish -c 'builtin realpath "$argv[1]"' -- "$path" || return
			else
				__print_lines "Dorothy requires GNU readlink or realpath to be installed. $dorothy_install" >&2
				return 6 # ENXIO 6 Device not configured
			fi
		done
	}

	# see [commands/fs-relocate] for details
	function relocate_then_symlink_if_necessary {
		local source="$1" destination="$2" redirected_destination original_source symlink_accident
		function __fail {
			echo-style --stderr --notice='Something went wrong when relocating paths to their correct location. Please remove one of these to try again:' --newline --code="$source" --newline --code="$destination"
			return 17 # EEXIST 17 File exists
		}

		# if destination is a symlink, resolve it, move it, and remove it
		if [[ -L $destination ]]; then
			if [[ -e $destination ]]; then
				redirected_destination="$(__fs_realpath -- "$destination")"
				# remove the destination symlink
				rm -f -- "$destination"
				# relocate the resolved destination to the destination
				mv -fv -- "$redirected_destination" "$destination"
			else
				# remove the broken destination symlink
				rm -f -- "$destination"
			fi
		fi

		# if source is a symlink, resolve it and remove it
		if [[ -L $source ]]; then
			# store the source symlink
			original_source="$source"
			# update the source with the resolved source target
			if [[ -e $source ]]; then
				source="$(__fs_realpath -- "$source")"
			fi
			# if the source target is the the destination, and we want to make a symlink, we are done
			if [[ $source == "$destination" ]]; then
				return 0
			fi
			# the source target is not the destination, so remove the source symlink
			rm -f -- "$original_source"
		elif [[ $source == "$destination" ]]; then
			# sanity check, if the source is the same as the destination, nothing to do
			return 0
		fi

		# sanity check
		if [[ -L $source ]]; then
			__fail
		fi

		# if the source exists, prep for merging it with the destination
		if [[ -e $source ]]; then
			# if the destination exists, trim the source and destination to avoid merge failures
			if __command_exists -- fs-trim && [[ -e $destination ]]; then
				fs-trim --no-confirm --quiet --empty --cache -- "$source" "$destination"
				# if source doesn't exist anymore, we are done
				if [[ ! -e $source ]]; then
					return 0
				fi
			fi

			# merge the source into the destination
			mv -fv -- "$source" "$destination" || __fail
		fi

		# sanity check
		if [[ -e $source ]]; then
			__fail
		fi

		# now that source definitely doesn't exist, symlink the source to the destination
		# ln <target> <symlink>
		if __is_alpine; then
			# alpine doesn't support -F, however the removals earlier should make it unnecessary
			ln -sf -- "$destination" "$source"
		else
			# -F: replace symlink if directory if needed
			# -f: unlink symlink path if needed
			# -s: symbolic link
			ln -sfF -- "$destination" "$source"
		fi

		# cleanup accidents
		symlink_accident="$source/$(basename -- "$destination")"
		if [[ -L $symlink_accident ]]; then
			rm -f -- "$symlink_accident"
		fi

		# all done
		return 0
	}

	# =====================================
	# Helpers

	function __eval_wrap {
		# trim -- prefix
		if [[ ${1-} == '--' ]]; then
			shift
		fi
		# proceed
		printf '%s\n' "$*"
		"$@" # eval
	}

	function ensure_prereq_dependencies {
		# ensure locations exist
		__mkdirp "$XDG_CONFIG_HOME" "$XDG_CACHE_HOME" "$XDG_BIN_HOME" "$XDG_DATA_HOME" "$XDG_STATE_HOME"

		# skip deps
		if [[ $option_skip_deps == 'yes' ]]; then
			return 0
		fi

		# dorothy has yet to be installed
		# don't check for [realpath/readlink from coreutils] as no way to install that on macos without brew, however install them if installing other things
		# this should somewhat coincide with:
		# [commands/dorothy] - preference sorted, doesn't do updates, don't do noconfirm
		# [dorothy-workflow.yml] - preference sorted, does updates, does noconfirm, skips extras
		# [readme.md] - popularity sorted, does updates, don't do noconfirm, skips extras
		# https://repology.org/project/gawk/versions
		if __command_missing -- bash curl grep git awk; then
			# preference sort
			if __command_exists -- apt-get; then
				# for ubuntu/debian/kali
				# E: Unable to locate package ncurses
				__elevate apt-get install -y bash curl git coreutils gawk
			elif __command_exists -- zypper; then
				# for opensuse
				__elevate zypper --non-interactive install bash curl git-core coreutils gawk
			elif __command_exists -- apk; then
				# for alpine
				__elevate apk add bash curl grep git coreutils gawk
			elif __command_exists -- pamac; then
				# for manjaro that has pamac installed
				__elevate pamac install --no-confirm bash curl git coreutils gawk
			elif __command_exists -- pacman; then
				# for manjaro and arch
				__elevate pacman --noconfirm --refresh --sync --needed bash curl git coreutils gawk
			elif __command_exists -- urpmi; then
				# for mageia, prefer over fedora as mageia contains dnf
				__elevate urpmi --auto bash curl git gawk
			elif __command_exists -- dnf; then
				# for fedora
				__elevate dnf install --assumeyes --refresh --best --allowerasing bash curl git coreutils gawk
			elif [[ -n ${HOMEBREW_PREFIX-} && -x "$HOMEBREW_PREFIX/bin/brew" ]]; then
				# this is here for consistency only, as it is unnecessary, all the commands already exist on macos without any need for homebrew
				"$HOMEBREW_PREFIX/bin/brew" install bash curl git coreutils gawk
			elif __command_exists -- xbps-install; then
				# for void
				__elevate xbps-install --sync --yes bash curl git coreutils gawk
			elif __command_exists -- nix-env; then
				# for nix
				__elevate nix-env --install --attr nixpkgs.bash nixpkgs.curl nixpkgs.git nixpkgs.coreutils nixpkgs.gawk
			elif __command_exists -- emerge; then
				# for gentoo
				__elevate emerge app-shells/bash net-misc/curl dev-vcs/git sys-apps/coreutils sys-apps/gawk
			else
				# for everything else
				# @todo style with var_dump or something
				cat <<-EOF >&2
					One of these installation dependencies are missing:
					bash:  $(bash --version | head -1 || :)
					curl:  $(curl --version | head -1 || :)
					grep:  $(grep --version || :)
					git:   $(git --version || :)
					awk:   $(awk --version || :)
					gawk:  $(gawk --version || :)

					Refer to the manual: $dorothy_homepage
				EOF
				return 19 # ENODEV 19 Operation not supported by device
			fi
		fi

		# ensure coreutils is installed on alpine, otherwise [env] won't support [-S]
		# Usage: env [-i0] [-u NAME]... [-] [NAME=VALUE]... [PROG ARGS]
		if __is_alpine && [[ "$(realpath "$(type -P 'env')" || :)" == "$(type -P busybox || :)" ]]; then
			__elevate apk add coreutils
		fi
	}

	function ensure_minimal_dependencies {
		# skip deps
		if [[ $option_skip_deps == 'yes' ]]; then
			return 0
		fi

		# dorothy has been installed
		echo-style --h2='Ensure required dependencies'

		# macos tooling
		if __is_mac; then
			setup-util-apple-rosetta --quiet
			setup-util-apple-cli-tools --quiet
			# environment invalidation and reloading now happens automatically via signals
		fi

		# upgrade bash if necessary
		setup-util-bash --quiet

		# [github-download] sometimes requires [jq]
		# [get-github-release] sometimes requires [gsed] however it allows fallback to [sed]
		# [config-helper] uses [echo-regexp] which requires [deno]
		if __command_missing -- jq deno; then
			if __command_exists -- apt-get; then
				__elevate apt-get -qq update # -qq: quiet
			fi
			setup-util-jq --quiet
			setup-util-deno --quiet
		fi

		# ensure nushell always has the config files it needs
		if __command_exists -- nu; then
			setup-util-nu --quiet
		fi

		# log
		echo-style --g2='Ensure required dependencies'
	}

	function ensure_development_dependencies {
		# skip deps
		if [[ $option_skip_deps == 'yes' ]]; then
			return 0
		fi

		# deps
		echo-style --h2='Ensure development dependencies'
		setup-util-bash --quiet "$@"
		setup-util-ripgrep --quiet "$@"
		setup-util-prettier --quiet "$@"
		setup-util-shellcheck --quiet "$@"
		setup-util-shfmt --quiet "$@"
		setup-util-trunk --quiet "$@"
		echo-style --g2='Ensure development dependencies'
	}

	function assert_dorothy_configured {
		# DOROTHY is determined earlier, so this checks it is installed
		if [[ ! -d $DOROTHY ]]; then
			echo-style \
				--error='Dorothy is not installed.' $'\n' \
				'Nothing was found at: ' --code="$DOROTHY" $'\n' \
				--warning='Run' --code=' dorothy install ' --warning='to install, then you can run' --code=" dorothy $action"
			return 2 # ENOENT 2 No such file or directory
		fi
		# no need to source bash.bash here, as we did it earlier via source and curl

		# prepare environment for invalidations
		source "$DOROTHY/sources/environment.sh"

		# ensure state exists
		__mkdirp "$XDG_STATE_HOME/dorothy"
		relocate_then_symlink_if_necessary "$DOROTHY/state" "$XDG_STATE_HOME/dorothy"
		__mkdirp \
			"$DOROTHY/state/config.local" \
			"$DOROTHY/state/config" \
			"$DOROTHY/state/sources"
	}

	function assert_user_cloned {
		if [[ ! -d "$DOROTHY/user/commands.local" || ! -d "$DOROTHY/user/commands" || ! -d "$DOROTHY/user/config.local" || ! -d "$DOROTHY/user/config" ]]; then
			echo-style \
				--error='Dorothy user configuration is not configured correctly.' $'\n' \
				--warning='Run' --code=' dorothy install ' --warning='to install, then you can run' --code=" dorothy $action"
			return 2 # ENOENT 2 No such file or directory
		fi
	}

	function assert_dorothy_and_user_cloned {
		assert_dorothy_configured
		assert_user_cloned
	}

	function __git_init {
		local path="$1"
		__mkdirp "$path" || return
		(
			cd "$path" || return
			git init || return
		)
		return
	}

	function __git_init_and_fetch {
		local path="$1" remote="$2"
		__mkdirp "$path" || return
		(
			cd "$path" || return
			git init || return
			git remote add origin "$remote" || return
			git fetch origin || return
		)
		return
	}

	function make_executable {
		# makes sure chmod isn't running on nothing, which can happen upon initial user installs
		# dorothy may not have been loaded yet
		if [[ $# -ne 0 ]]; then
			# macos chmod doesn't support [--] as such don't both with it for linux either
			chmod -f +x "$@"
		fi
	}

	function relocate_dorothy_if_necessary {
		# move if necessary
		if [[ -d $DOROTHY || -d "$XDG_DATA_HOME/dorothy" ]]; then
			if [[ $option_xdg == 'yes' ]]; then
				relocate_then_symlink_if_necessary "$DOROTHY" "$XDG_DATA_HOME/dorothy"
			elif [[ $option_xdg == 'no' ]]; then
				relocate_then_symlink_if_necessary "$XDG_DATA_HOME/dorothy" "$DOROTHY"
				relocate_then_symlink_if_necessary "$HOME/.local/share/dorothy" "$DOROTHY"
			else
				# invalid option_xdg value
				return 76 # EPROCUNAVAIL 76 Bad procedure for program
			fi

			# ensure correct permissions
			make_executable "$DOROTHY/commands/"* "$DOROTHY/commands.beta/"* "$DOROTHY/commands.deprecated/"*
		fi # else fresh install and no prior clones exist
	}

	function relocate_user_if_necessary {
		# move if necessary
		if [[ -d "$DOROTHY/user" || -d "$XDG_CONFIG_HOME/dorothy" ]]; then
			if [[ $option_xdg == 'yes' ]]; then
				# ensure $DOROTHY/user always exists
				relocate_then_symlink_if_necessary "$DOROTHY/user" "$XDG_CONFIG_HOME/dorothy"
			elif [[ $option_xdg == 'no' ]]; then
				relocate_then_symlink_if_necessary "$XDG_CONFIG_HOME/dorothy" "$DOROTHY/user"
			else
				# invalid option_xdg value
				return 76 # EPROCUNAVAIL 76 Bad procedure for program
			fi

			# ensure correct permissions
			if [[ -d "$DOROTHY/user/commands" ]]; then
				make_executable "$DOROTHY/user/commands/"*
			fi
			if [[ -d "$DOROTHY/user/commands.local" ]]; then
				make_executable "$DOROTHY/user/commands.local/"*
			fi
		fi # else fresh install and no prior clones exist
	}

	function prepare_dorothy {
		# if no DOROTHY env override, attempt DOROTHY from possible existing installations
		if [[ -z $DOROTHY ]]; then
			if [[ -d "$XDG_DATA_HOME/dorothy" ]]; then
				DOROTHY="$XDG_DATA_HOME/dorothy"
			elif [[ -d "$HOME/.local/share/dorothy" ]]; then
				DOROTHY="$HOME/.local/share/dorothy"
			elif [[ -x ./commands/dorothy ]]; then
				DOROTHY="$(pwd)" # github actions, cron, etc
			else
				# no existing installation
				# no custom $DOROTHY
				# so use XDG
				DOROTHY="$XDG_DATA_HOME/dorothy"
			fi
		fi

		# adjust XDG based on determination above
		if [[ $DOROTHY == "$XDG_DATA_HOME/dorothy" ]]; then
			option_xdg='yes'
		else
			option_xdg='no'
		fi

		# adjust path for determined (including user defined) DOROTHY, as well as standard DOROTHY XDG location (in case user ever changes DOROTHY location)
		PATH="$DOROTHY/user/commands:$XDG_CONFIG_HOME/dorothy/commands:$DOROTHY/commands:$XDG_CONFIG_HOME/dorothy/commands:$XDG_BIN_HOME:$PATH"

		# if dorothy exists, ensure DOROTHY is in correct location
		relocate_dorothy_if_necessary

		# if user configuration exists, ensure user configuration is in correct location
		relocate_user_if_necessary
	}

	function stage_new_files {
		__require_globstar
		local path="$1"
		# The following paths are ignored by one of your .gitignore files: ...
		# hint: Use -f if you really want to add them.
		# hint: Turn this message off by running
		# hint: "git config advice.addIgnoredFile false"
		(
			cd "$path"
			git add --ignore-errors ./** || :
		)
	}

	function stage_changed_files {
		local path="$1"
		(
			cd "$path"
			git add -u || :
		)
	}

	function correct_permissions {
		# make everything readable and writable, make directories accessible
		fs-own --permissions='+Xrw' --optional --recursive -- "$DOROTHY"
		# make commands executable
		local commands
		commands=(
			"$DOROTHY/commands/"*
			"$DOROTHY/commands.beta/"*
			"$DOROTHY/commands.deprecated/"*
			"$DOROTHY/user/commands/"*
			"$DOROTHY/user/commands.local/"*
			"$DOROTHY/themes/oz"
		)
		fs-own --x -- "${commands[@]}"
	}

	function ensure_permissions_configured {
		source "$(type -P eval-helper)"

		eval_helper --quiet --no-wrap \
			--pending="$(echo-style --bold='Correcting permissions...')" \
			--success="$(echo-style --success='Corrected permissions.')" \
			--failure="$(echo-style --error='Failed to correct permissions.')" -- \
			correct_permissions

		eval_helper --quiet --no-wrap \
			--pending="$(echo-style --bold='Staging new files...')" \
			--success="$(echo-style --success='Staged new files.')" \
			--failure="$(echo-style --error='Failed to stage new files.')" -- \
			stage_new_files "$DOROTHY"

		eval_helper --quiet --no-wrap \
			--pending="$(echo-style --bold='Staging changed files...')" \
			--success="$(echo-style --success='Staged changed files.')" \
			--failure="$(echo-style --error='Failed to stage changed files.')" -- \
			stage_changed_files "$DOROTHY"
	}

	function ensure_dorothy_configured {
		# sanity check
		if ! [[ $action =~ ^(install|update|repl|run)$ ]]; then
			return 29 # ESPIPE 29 Illegal seek
		fi

		# helpers
		function install_dorothy {
			__print_lines "Installing Dorothy into $DOROTHY from $the_browse_url"

			# setup repo with branch
			local clone_args=(
				'--quiet'   # --quiet to suppress 'Cloning into...' feedback
				'--no-tags' # don't do [--depth 1] and [--single-branch] as a full history is required to do any checkouts
			)
			if [[ -n $the_branch ]]; then
				clone_args+=(
					'--branch'
					"$the_branch"
				)
			fi
			__eval_wrap -- git clone "${clone_args[@]}" "$the_upstream_git_https" "$DOROTHY"

			# setup repo with reference
			(
				cd "$DOROTHY"
				__eval_wrap -- git checkout --quiet "$the_reference" # --quiet to suppress "detached HEAD" feedback
			)
		}
		function __update_modern_dorothy {
			if __command_exists -- echo-style git-helper; then
				echo-style --h2="Updating the Dorothy installation at $DOROTHY from $the_browse_url" || return
				# verify it is a repository
				git-helper --path="$DOROTHY" verify || return
				# update its configured remote first (their upstream)
				git-helper --path="$DOROTHY" update || return
				# update our intended remote second (the upstream)
				git-helper --path="$DOROTHY" update -- --remote-name="$the_upstream_remote_name" --remote-url="$the_upstream_git_https" || return
				echo-style --g2="Updating the Dorothy installation at $DOROTHY" || return
			else
				return 1
			fi
		}
		function update_dorothy {
			# https://github.com/bevry/dorothy/issues/215
			__update_modern_dorothy || {
				__print_lines '...Dorothy was unable to be automatically updated. Please manually update Dorothy and try again.'
				return 1
			}
		}

		# check
		if [[ $action =~ ^(repl|run)$ ]]; then
			# in trial mode, only install dorothy if necessary, do not update
			if [[ ! -d $DOROTHY ]]; then
				install_dorothy
			fi
		else
			# in install and update mode, do whatever is appropriate
			if [[ -d $DOROTHY ]]; then
				update_dorothy
			else
				install_dorothy
			fi
		fi

		# move if necessary, and fix permissions
		relocate_dorothy_if_necessary
	}

	function ensure_machine_configured {
		# sanity check
		if ! [[ $action =~ ^(install)$ ]]; then
			return 29 # ESPIPE 29 Illegal seek
		fi

		# act
		local hostname
		hostname="$(get-hostname)"
		if get-terminal-reactivity-support --quiet && is-generic -- "$hostname"; then
			if confirm --bool --ppid=$$ -- "This machine's hostname is currently generic [$hostname], would you like to change it?"; then
				hostname="$(
					ask --linger --question='What should the new hostname be?'
				)"
				if [[ -n $hostname ]]; then
					set-hostname "$hostname"
				else
					__print_lines "Proceeding with the existing hostname: $hostname"
				fi
			fi
		fi
	}

	function ensure_user_configured {
		local user_repo_input="${1-}" # user can be a github username, a gitlab username, a custom url, or local - only applicable for installation

		# sanity check
		if ! [[ $action =~ ^(install|update)$ ]]; then
			return 29 # ESPIPE 29 Illegal seek
		fi

		# helpers
		function install_user {
			# sanity check
			if [[ -d "$DOROTHY/user" ]]; then
				# should have called update
				return 29 # ESPIPE 29 Illegal seek
			fi

			# prepare
			local question='' \
				repo_slug='' \
				repo_user='' \
				repo_name='dotfiles' \
				repo_description="My user configuration for the Dorothy dotfile ecosystem: $dorothy_homepage" \
				repo_validated='no' \
				where='' repo_url='' repo_git_url=''

			# handle github and gitlab prefixes, local value, custom urls, and default github usernames
			if [[ -n $user_repo_input ]]; then
				# @todo support github and gitlab urls
				if [[ $user_repo_input =~ ^(gh|github): ]]; then
					where='github'
					repo_user="${user_repo_input#*:}"
				elif [[ $user_repo_input =~ ^(gitlab|gl): ]]; then
					where='github'
					repo_user="${user_repo_input#*:}"
				elif [[ $user_repo_input =~ ^(local|none)$ ]]; then
					where='local'
					repo_user=''
				elif [[ $user_repo_input == *:* ]]; then
					where='custom'
					repo_url="$user_repo_input"
				else
					where='github'
				fi
			fi

			# if not reactive, force local
			if get-terminal-reactivity-support --quiet; then
				where="$(
					choose --linger --required --label --default="$where" \
						--question='Where do you want to store your Dorothy user configuration?' -- \
						\
						github 'Use a GitHub repository for your user configuration.' \
						gitlab 'Use a GitLab repository for your user configuration.' \
						custom 'Manually specify a repository URL for your user configuration.' \
						local "Don't use a repository for your user configuration, just store it locally for now."
				)"
			else
				# @todo handle this case
				echo-style --notice="Terminal isn't reactive, as such will default to local storage for user configuration."
				where='local'
			fi

			# detect if we can automate or assist part of the setup
			if [[ $where =~ ^(github|gitlab)$ ]]; then
				# install the cli tool
				local cli=''
				if [[ $where == 'github' ]]; then
					# install and authenticate
					setup-util-gh --confirm --optional
					if __command_exists -- gh; then
						cli='gh'
					fi
				elif [[ $where == 'gitlab' ]]; then
					# install and authenticate
					setup-util-glab --confirm --optional
					if __command_exists -- glab; then
						cli='glab'
					fi
				fi

				# prepare username default, and clear generic usernames
				if [[ -z $repo_user ]]; then
					repo_user="$(get-profile username || :)"
					if [[ -n $repo_user ]] && is-generic -- "$repo_user"; then
						repo_user=''
					fi
				fi

				# validate
				local enter_or_confirm='Enter'
				while [[ $repo_validated == 'no' ]]; do
					# validate input details
					repo_user="$(
						ask --required --linger \
							--question="$enter_or_confirm your $where username." \
							--default="$repo_user"
					)"

					# check what they want to call the repository
					repo_name="$(
						ask --required --linger \
							--question="$enter_or_confirm the $where repository name for your Dorothy User Configuration." \
							--default="$repo_name"
					)"
					repo_slug="$repo_user/$repo_name"

					# validate existence
					if [[ $cli == 'gh' ]]; then
						local remote_slug
						remote_slug="$(gh repo view "$repo_slug" --json nameWithOwner | jq -r .nameWithOwner || :)"
						if [[ $remote_slug == "$repo_slug" ]]; then
							repo_validated='yes'
						else
							local conflict_choice
							conflict_choice="$(
								choose --required --label --question="When verifying $repo_slug it redirected to $repo_slug. What do you want to do?" -- \
									create "Create a new repository at $repo_slug" \
									redirect "Use $repo_slug and have it redirect for the time being" \
									rename "Rename $remote_slug to $repo_slug" \
									change "Discard the missing $repo_slug and use the existing $remote_slug instead"
							)"
							# act on the choice
							if [[ $conflict_choice == 'create' ]]; then
								:
							elif [[ $conflict_choice == 'redirect' ]]; then
								repo_validated='yes'
							elif [[ $conflict_choice == 'rename' ]]; then
								if gh repo rename "$remote_slug" "$repo_slug"; then
									repo_validated='yes'
								else
									echo-style --warning='Failed to rename the repository. Will create a new one instead.'
								fi
							elif [[ $conflict_choice == 'change' ]]; then
								repo_user="${remote_slug%/*}"
								repo_name="${remote_slug#*/}"
								repo_slug="$repo_user/$repo_name"
								repo_validated='yes'
							fi
						fi
					elif [[ $cli == 'glab' ]]; then
						if glab repo view "$repo_name" >/dev/null; then
							repo_validated='yes'
						fi
					elif fetch --ok "https://$where.com/$repo_user/$repo_name"; then
						repo_validated='yes'
					elif confirm --linger --bool --ppid=$$ -- "Unable to validate the repository exists, are you sure that it does?" "Go to https://$where.com/$repo_user/$repo_name and verify it exists."; then
						repo_validated='yes'
					fi

					# if existence couldn't be validated, create it
					if [[ $repo_validated == 'no' ]]; then
						if [[ $cli == 'gh' ]]; then
							if gh repo create "$repo_name" --description "$repo_description" --homepage "$dorothy_homepage" --public --confirm --enable-wiki=false; then
								repo_validated='yes'
							fi
						elif [[ $cli == 'glab' ]]; then
							# @todo untested
							if glab repo create "$repo_name" --description "$repo_description" --public; then
								repo_validated='yes'
							fi
						else
							if [[ $where == 'github' ]]; then
								open 'https://github.com/new'
							elif [[ $where == 'gitlab' ]]; then
								open 'https://gitlab.com/projects/new#blank_project'
							fi
							question="$(
								cat <<-EOF
									Create a $where repository for your Dorothy User Configuration using the following details:

									Repository name: $(echo-style --code="$repo_name")
									Description: $(echo-style --code="$repo_description")
									Visibility: $(echo-style --code='Public')
									Initialize with: $(echo-style --code='keep everything unchecked')

									Once created, enter its slug (owner/repo):
								EOF
							)"
							repo_slug="$(
								ask --linger --default="$repo_slug" --question="$question"
							)"
							repo_user="${repo_slug%/*}"
							repo_name="${repo_slug#*/}"
						fi
					fi
					enter_or_confirm='Confirm'
				done

				# it's finally validated
				repo_url="https://$where.com/$repo_slug"
			elif [[ $where == 'custom' ]]; then
				repo_url="$(
					ask --linger --default="$repo_slug" 'Enter the repository clone URL for your Dorothy User Configuration:' 'e.g. git@github.com:balupton/dotfiles.git' 'e.g. https://github.com/balupton/dotfiles.git'
				)"
			fi

			# if we have a repo url, then clone it
			if [[ -n $repo_url ]]; then
				# check if it is strongbox

				# get the repository git url in the preferred protocol
				repo_git_url="$(git-helper protocol-format -- "$repo_url")"

				# check if it is a strongbox instance
				if __git_init_and_fetch "$DOROTHY/user" "$repo_git_url"; then
					# check for strongbox
					local strongbox_keyid
					strongbox_keyid="$(git-helper --path="$DOROTHY/user" get-remote-file -- '.strongbox-keyid')"
					if [[ -n $strongbox_keyid ]]; then
						echo-style --notice='Strongbox repository detected.'
						local local_strongbox_keyring local_ip local_user
						local_strongbox_keyring="$HOME/.strongbox_keyring"
						local_user="$(whoami)"
						local_ip="$(what-is-my-ip local | echo-first-line --stdin || :)"
						setup-util-strongbox
						cat <<-EOF
							$(echo-style --notice2='Your Strongbox keyring on this machine is missing the Strongbox keyid for your specified Dorothy user configuration repository:')

							Dorothy User Configuration Repository: $(echo-style --code="$repo_git_url")
							Dorothy User Configuration Strongbox keyid: $(echo-style --code="$strongbox_keyid")
							This Machine's Strongbox keyring: $(echo-style --code="$local_strongbox_keyring")
							This Machine's User: $(echo-style --code="$(whoami)")
							This Machine's Local IP: $(echo-style --code="$local_ip")
							Strongbox Documentation: $(echo-style --code='https://github.com/uw-labs/strongbox')
							Dorothy's Strongbox Documentation: $(echo-style --code="$the_strongbox_url")

							To manually edit your Strongbox keyring entry on this machine, run the following in a new terminal window attached to this machine:
							$(echo-style --code="$(edit --dry "$local_strongbox_keyring")")

							If VNC is enabled on this machine, run the following on your primary machine to then manually copy the Strongbox keyring to this machine:
							$(echo-style --code='cat ~/.strongbox_keyring')
							$(echo-style --code="open vnc://$local_ip")

							If SSH is enabled on this machine, run the following on your primary machine to copy the Strongbox keyring to this machine:
							$(echo-style --code="cpr -- \"\$HOME/.strongbox_keyring\" \"${local_user}@${local_ip}:${local_strongbox_keyring}\"")

							To enable SSH on this machine:
							macOS via: $(echo-style --code='System Preferences > Sharing > Remote Login.')
							Linux via: $(echo-style --code="bash -ic \"\$(curl -fsSL '$dorothy_worker_run')\" -- setup-util-ssh")

							Alternative methods to copy the Strongbox keyring to this machine include:
							Using Croc: https://github.com/schollz/croc?tab=readme-ov-file#usage
							$(echo-style --code="bash -ic \"\$(curl -fsSL '$dorothy_worker_run')\" -- setup-util-croc")
							Using Magic Wormhole: https://magic-wormhole.readthedocs.io/en/latest/welcome.html#example
							$(echo-style --code="bash -ic \"\$(curl -fsSL '$dorothy_worker_run')\" -- setup-util-magic-tunnel")
							Using Termscp: https://termscp.veeso.dev/user-manual.html
							$(echo-style --code="bash -ic \"\$(curl -fsSL '$dorothy_worker_run')\" -- setup-util-termscp")

						EOF
						# don't bother with any confirmations, such is unnecessary complexity for the UX
						while ! grep --quiet --fixed-strings --regexp="$strongbox_keyid" -- "$local_strongbox_keyring"; do
							waiter --timeout=10 --message="$(echo-style --notice2="Waiting %s before checking again for the required Strongbox configuration...")"
						done
						echo-style --good2='Your Strongbox keyring is now configured correctly, continuing with clone.'
					fi
					# continue with the clone
					git-helper --path="$DOROTHY/user" update -- --remote-url="$repo_git_url"
				fi

				# do the clone
				repo_git_url="$(git-helper protocol-format -- "$repo_url")"
				if git clone "$repo_git_url" "$DOROTHY/user"; then
					echo-style --green+bold="$repo_git_url" --green=' successfully cloned to ' --green+bold="$DOROTHY/user"
				else
					echo-style --yellow+bold="$repo_git_url" --yellow=' failed to clone to ' --yellow+bold="$DOROTHY/user"
					echo-style --yellow='We will manually initialise instead.'
				fi
			else
				echo-style --yellow='No git repository URL provided, we will manually initialise instead.'
			fi

			# if we haven't initialised, then manually initialise
			if [[ ! -d "$DOROTHY/user/.git" ]]; then
				__git_init "$DOROTHY/user"
				echo-style --yellow='Manually initialised git repository at ' --yellow+bold="$DOROTHY/user"
			fi
		}
		function update_user {
			echo-style --h2="Updating the Dorothy user configuration at $DOROTHY/user"
			if ! git-helper --path="$DOROTHY/user" --verify update; then
				__print_lines '...Dorothy user configuration was unable to be updated, you will have to figure this out later...'
				echo-style --n2="Updating the Dorothy user configuration at $DOROTHY/user"
			else
				echo-style --g2="Updating the Dorothy user configuration at $DOROTHY/user"
			fi
		}

		# update or install the user configuration based on its presence
		if [[ -d "$DOROTHY/user" ]]; then
			# it already exists, so update it
			update_user
		else
			# it doesn't exist, so install it
			install_user
		fi

		# move if necessary, and fix permissions
		relocate_user_if_necessary

		# ensure structure is correct
		adjust_user_configuration
	}

	function adjust_user_configuration {
		local file who name url header

		# create essential directories
		__mkdirp \
			"$DOROTHY/user/commands.local" \
			"$DOROTHY/user/commands" \
			"$DOROTHY/user/config.local" \
			"$DOROTHY/user/config"

		# ensure README.md mentions dorothy, such that [git-helper is-dorothy] works, such that the repository is successfully identified as a Dorothy User Configuration repository when installing it next time
		if ! git-helper --path="$DOROTHY/user" is-dorothy -- --no-remote; then
			# README.md does not mention dorothy, time to add it
			file="$DOROTHY/user/README.md"
			name="$(get-profile name || get-profile username || :)"
			url="$(get-profile url || :)"
			if [[ -n $name && -n $url ]]; then
				who="[${name}'s](${url})"
			elif [[ -n $name ]]; then
				who="${name}'s"
			else
				who='my'
			fi
			header="$(
				cat <<-EOF
					# Dorothy User Configuration

					This is $who user configuration for the [Dorothy]($dorothy_homepage) dotfile ecosystem.
				EOF
			)"
			if [[ ! -f $file ]]; then
				# file doesn't exist, so just add the header to the file
				__print_lines "$header" >"$file"
			else
				# add the header to the start of the file
				printf '%s\n\n%s' "$header" "$(<"$file")" >"$file"
			fi
		fi

		# gitignore
		config-helper --file="$DOROTHY/user/.gitignore" -- \
			--find='commands.local[/]' --replace='commands.local/' \
			--find='config.local[/]' --replace='config.local/'
	}

	# =====================================
	# Actions: Install, Update, Trial

	function act_install {
		# process arguments
		local item option_clean='no' option_skip_install='no' option_user=''
		while [[ $# -ne 0 ]]; do
			item="$1"
			shift
			case "$item" in
			'--clean' | '--clean=yes') option_clean='yes' ;;
			'--no-clean' | '--clean=no') option_clean='no' ;;
			'--skip-install') option_skip_install='yes' ;;
			'--user='*) option_user="${item#*=}" ;;
			'--'*) help "An unrecognised flag was provided: $item" ;;
			*) help "An unrecognised argument was provided: $item" ;;
			esac
		done

		# pre-requisites
		if [[ $option_skip_install == 'no' ]]; then
			ensure_dorothy_configured
		fi
		assert_dorothy_configured

		# action
		echo-style --h1='Install Dorothy'
		if [[ $option_skip_install == 'no' ]]; then
			ensure_minimal_dependencies
			ensure_machine_configured
			ensure_user_configured "$option_user"
		fi
		setup-shell --setup --clean="$option_clean"

		# log success
		echo-style --g1='Install Dorothy'
		echo-style --success='Dorothy is now setup.' ' ' --notice='Restart your terminal.'
	}

	function act_uninstall {
		# pre-requisites
		ensure_dorothy_configured
		assert_dorothy_configured

		# action
		echo-style --h1='Uninstall Dorothy'
		ensure_minimal_dependencies
		setup-shell --deconfigure

		# log success and instructions for removal
		echo-style --g1='Uninstall Dorothy'
		echo-style --success='Dorothy is now uninstalled.' ' ' --notice='Restart your terminal.'
		local paths=()
		if [[ -d $DOROTHY ]]; then
			paths+=("$DOROTHY")
		fi
		if [[ -d "$DOROTHY/user" ]]; then
			paths+=("$(__fs_realpath -- "$DOROTHY/user")")
		fi
		if [[ ${#paths[@]} -ne 0 ]]; then
			__print_lines 'Once you have restarted your terminal, you can delete Dorothy by removing the following paths:'
			__print_lines "${paths[@]}"
		fi
	}

	function act_update {
		# pre-requisites
		assert_dorothy_configured

		# action
		echo-style --h1='Update Dorothy'
		ensure_minimal_dependencies
		ensure_dorothy_configured
		ensure_user_configured
		echo-style --h2='Correct Dorothy Permissions'
		ensure_permissions_configured # needed as new commands wouldn't be executable otherwise
		dorothy-warnings clear        # remove any warnings that are no longer relevant
		echo-style --g2='Correct Dorothy Permissions'
		echo-style --g1='Update Dorothy'
	}

	# don't use [sh], as [sh] is [dash] on ubuntu, and [dash] doesn't support the [--...] args
	function act_repl {
		# process arguments
		local item shell='' theme=''
		while [[ $# -ne 0 ]]; do
			item="$1"
			shift
			case "$item" in
			'--shell='*) shell="${item#*=}" ;;
			'--theme='*) theme="${item#*=}" ;;
			'--'*) help "An unrecognised flag was provided: $item" ;;
			*) help "An unrecognised argument was provided: $item" ;;
			esac
		done

		# pre-requisites
		ensure_dorothy_configured
		assert_dorothy_configured

		# action
		ensure_minimal_dependencies

		# ask
		if [[ -z $shell ]]; then
			shell="$(
				choose --linger --required \
					--question='Which shell to use?' -- \
					bash fish nu
			)"
		fi

		# act, installing the shell if it is missing
		if [[ $shell == 'bash' ]]; then
			setup-util-bash --quiet
			# [bash --rcfile] works but not within a [--rcfile]
			# [--login] ignores [--rcfile]
			# this is not a true login shell, as [$0] is not [-bash], as such loading [init.sh] is incompatible
			# without [env -i] which would wipe [USER/HOME/DOROTHY], then this shell will inherit exports from the current environment
			export DOROTHY_RUN=yes
			"$shell" --rcfile <(
				cat <<-EOF
					#!/usr/bin/env bash
					DOROTHY_FORCE_LOAD=yes
					DOROTHY_THEME_OVERRIDE='$theme'
					. '$DOROTHY/init.sh'
					echo-style 'Your are now using the ' --invert='$ACTIVE_POSIX_SHELL' ' shell with Dorothy loaded from ' --code='$DOROTHY' \$'\n' 'Use the ' --code='exit' ' command to return to your parent shell.' \$'\n' 'Use ' --code='dorothy commands' ' to see available commands.'
				EOF
			)
			return
		elif [[ $shell == 'nu' ]]; then
			setup-util-nu --quiet
			export DOROTHY_RUN=yes
			"$shell" --interactive --login --no-config-file --execute "$(
				cat <<-EOF
					#!/usr/bin/env nu
					\$env.DOROTHY_THEME_OVERRIDE = '$theme'
					source '$DOROTHY/init.nu'
					echo-style 'Your are now using the ' --invert='nu' ' shell with Dorothy loaded from ' --code='$DOROTHY' "\n" 'Use the ' --code='exit' ' command to return to your parent shell.' "\n" 'Use ' --code='dorothy commands' ' to see available commands.'
				EOF
			)"
			return
		elif [[ $shell == 'fish' ]]; then
			setup-util-fish --quiet
			export DOROTHY_RUN=yes
			"$shell" --interactive --login --no-config --init-command="$(
				cat <<-EOF
					#!/usr/bin/env fish
					set DOROTHY_THEME_OVERRIDE '$theme'
					source '$DOROTHY/init.fish'
					echo-style 'Your are now using the ' --invert='fish' ' shell with Dorothy loaded from ' --code='$DOROTHY' \n 'Use the ' --code='exit' ' command to return to your parent shell.' \n 'Use ' --code='dorothy commands' ' to see available commands.'
				EOF
			)"
			return
		else
			echo-error 'Cannot use ' --invert="$shell" ' as that shell does not support REPLs with custom configuration.'
			return 93 # EPROTONOSUPPORT 93 Protocol not supported
		fi
	}

	function act_run {
		# process arguments
		local item args=()
		while [[ $# -ne 0 ]]; do
			item="$1"
			shift
			case "$item" in
			'--')
				args+=("$@")
				shift $#
				break
				;;
			'--'*) help "An unrecognised flag was provided: $item" ;;
			*) help "An unrecognised argument was provided: $item" ;;
			esac
		done

		# pre-requisites
		{
			ensure_dorothy_configured
			assert_dorothy_configured
			ensure_minimal_dependencies
		} >&2 # don't pollute stdout, don't use /dev/tty as tty doesn't exist on CI

		# now that our environment is setup, run the command
		export DOROTHY_RUN=yes
		command "${args[@]}" # eval
		return
	}

	# =====================================
	# Actions: ...

	function act_commands {
		# pre-requisites
		assert_dorothy_configured

		local paths=()
		mapfile -t paths < <(echo-if-present -- "$DOROTHY/commands" "$DOROTHY/commands.beta" "$DOROTHY/user/commands" "$DOROTHY/user/commands.local")
		setup-util-eza --quiet --optional
		if __command_exists eza; then
			eza "${paths[@]}"
		else
			ls "${paths[@]}"
		fi
	}

	function act_permissions {
		# pre-requisites
		assert_dorothy_configured

		# action
		echo-style --h1='Correct Dorothy Permissions'
		# ensure_minimal_dependencies <-- if they are running this, then we assume they are already setup
		ensure_permissions_configured
		echo-style --g1='Correct Dorothy Permissions'
	}

	function act_edit {
		# pre-requisites
		assert_dorothy_and_user_cloned

		# action
		echo-style --h1='Edit Dorothy'
		# ensure_minimal_dependencies <-- if they are editing, then we assume they are already setup
		ensure_permissions_configured
		if [[ "$(edit --dry --only-editor)" == 'code' ]]; then
			edit -- "$DOROTHY/.vscode/workspace.code-workspace"
		else
			edit -- "$DOROTHY"
		fi
		echo-style --g1='Edit Dorothy'
	}

	function act_review {
		# pre-requisites
		assert_dorothy_and_user_cloned

		# action
		echo-style --h1='Review Dorothy'
		ensure_minimal_dependencies
		ensure_permissions_configured
		git-helper --path="$DOROTHY/user" review || :
		git-helper --path="$DOROTHY" review || :
		echo-style --g1='Review Dorothy'
	}

	function act_theme {
		# pre-requisites
		assert_dorothy_and_user_cloned

		# action
		echo-style --h1='Select Dorothy Theme'
		ensure_minimal_dependencies

		# features
		local themes theme files
		source "$DOROTHY/sources/config.sh"

		# prepare
		mapfile -t files < <(fs-path --no-parents --no-extensions -- "$DOROTHY/themes/"*.* "$DOROTHY/user/themes/"*.* | echo-unique --stdin)
		themes=(
			system
			"${files[@]}"
		)

		# ask
		theme="$(
			choose --linger --required \
				--question='Which theme to use?' -- \
				"${themes[@]}"
		)"

		# apply
		source "$DOROTHY/sources/config.sh"
		dorothy-config 'interactive.sh' -- \
			--find='export DOROTHY_THEME=(.*)' --replace="export DOROTHY_THEME=$(echo-escape-bash -- "$theme")"
		if [[ -f "$DOROTHY/user/config/interactive.nu" ]]; then
			# dorothy-config 'interactive.nu' -- --string-find="\$env.DOROTHY_THEME" --string-replace="\$env.DOROTHY_THEME = $(echo-quote -- "$theme")"
			# ^ don't use that, as theming will always be in the config not config.local
			# ^ at some point, [dorothy-config] should use [config-edit]
			config-edit --file="$DOROTHY/user/config/interactive.nu" --needle="\$env.DOROTHY_THEME" --line="\$env.DOROTHY_THEME = $(echo-quote -- "$theme")" --add
		fi
		if [[ -f "$DOROTHY/user/config/interactive.xsh" ]]; then
			config-edit --file="$DOROTHY/user/config/interactive.xsh" --needle="\$DOROTHY_THEME" --line="\$DOROTHY_THEME = $(echo-quote -- "$theme")" --add
		fi
		if [[ -f "$DOROTHY/user/config/interactive.elv" ]]; then
			config-edit --file="$DOROTHY/user/config/interactive.elv" --needle="DOROTHY_THEME" --line="set-env DOROTHY_THEME $(echo-quote -- "$theme")" --add
		fi

		# log
		echo-style --success='Configuration change applied, ' --notice='restart your terminal for the change to take effect.'
		echo-style --g1='Select Dorothy Theme'
	}

	function act_dev {
		# pre-requisites
		assert_dorothy_configured

		# action
		echo-style --h1='Dorothy Development'
		if is-ci; then
			ensure_development_dependencies --no-quiet
		else
			# local dev, upgrade and add git hook
			ensure_development_dependencies --no-quiet --upgrade
			printf 'trunk check --ci --no-progress --trigger=git-push\n' >"$DOROTHY/.git/hooks/pre-push"
		fi

		# versions
		eval-helper --verbose --wrap -- bash --version || :
		eval-helper --verbose --wrap -- prettier --version || :
		eval-helper --verbose --wrap -- rg --version || :
		eval-helper --verbose --wrap -- shellcheck --version || :
		eval-helper --verbose --wrap -- shfmt --version || :
		eval-helper --verbose --wrap -- trunk --version || :

		# log
		echo-style --g1='Dorothy Development'
	}

	function act_format {
		# pre-requisites
		assert_dorothy_configured

		# action
		echo-style --h1='Dorothy Format'
		ensure_development_dependencies

		# adjust for ci
		local args=()
		if is-ci; then
			args+=('--no-progress') # don't use [--ci] as it doesn't apply fixes, and our CI suite expects fixes
		fi

		# on dorothy
		echo-style --h3="$DOROTHY"
		(
			cd "$DOROTHY"
			# format
			trunk fmt --all "${args[@]}"
		)
		echo-style --g3="$DOROTHY"

		# on user configuration
		if [[ -d "$DOROTHY/user/.trunk" ]]; then
			echo-style --h3="$DOROTHY/user"
			(
				cd "$DOROTHY/user"
				# format
				trunk fmt --all "${args[@]}"
			)
			echo-style --g3="$DOROTHY/user"
		fi

		echo-style --g1='Dorothy Format'
	}

	function act_check {
		# pre-requisites
		assert_dorothy_configured

		# action
		echo-style --h1='Dorothy Checks'
		ensure_development_dependencies

		# adjust for ci
		local args=()
		if is-ci; then
			args+=('--ci' '--no-progress')
		fi

		# on dorothy
		echo-style --h3="$DOROTHY"
		(
			cd "$DOROTHY"
			# check
			trunk check --all "${args[@]}"
		)
		echo-style --g3="$DOROTHY"

		# on user configuration
		if [[ -d "$DOROTHY/user/.trunk" ]]; then
			echo-style --h3="$DOROTHY/user"
			(
				cd "$DOROTHY/user"
				# check
				trunk check --all "${args[@]}"
			)
			echo-style --g3="$DOROTHY/user"
		fi

		echo-style --g1='Dorothy Checks'
	}

	function act_lint {
		# pre-requisites
		assert_dorothy_configured

		# action
		echo-style --h1='Dorothy Lint'

		# upgrade trunk?
		local upgrade_linting='no'
		if confirm --negative --ppid=$$ -- 'Upgrade lint tooling?'; then
			upgrade_linting='yes'
		fi

		# dependencies
		ensure_development_dependencies

		# adjust for ci
		local args=()
		if is-ci; then
			args+=('--ci' '--no-progress')
		fi

		# prepare scan paths
		local commands filepath scan_paths=(
			"$DOROTHY/commands/"
			"$DOROTHY/commands.beta/"
			"$DOROTHY/commands.deprecated/"
		)
		if [[ -d "$DOROTHY/user" ]]; then
			if [[ -d "$DOROTHY/user/commands" ]]; then
				scan_paths+=("$DOROTHY/user/commands/")
			fi
			if [[ -d "$DOROTHY/user/commands.local" ]]; then
				scan_paths+=("$DOROTHY/user/commands.local/")
			fi
		fi

		# @todo search for unsafe [[ .. ]]  usage
		# ^\s+\[\[.+\](\s*#.+)?$

		# check for unsafe function calls, by checking for missing __* safety convention
		# ((if|[&][&]|[|][|]|[!])\s)[a-z]+_[a-z_]+
		# \s[a-z]+_[a-z_]+( ([&][&]|[|][|]))
		# @todo improve upon this by checking if the function also calls function, as any calling of a function must also be safe
		# Unfortunately, it seems [^=] does not work in ((if|[&][&]|[|][|]|[!])\s)[a-z]+_[a-z_]+[^=]
		# To avoid matching: OR a_var=$?
		# So for now, just modify the var names even though it is unnecessary.
		local unsafe_regexp='((if|[&][&]|[|][|]|[!])\s)[a-z]+_[a-z_]+|\s[a-z]+_[a-z_]+( ([&][&]|[|][|]))' unsafe_contents='' unsafe_bundle='' unsafe_count=0
		mapfile -t commands < <(rg --files-with-matches --sortr modified --regexp="$unsafe_regexp" "${scan_paths[@]}")
		for filepath in "${commands[@]}"; do
			if [[ $filepath == "$DOROTHY/commands/dorothy-internals" ]]; then
				continue
			fi
			unsafe_contents="$(rg --color always --regexp="$unsafe_regexp" "$filepath" | grep --invert-match --fixed-strings --regexp='for ' || :)"
			if [[ -z $unsafe_contents ]]; then
				continue
			fi
			unsafe_count="$((unsafe_count + 1))"
			unsafe_bundle+="$(echo-style --element="$filepath")"$'\n'"$unsafe_contents"$'\n'"$(echo-style --/element="$filepath")"$'\n'
		done
		if [[ $unsafe_count -ne 0 ]]; then
			echo-style --error='The following commands have unsafe function calls:' $'\n' "$unsafe_bundle" --e1='Dorothy Lint'
			return 1
		fi

		# on dorothy
		echo-style --h3="$DOROTHY"
		(
			cd "$DOROTHY"
			# upgrade
			if [[ $upgrade_linting == 'yes' ]]; then
				if __command_exists -- npx npm; then
					npx npm-check-updates -u
					npm install
				fi
				trunk upgrade
			fi
			# format and check
			# the below is currently broken, so commit it out
			# # if balupton, update meta with auth
			# if [[ $USER == 'balupton' ]] && __command_exists -- npm; then
			# 	github-auth -- npm run our:meta # @todo currently broken
			# 	# don't call [prettier] directly here to reformat, as that is handled by trunk, and trunk has different formatting rules, just have this before [trunk fmt]
			#  fi
			trunk fmt --all "${args[@]}"
			trunk check --all "${args[@]}"
			# update meta, only do this for balupton, as we can't guarantee up to date Node.js, as this requires Node.js 20
			# https://github.com/bevry/dorothy/actions/runs/7636822585/job/20804540714#step:13:14
		)
		echo-style --g3="$DOROTHY"

		# on user configuration
		if [[ -d "$DOROTHY/user/.trunk" ]]; then
			echo-style --h3="$DOROTHY/user"
			(
				cd "$DOROTHY/user"
				# upgrade
				if [[ $upgrade_linting == 'yes' ]]; then
					if __command_exists -- npx npm; then
						npx npm-check-updates -u
						npm install
					fi
					trunk upgrade
				fi
				# format and check
				trunk fmt --all "${args[@]}"
				trunk check --all "${args[@]}"
			)
			echo-style --g3="$DOROTHY/user"
		fi

		echo-style --g1='Dorothy Lint'
	}

	function act_test {
		# pre-requisites
		assert_dorothy_configured

		# options
		local item only=() skips=('dorothy' 'bash.bash') only_current_bash_version=() bash_binaries=() bash_custom='no'
		while [[ $# -ne 0 ]]; do
			item="$1"
			shift
			case "$item" in
			'--bash='*)
				bash_binaries+=("${item#*=}")
				bash_custom='yes'
				;;
			'--skip='*) skips+=("${item#*=}") ;;
			'--only='*) only+=("${item#*=}") ;;
			'--')
				only+=("$@")
				shift $#
				break
				;;
			'--'*)
				help "An unrecognised flag was provided: $item"
				return
				;;
			*) only+=("$item") ;;
			esac
		done

		# action
		echo-style --h1='Dorothy Tests'
		source "$DOROTHY/sources/ripgrep.bash"

		# before we begin, trim the bash.bash:eval_capture cache, and our own cache
		export DEBUG=yes DEBUG_TARGET="$XDG_CACHE_HOME/dorothy-debug.log"
		__mkdirp "$XDG_CACHE_HOME/dorothy"
		rm -rf -- "$XDG_CACHE_HOME/dorothy-try" "$DEBUG_TARGET"

		# on CI set the modification times to reflect those from the git repository, rather than from clone
		if is-ci; then
			git-helper --path="$DOROTHY" umt
		fi

		# can't figure out how to sort array values
		# # sort all array values in the cspell.json configuration file
		# if __command_exists -- jq; then
		# 	# jq --sort-keys . "$DOROTHY/cspell.json" | echo-write --atomic -- "$DOROTHY/cspell.json"
		# fi

		# run relevant debugs
		# __print_lines '' 'debug-terminal-stdin:'
		# debug-terminal-stdin || :
		# __print_lines '' 'debug-terminal-tty:'
		# debug-terminal-tty || :
		# __print_lines ''

		# fetch the other bash locations to test against
		if [[ ${#bash_binaries[@]} -eq 0 ]]; then
			mapfile -t bash_binaries < <(
				{
					type -pa bash
					expand-path -- "$XDG_BIN_HOME/bash-*"
				} | echo-unique --stdin
			)
		fi

		# prepare scan paths
		local commands filepath filename bash_binary failed failures=() warnings=() scan_paths=(
			"$DOROTHY/commands/"
			"$DOROTHY/commands.beta/"
			# "$DOROTHY/commands.deprecated/" <-- don't run deprecated tests, as that will cause deprecated warnings, which cases dorothy-warnings test to fail
		)
		if [[ -d "$DOROTHY/user" ]]; then
			if [[ -d "$DOROTHY/user/commands" ]]; then
				scan_paths+=("$DOROTHY/user/commands/")
			fi
			if [[ -d "$DOROTHY/user/commands.local" ]]; then
				scan_paths+=("$DOROTHY/user/commands.local/")
			fi
		fi

		# run tests on commands that have them
		if [[ ${#only[@]} -ne 0 ]]; then
			local scan_path only_command
			for scan_path in "${scan_paths[@]}"; do
				if [[ -d $scan_path ]]; then
					for only_command in "${only[@]}"; do
						only_command="$scan_path$only_command"
						# slash is included in the var
						if [[ -f $only_command ]]; then
							commands+=("$only_command")
						fi
					done
				fi
			done
		else
			mapfile -t commands < <(rg --files-with-matches --sortr modified --fixed-strings --regexp='--test' "${scan_paths[@]}")
		fi
		for filepath in "${commands[@]}"; do
			filename="$(basename -- "$filepath")"
			failed='no'

			# check if we want to skip this test
			if __is_within "$filename" 'skips'; then
				continue
			fi

			# run the test on the current bash version
			if [[ $bash_custom == 'no' ]]; then
				# don't bother with flakey tests, see the blame, we had it, but it resembles a different issue, solve it being flakey instead
				eval-helper --verbose --wrap -- "$filepath" --test || {
					failures+=("$filepath --test")
					failed='yes'
				}
			fi

			# run again, ensuring this specific bash version is preferred
			if [[ $failed == 'no' ]]; then
				for bash_binary in "${bash_binaries[@]}"; do
					eval-helper --verbose --wrap -- debug-bash --bash="$bash_binary" -- "$filepath" --test || {
						if [[ $bash_custom == 'no' ]] && __is_within "$filename" 'only_current_bash_version'; then
							echo-style --warning='This test was expected to fail on other bash versions, marking as only warning instead of failure.'
							warnings+=("$bash_binary $filepath --test")
						else
							failures+=("$bash_binary $filepath --test")
						fi
					}
				done
			fi
		done

		# check for warnings
		if dorothy-warnings check; then
			dorothy-warnings list
			failures+=('dorothy-warnings')
		fi

		# check for eval-capture failed cleaning
		if is-nonempty-directory -- "$XDG_CACHE_HOME/dorothy-try"; then
			failures+=($'bash.bash:__try had leftovers: \n'"$(fs-structure -- "$XDG_CACHE_HOME/dorothy-try")")
		fi

		# check for debug lines
		if [[ -n ${DEBUG_TARGET-} && -f $DEBUG_TARGET ]]; then
			failures+=($'bash.bash:__debug_lines had output: \n'"$(echo-file -- "$DEBUG_TARGET")")
		fi

		# check for warnings
		if [[ ${#warnings[@]} -ne 0 ]]; then
			echo-style --warning='The following tests were warnings:'
			__print_lines "${warnings[@]}"
		fi

		# check for failures
		if [[ ${#failures[@]} -ne 0 ]]; then
			echo-style --error='The following tests were failures:'
			__print_lines "${failures[@]}"
			echo-style --e1='Dorothy Tests'
			return 1
		fi

		# log
		echo-style --g1='Dorothy Tests'
	}

	function act_todos {
		# pre-requisites
		assert_dorothy_configured
		# ^ no need for user config for todos

		# action
		echo-style --h1='Dorothy Todos'
		source "$DOROTHY/sources/ripgrep.bash"

		# verbose about command conventions and support
		local scan_paths=(
			"$DOROTHY/commands/"
			"$DOROTHY/commands.beta/"
			"$DOROTHY/sources/"
		)
		function __todos_scan {
			local filepath filename messages file_status success_count=0 fail_count=0 matches
			echo-style --h2="$1" || return
			for filepath in "$DOROTHY/$1/"*; do
				filename="$(basename -- "$filepath")"
				messages=()
				file_status=0

				# skip tests on these
				if [[ $filename == 'dorothy' || $filename == *.* ]]; then
					continue
				fi

				# does the file have tests
				if rg --quiet --fixed-strings --regexp='--test' "$filepath"; then
					messages+=(
						' '
						--success='has tests.'
					)
				elif [[ $filename != *setup-* ]]; then # ignore missing tests on setup- files
					file_status=1
					messages+=(
						' '
						--red='missing tests.'
					)
				fi

				# does the file use a subshell
				if ! rg --quiet --regexp="${filename//-/_}[_]?[(][)] [(]" "$filepath"; then
					file_status=1
					messages+=(
						' '
						--cyan='no subshell wrapper.'
					)
				fi

				# does the file have help
				if rg --quiet --fixed-strings --regexp='function help {' "$filepath"; then
					:
				elif [[ $filename != *setup-util-* ]]; then # ignore missing help on setup-util- files
					file_status=1
					messages+=(
						' '
						--blue='no help.'
					)
				fi

				# is the file used by other commands? excludes [cmd] and `cmd` usage which are in comments and messages
				matches="$(rg --files-with-matches --regexp="[^\[\`]${filename}" "${scan_paths[@]}" || :)"
				if [[ -z $matches || $matches == "$filepath" ]]; then
					messages+=(
						' '
						--magenta='is not used anywhere besides itself.'
					)
				fi

				# does the file have todos?
				if rg --quiet --fixed-strings --regexp='@todo' "$filepath"; then
					messages+=(
						' '
						--yellow='has todos.'
					)
				fi

				# log
				if [[ $file_status -eq 0 ]]; then
					success_count="$((success_count + 1))"
				else
					fail_count="$((fail_count + 1))"
				fi
				echo-style --element/="$filename" --status="$file_status" "${messages[@]}"
			done
			if [[ $fail_count -eq 0 ]]; then
				echo-style --g2="$1" ' ' --code-good1="$success_count" --good1=' successes' || return
			else
				echo-style --e2="$1" ' ' --code-good1="$success_count" --good1=' successes' ' ' --code-error1="$fail_count" --error1=' failures' || return
				return 1
			fi
		}
		local __command_status=0
		__todos_scan 'commands' || __command_status=1
		__todos_scan 'commands.beta' || :

		# log
		if [[ $__command_status -eq 0 ]]; then
			echo-style --g1='Dorothy Todos'
		else
			echo-style --e1='Dorothy Todos'
			return "$__command_status"
		fi
	}

	# =====================================
	# Act

	# ensure the prerequisites are installed in case the user skipped them
	ensure_prereq_dependencies >&2 # don't pollute stdout, don't use /dev/tty as tty doesn't exist on CI

	# all helpers are defined, and argument overrides are handled
	# so prepare the local environment context with what is necessary for dorothy
	# such that the following [choose] will be found
	prepare_dorothy >&2 # don't pollute stdout, don't use /dev/tty as tty doesn't exist on CI

	if [[ "$(type -t "act_$action")" == 'function' ]]; then
		"act_$action" "${option_args[@]}"
		return
	else
		echo-style --stderr --error1="Action not yet implemented: " --code-error1="$action"
		return 78 # ENOSYS 78 Function not implemented
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	dorothy_ "$@"
fi
