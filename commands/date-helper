#!/usr/bin/env bash

function date_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Outputs the date in a specific format, defaulting to local ISO time.

			USAGE:
			date-helper [--options] [-- ...<arg>]

			OPTIONS:
			--format=...
			    Set the outut format to use, e.g. '+%Y-%m-%d'

			--month-ago | --monthago
			    Makes the output date one month in the past.

			--next-year | --nextyear
			    Makes the output date one year in the future.

			--adguard
			    Sets the output format to be compatible with AdGuard rules, e.g. 22 Feb 2022 23:11 UTC

			--iso
			    Sets the output format to be compatible with ISO 8601, e.g. 2022-02-22T23:11:11Z

			--gpg
			    Sets the output format to be compatible with GPG, e.g. 2022-02-22

			-- ...<arg>
			    Forwards to the argument to the native date command.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_args=() option_format='' option_utc='' option_next_year='no' option_month_ago='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--format='*) option_format="${item#*=}" ;;
		'--no-utc'* | '--utc'*)
			option_utc="$(get-flag-value --affirmative --fallback="$option_utc" -- "$item")"
			;;
		'--monthago' | '--month-ago') option_month_ago='yes' ;;
		'--nextyear' | '--next-year') option_next_year='yes' ;;
		'--ytd')
			option_utc='yes'
			option_format='+%Y%m%d' # YYYYMMDD
			;;
		'--gpg')
			option_utc='no'
			option_format='+%Y-%m-%d'
			;;
		'--iso')
			# https://stackoverflow.com/a/7216394/130638
			option_utc='yes'
			option_format='+%Y-%m-%dT%H:%M:%SZ'
			;;
			# https://github.com/AdguardTeam/FiltersRegistry/issues/398
		'--adguard')
			option_utc='yes'
			option_format='+%d %b %Y %H:%M UTC'
			;;
		'--unix')
			option_utc='yes'
			option_format='+%s'
			# despite bash docs, $EPOCHSECONDS doesn't exist, at least on macos; furthermore using such would not work as we support other options in tandem
			;;
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	if test "$option_utc" = 'yes'; then
		#  -u      Display or set the date in UTC (Coordinated Universal) time.  By default date displays the time in the time zone described by /etc/localtime or the TZ environment variable.
		option_args+=('-u')
	fi

	local year month
	if test "$option_month_ago" = 'yes'; then
		if is-mac; then
			args+=('-v' '-1m')
		else
			# get the current date, but one month in the past, and work on linux
			month="$(date "+%m")"
			month="$((month - 1))"
			# macos: date -jf "%Y-%m-%d" -f "$(date "+%Y")-$month-$(date "+%d")" "$option_format"
			option_args+=("--date=$(date "+%Y")-$month-$(date "+%d")")
		fi
	fi
	if test "$option_next_year" = 'yes'; then
		if test "$option_month_ago" = 'yes'; then
			help "Cannot use both --month-ago and --next-year"
		fi
		if is-mac; then
			option_args+=('-v' '+1y')
		else
			# get the current date, but one year in the future, and work on linux
			year="$(date "+%Y")"
			year="$((year + 1))"
			# macos: date -jf "%Y-%m-%d" -f "$year-$(date "+%m-%d")" "$option_format"
			option_args+=("--date=$year-$(date "+%m-%d")")
		fi
	fi

	# format
	if test -n "$option_format"; then
		option_args+=("$option_format")
	elif test "${#option_args[@]}" -eq 0; then
		# https://stackoverflow.com/a/34138409/130638
		option_args+=("+%FT%T%z")
	fi
	date "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	date_helper "$@"
fi
