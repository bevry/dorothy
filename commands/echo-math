#!/usr/bin/env bash

function echo_math_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	local inputs=('1 - 1/2' '1 - 1/3' '1 - 1/4')
	local expected_six=$'0.500000\n0.666667\n0.750000'
	local expected_two=$'0.50\n0.67\n0.75'

	if command-exists -- bc; then
		eval-tester --stdout="$expected_six" \
			-- echo-math --tool=bc -- "${inputs[@]}"

		{
			__print_lines "${inputs[@]}"
		} | eval-tester --stdout="$expected_six" \
			-- echo-math --tool=bc --stdin

		eval-tester --stdout="$expected_two" \
			-- echo-math --precision=2 --tool=bc -- "${inputs[@]}"

		{
			__print_lines "${inputs[@]}"
		} | eval-tester --stdout="$expected_two" \
			-- echo-math --precision=2 --tool=bc --stdin
	fi

	if command-exists -- deno; then
		eval-tester --stdout="$expected_six" \
			-- echo-math --tool=deno -- "${inputs[@]}"

		{
			__print_lines "${inputs[@]}"
		} | eval-tester --stdout="$expected_six" \
			-- echo-math --tool=deno --stdin

		eval-tester --stdout="$expected_two" \
			-- echo-math --precision=2 --tool=deno -- "${inputs[@]}"

		{
			__print_lines "${inputs[@]}"
		} | eval-tester --stdout="$expected_two" \
			-- echo-math --precision=2 --tool=deno --stdin
	fi

	echo-style --g1="TEST: $0"
	return 0
)
function echo_math() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Compute a mathmatical expression.

			USAGE:
			echo-math [...options] [--] ...<input>
			echo-lines ...<input> | echo-math [...options]

			OPTIONS:
			--precision=<precision>
			    The number of decimals to round to.
			    Defaults to [6].

			--tool=<tool>
			    The math engine to use.
			    Defaults to [bc] if available, otherwise [deno] if available, otherwise failure.

			$(stdinargs_options_help --)
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_precision=6 option_tool=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--precision='*) option_precision="${item#*=}" ;;
		'--tool='*) option_tool="${item#*=}" ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*) option_args+=("$item") ;;
		esac
	done

	if test -z "$option_tool"; then
		if command-exists -- bc; then
			option_tool='bc'
		elif command-exists -- deno; then
			option_tool='deno'
		fi
	elif ! command-exists -- "$option_tool"; then
		help "Missing math <tool>: $option_tool"
	fi

	# =====================================
	# Action

	# bc: 0 decimals by default
	# bc -l: 20 decimals by default
	# 0. becomes ., hence need for printf
	# awk: 6 decimals by default

	if test "$option_tool" = 'bc'; then
		function on_line {
			local formula="$1"
			printf "%.${option_precision}f\n" "$(bc -l <<<"$formula")"
		}
	elif test "$option_tool" = 'deno'; then
		local deno_script
		deno_script="$(type -P echo-math.ts)"
		function on_line {
			local formula="$1"
			"$deno_script" "$option_precision" "$formula"
		}
	else
		help 'No math engine found.'
		return 1
	fi

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_math_test
	else
		echo_math "$@"
	fi
fi
