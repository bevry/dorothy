#!/usr/bin/env bash

# @todo merge with [config-edit], [config-helper], are all doubling up on this

function dorothy_config_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-style --h1="TEST: $0"

	# prepare
	local context expected_stdout expected_stderr expected_first_result expected_final_result invented_packages \
		filename='setup.bash' \
		filepath="$DOROTHY/user/config/setup.bash" \
		util_packages=(
			curl
			ripgrep
			sd
		)
	context="$(get-random-number)"
	invented_packages=(
		# 0 and 1 prefixes for sorting consistency
		"dorothy-config-testing-value-0-$context"
		"dorothy-config-testing-value-1-$context"
	) \
	expected_stderr="Updated configuration file: $filepath"
	expected_stdout="$(__print_lines "${invented_packages[@]}")"
	expected_first_result="$(
		cat <<EOF
#!/usr/bin/env bash
# do not use \`export\` keyword in this file:
# shellcheck disable=SC2034

# load the default configuration
source "\$DOROTHY/config/setup.bash"

# APK
# Used by \`setup-linux\`
# APK_INSTALL=()

# Apt / apt-get
# Used by \`setup-linux\`
# APT_UNINSTALL=()
# APT_INSTALL=()

# AUR / pamac / pacman / yay / paru / pakku / aurutils
# Used by \`setup-linux\`
# AUR_INSTALL=()

# Flatpak
# Used by \`setup-linux\`
# FLATPAK_INSTALL=()

# RPM / dnf / yum
# Used by \`setup-linux\`
# RPM_INSTALL=()

# Snap
# Used by \`setup-linux\`
# SNAP_INSTALL=()

# Zypper
# Used by \`setup-linux\`
# ZYPPER_INSTALL=()

# macOS App Store / mas / https://github.com/mas-cli/mas
# Used by \`setup-mac-appstore\`
# You can use \`mas list\` and \`mas search\` to find apps
# MAS_INSTALL=() # tuple array of id, label
# MAS_UPGRADE='no'

# Homebrew / brew / https://brew.sh
# Used by \`setup-mac-brew\`
# You can use \`setup-mac-brew --configure\` to configure some of these.
# HOMEBREW_UNTAPS=()
# HOMEBREW_TAPS=()
# HOMEBREW_FORMULAS=()
# HOMEBREW_SLOW_FORMULAS=()
# HOMEBREW_CASKS=()
HOMEBREW_FONTS=(
	'font-cantarell'
	'font-cascadia-code'
	'font-fira-code'
	'font-fira-code-nerd-font'
	'font-fira-mono'
	'font-fira-mono-nerd-font'
	'font-hack' # many editors require this
	'font-hasklig'
	'font-ibm-plex' # many editors require this
	'font-inconsolata-go-nerd-font'
	'font-inter' # many apps require this
	'font-jetbrains-mono'
	'font-jetbrains-mono-nerd-font'
	'font-lato'
	'font-maven-pro'
	'font-monoid'
	'font-montserrat'
	'font-open-sans'
	'font-oxygen'
	'font-oxygen-mono'
	'font-roboto'
	'font-roboto-mono'
	'font-source-code-pro' # many editors require this
	'font-ubuntu'
)
# HOMEBREW_UNINSTALL=()        # for casks and formulas
# HOMEBREW_ENCODING_INSTALL='' # '', 'yes', 'no'

# Golang / go
# Used by \`setup-go\`
# GO_LINTING_INSTALL='' # '', 'yes', 'no'
# GO_INSTALL=()

# Node.js
# Used by \`setup-node\`
# NPM_INSTALL=()
# NODE_VERSIONS=()

# Python
# Used by \`setup-python\`
# PYTHON_INSTALL=()
# PIP_INSTALL=()
# PYTHON2_PIP_INSTALL=()
# PYTHON3_PIP_INSTALL=()
# PIPX_INSTALL=()

# Ruby
# Used by \`setup-ruby\`
# GEM_INSTALL=()

# Rust / Cargo / Crates.io
# Used by \`setup-rust\`
# CARGO_INSTALL=()

# Utilities to install, these are the [setup-util-*] scripts
# Used by \`setup-utils\`
# You can use \`setup-utils --configure\` to configure these.
SETUP_UTILS=(
	curl
	nano
	ripgrep
	sd
	vim
)
DOROTHY_CONFIG_TESTING_LIST=(
	dorothy-config-testing-value-0-$context
	dorothy-config-testing-value-1-$context
)
EOF
	)"
	expected_final_result="$(
		cat <<EOF
#!/usr/bin/env bash
# do not use \`export\` keyword in this file:
# shellcheck disable=SC2034

# load the default configuration
source "\$DOROTHY/config/setup.bash"

# APK
# Used by \`setup-linux\`
# APK_INSTALL=()

# Apt / apt-get
# Used by \`setup-linux\`
# APT_UNINSTALL=()
# APT_INSTALL=()

# AUR / pamac / pacman / yay / paru / pakku / aurutils
# Used by \`setup-linux\`
# AUR_INSTALL=()

# Flatpak
# Used by \`setup-linux\`
# FLATPAK_INSTALL=()

# RPM / dnf / yum
# Used by \`setup-linux\`
# RPM_INSTALL=()

# Snap
# Used by \`setup-linux\`
# SNAP_INSTALL=()

# Zypper
# Used by \`setup-linux\`
# ZYPPER_INSTALL=()

# macOS App Store / mas / https://github.com/mas-cli/mas
# Used by \`setup-mac-appstore\`
# You can use \`mas list\` and \`mas search\` to find apps
# MAS_INSTALL=() # tuple array of id, label
# MAS_UPGRADE='no'

# Homebrew / brew / https://brew.sh
# Used by \`setup-mac-brew\`
# You can use \`setup-mac-brew --configure\` to configure some of these.
# HOMEBREW_UNTAPS=()
# HOMEBREW_TAPS=()
# HOMEBREW_FORMULAS=()
# HOMEBREW_SLOW_FORMULAS=()
# HOMEBREW_CASKS=()
HOMEBREW_FONTS=(
	'font-cantarell'
	'font-cascadia-code'
	'font-fira-code'
	'font-fira-code-nerd-font'
	'font-fira-mono'
	'font-fira-mono-nerd-font'
	'font-hack' # many editors require this
	'font-hasklig'
	'font-ibm-plex' # many editors require this
	'font-inconsolata-go-nerd-font'
	'font-inter' # many apps require this
	'font-jetbrains-mono'
	'font-jetbrains-mono-nerd-font'
	'font-lato'
	'font-maven-pro'
	'font-monoid'
	'font-montserrat'
	'font-open-sans'
	'font-oxygen'
	'font-oxygen-mono'
	'font-roboto'
	'font-roboto-mono'
	'font-source-code-pro' # many editors require this
	'font-ubuntu'
)
# HOMEBREW_UNINSTALL=()        # for casks and formulas
# HOMEBREW_ENCODING_INSTALL='' # '', 'yes', 'no'

# Golang / go
# Used by \`setup-go\`
# GO_LINTING_INSTALL='' # '', 'yes', 'no'
# GO_INSTALL=()

# Node.js
# Used by \`setup-node\`
# NPM_INSTALL=()
# NODE_VERSIONS=()

# Python
# Used by \`setup-python\`
# PYTHON_INSTALL=()
# PIP_INSTALL=()
# PYTHON2_PIP_INSTALL=()
# PYTHON3_PIP_INSTALL=()
# PIPX_INSTALL=()

# Ruby
# Used by \`setup-ruby\`
# GEM_INSTALL=()

# Rust / Cargo / Crates.io
# Used by \`setup-rust\`
# CARGO_INSTALL=()

# Utilities to install, these are the [setup-util-*] scripts
# Used by \`setup-utils\`
# You can use \`setup-utils --configure\` to configure these.
SETUP_UTILS=(
	curl
	nano
	ripgrep
	sd
	vim
)

EOF
	)"

	# cleanup
	fs-rm --quiet --no-confirm -- "$filepath"

	# eval_tester --stderr="$expected_stderr" -- \
	# 	dorothy-config \
	# 	setup.bash \
	# 	--prefer=public \
	# 	-- \
	# 	--field=DOROTHY_CONFIG_TESTING_LIST $'--array=dorothy-config-testing-value-06589\ndorothy-config-testing-value-122058' \
	# 	--field=SETUP_UTILS $'--array=curl\nnano\nripgrep\nsd\nvim'
	# echo-file -- "$filepath" || :

	# eval_tester --debug -- \
	# 	config-helper \
	# 	--file=/home/balupton/.local/share/dorothy/user/config/setup.bash \
	# 	--multiple=warn-skip
	# 	-- \
	# 	--field=DOROTHY_CONFIG_TESTING_LIST $'--array=dorothy-config-testing-value-06589\ndorothy-config-testing-value-122058' \
	# 	--field=SETUP_UTILS $'--array=curl\nnano\nripgrep\nsd\nvim'

	# output the configuration file, so we can track its progress, in case something goes wrong, which on CI it might
	# echo-file -- "$filepath" || :

	# add DOROTHY_CONFIG_TESTING_LIST, ignore stderr as it will vary based on whether choose was used or not
	eval_tester --name='add and remove packages' --stdout="$expected_stdout" --ignore-stderr \
		-- eval-no-color -- dorothy-config --packages-var='DOROTHY_CONFIG_TESTING_LIST' --prefer=public -- "${invented_packages[@]}" "${util_packages[@]}"

	# output the configuration file, so we can track its progress, in case something goes wrong, which on CI it might
	# echo-file -- "$filepath" || :

	# ensure it had the before lines, loader lines, and after lines
	eval_tester --stdout="$expected_first_result" -- cat "$filepath"

	# read DOROTHY_CONFIG_TESTING_LIST
	expected_stdout=$'(\n'"$(echo-lines --quote=bash --indent=$'\t' -- "${invented_packages[@]}")"$'\n)'
	eval_tester --name='read packages' --stdout="$expected_stdout" --ignore-stderr \
		-- eval-no-color -- config-helper --file="$filepath" -- --field='DOROTHY_CONFIG_TESTING_LIST'

	# output the configuration file, so we can track its progress, in case something goes wrong, which on CI it might
	# echo-file -- "$filepath" || :

	# remove DOROTHY_CONFIG_TESTING_LIST
	eval_tester --name='remove config' --stderr="$expected_stderr" \
		-- eval-no-color -- dorothy-config "$filename" --prefer=public -- --field='DOROTHY_CONFIG_TESTING_LIST' --replace=

	# ensure it removed what it was meant to
	eval_tester --stdout="$expected_final_result" -- cat "$filepath"

	# output the configuration file, so we can track its progress, in case something goes wrong, which on CI it might
	# echo-file -- "$filepath" || :

	echo-style --g1="TEST: $0"
	return 0
)
function dorothy_config() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/config.sh"

	# =================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			dorothy-config [...options] --packages-var=<variable> -- ...<package>

			    # removes all setup-util-... packages from APK_INSTALL in <setup.bash>
			    mapfile -t APK_INSTALL < <(dorothy-config  --packages-var='APK_INSTALL' -- "\${APK_INSTALL[@]}")

			dorothy-config [...options] -- ...[options passed to config-helper]

			    dorothy-config 'git.bash' --prefer=local  -- \
			        --field='GIT_DEFAULT_BRANCH' --value="\$GIT_DEFAULT_BRANCH"

			OPTIONS:
			<filename>
			    The filename of the configuration file to find or create, then update.

			--prefer=<local|public>
			    If <local> prefer <user/config.local>, if <public> prefer <user/config>.
			    If there are multiple config files, prompt the user which one to use.

			--reason=<reason>
			    The reason for the change, displays in prompts and whatnot.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_packages_var='' option_filename='' option_reason='' option_prefer='' option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--packages-var='*) option_packages_var="${item#*=}" ;;
		'--file='*) option_filename="${item#*=}" ;;
		'--reason='*) option_reason="${item#*=}" ;;
		'--prefer=local' | '--prefer=public' | '--prefer=') option_prefer="${item#*=}" ;;
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $option_filename ]]; then
				option_filename="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure filename
	if [[ -z $option_filename ]]; then
		if [[ -n $option_packages_var ]]; then
			option_filename='setup.bash'
		else
			help 'A filename must be provided.'
		fi
	fi

	# check extension
	local extension # this is used later too
	extension="$(fs-extension -- "$option_filename")"
	if ! [[ $extension =~ ^(bash|zsh|sh|fish|nu)$ ]]; then
		help 'The file extension of ' --code="$option_filename" ' is not yet supported.'
	fi

	# =================================
	# Action

	function prune_utilities_from_packages {
		local item reconfigure='no' revised_items=() installer util reason=''

		# SETUP_UTILS should have already been loaded, but let's create and load it if it hasn't
		# we need to do it this way, otherwise we would wipe pre-existing custom configuration
		if [[ -z ${SETUP_UTILS-} ]]; then
			SETUP_UTILS=()
			load_dorothy_config 'setup.bash'
		fi
		if [[ -z $option_filename ]]; then
			option_filename='setup.bash'
		fi

		# remove inputs with dedicated installers
		for item in "${option_args[@]}"; do
			installer="$(get-installer --quiet -- "$item" || :)"
			if [[ -n $installer ]]; then
				if [[ $installer == 'setup-util-'* ]]; then
					util="${installer#*setup-util-}"
					reason+="$(
						echo-style --reset --notice1='Relocate ' --code-notice1="$item" --notice1=' from ' --code-notice1="$option_packages_var" --notice1=' to ' --code-notice1="$util" --notice1=' in ' --code-notice1='SETUP_UTILS'
					)"$'\n'
					SETUP_UTILS+=("$util")
					reconfigure='yes'
				else
					reason+="$(
						echo-style --reset --notice1='Remove ' --code-notice1="$item" --notice1=' from ' --code-notice1="$option_packages_var" --notice1=' as it should be installed via ' --code-notice1="$installer"
					)"$'\n'
					reconfigure='yes'
				fi
				continue
			else
				revised_items+=("$item")
			fi
		done

		# update configuration if necessary
		if [[ $reconfigure == 'yes' ]]; then
			dorothy-config "$option_filename" --prefer="$option_prefer" --reason="$reason" -- \
				--field="$option_packages_var" --array="$(__print_lines "${revised_items[@]}" | sort --ignore-case | uniq)" \
				--field='SETUP_UTILS' --array="$(__print_lines "${SETUP_UTILS[@]}" | sort --ignore-case | uniq)"
		fi

		# output the revised items, so that the caller has them
		__print_lines "${revised_items[@]}"
	}

	function update_configuration {
		# prep
		local user_filepath='' temp_filepath='' displayed_reason='no' \
			source_filepath="\$DOROTHY/config/$option_filename" \
			default_filepath="$DOROTHY/config/$option_filename" \
			local_filepath="$DOROTHY/user/config.local/$option_filename" \
			public_filepath="$DOROTHY/user/config/$option_filename"

		# which location is preferred (the default option)
		if [[ $option_prefer == 'local' ]]; then
			user_filepath="$local_filepath"
		elif [[ $option_prefer == 'public' ]]; then
			user_filepath="$public_filepath"
		fi

		# enforce location to verified preference
		if [[ -f $local_filepath && -f $public_filepath ]]; then
			user_filepath="$(
				choose --linger --required \
					--question="$(echo-style --notice1='The configuration file ' --code-notice1="$option_filename" --notice1=' is pending updates. Select the specific configuration file to update.')"$'\n'"$option_reason" \
					--default="$user_filepath" -- "$public_filepath" "$local_filepath"
			)"
			displayed_reason='yes'
		elif [[ -f $local_filepath ]]; then
			user_filepath="$local_filepath"
		elif [[ -f $public_filepath ]]; then
			user_filepath="$public_filepath"
		else
			user_filepath="$public_filepath"
		fi

		# show the reason
		if [[ -n $option_reason && $displayed_reason == 'no' ]]; then
			echo-style --notice1='The configuration file ' --code-notice1="$user_filepath" --notice1=' will be updated to:' $'\n' "$option_reason" >/dev/stderr
		fi

		# ensure filepath can be written
		__mkdirp "$(dirname -- "$user_filepath")"

		# check if we have to make the filepath
		if [[ ! -f $user_filepath ]]; then
			temp_filepath="$(
				fs-temp \
					--directory='config-helper' \
					--file --touch
			)"
			if [[ -f $default_filepath ]]; then
				# start with the header of the default configuration file
				echo-lines-before --needle='' --stdin <"$default_filepath" >>"$temp_filepath" # >> because https://github.com/bevry/dorothy/issues/283
				__print_line >>"$temp_filepath"

				# inject the sourcing of the default configuration file
				if [[ $extension == 'nu' ]]; then
					# nu doesn't support dynamic sourcing, so use default_filepath instead of source_filepath
					cat <<-EOF >>"$temp_filepath"
						# load the default configuration
						source '$default_filepath'

					EOF
				elif [[ $extension == 'sh' ]]; then
					# sh uses [.] instead of [source]
					cat <<-EOF >>"$temp_filepath"
						# load the default configuration
						. "$source_filepath"

					EOF
				else
					# fish, zsh, bash
					cat <<-EOF >>"$temp_filepath"
						# load the default configuration
						source "$source_filepath"

					EOF
				fi

				# append the body of the default configuration file
				# @note unless bash.bash:eval_capture removes [>/dev/stdout] or does [>>/dev/stdout] this will still overwrite instead of append
				echo-lines-after --needle='' --stdin <"$default_filepath" >>"$temp_filepath"
			else
				# even the dorothy default is missing
				cat <<-EOF >"$temp_filepath"
					#!/usr/bin/env $extension

				EOF
			fi

			# add the new file to the paths
			mv -- "$temp_filepath" "$user_filepath"
		fi

		# now that the file definitely exists, update it if we have values to update it
		if [[ ${#option_args[@]} -ne 0 ]]; then
			config-helper --file="$user_filepath" --multiple=warn-skip \
				-- "${option_args[@]}"
		fi
	}

	# perform the correct action
	if [[ -z $option_packages_var ]]; then
		update_configuration
	else
		prune_utilities_from_packages
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		dorothy_config_test
	else
		dorothy_config "$@"
	fi
fi
