#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# @todo add more options using plistbuddy
# https://github.com/diessica/dotfiles/blob/2d5bd73aca984ae6afd40872e970b0d15692025c/misc/macos#L276-L293
# https://fgimian.github.io/blog/2015/06/27/a-simple-plistbuddy-tutorial/
# https://marcosantadev.com/manage-plist-files-plistbuddy/

# @todo add more options using applescript, e.g.
# sudo osascript -e 'tell application "System Events" to set require password to wake of security preferences to false'

# -------------------------------------
# Get Preferences

echo 'Which side to show the dock?'
dock_side="$(choose right left top bottom)"
defaults write com.apple.dock orientation "$dock_side"
echo ''

# mapfile is a bash builtin command, if this fails, perhaps bash is not up to date
mapfile -t choices < <(
	read-choices \
		"Which settings would you like to enable" \
		dockhide:"Automatically hide and show the dock" \
		dockinstant:"Show the dock instantly" \
		dockmin:"Minimise applications to their dock" \
		docksmall:"Make the dock icons smaller" \
		groupwin:"Group windows by apps in mission control" \
		manualspaces:"Sort spaces manually instead of automatically" \
		safarinopass:"Don't store password in Safari" \
		safarifullurls:"Show full URLs in Safari" \
		safarinoopen:"Disable automatically opening Safari downloads" \
		safarinobar:"Hide Safari's bookmark bar" \
		finderhome:"Set Finder home to your user directory" \
		allextensions:"Show all file extensions" \
		showhidden:"Show hidden files" \
		hideextwarn:"Hide file extension change warning" \
		showstatusbar:"Show Finder status bar" \
		hidetrashwarn:"Hide empty trash warning" \
		hidedesktop:"Hide desktop icons" \
		screenshotdir:"Save screenshots to ~/Desktop/Screenshots" \
		disableautocorrect:"Disable autocorrect" \
		updatedaily:"Check for software updates daily" \
		devcrashes:"Show debug information when an application crashes"
)

echo "Proceeding with these choices: ${choices[*]}"

# -------------------------------------
# Dock

ok silent defaults delete com.apple.dock autohide-time-modifier

if is-needle dockhide "${choices[@]}"; then
	defaults write com.apple.dock autohide -bool true
	if is-needle dockinstant "${choices[@]}"; then
		defaults write com.apple.dock autohide-delay -float 0
	else
		ok silent defaults delete com.apple.dock autohide-delay
	fi
else
	ok silent defaults delete com.apple.dock autohide
fi

if is-needle dockmin "${choices[@]}"; then
	defaults write com.apple.dock minimize-to-application -bool true
else
	ok silent defaults delete com.apple.dock minimize-to-application
fi

if is-needle docksmall "${choices[@]}"; then
	defaults write com.apple.dock tilesize -int 32
fi

if is-needle groupwin "${choices[@]}"; then
	defaults write com.apple.dock expose-group-apps -bool true
else
	ok silent defaults delete com.apple.dock expose-group-apps
fi

if is-needle manualspaces "${choices[@]}"; then
	defaults write com.apple.dock mru-spaces -bool false
else
	ok silent defaults delete com.apple.dock mru-spaces
fi

# -------------------------------------
# Safari

if is-needle safarinopass "${choices[@]}"; then
	defaults write com.apple.Safari AutoFillPasswords -bool false
else
	ok silent defaults delete com.apple.Safari AutoFillPasswords
fi

if is-needle safarinohome "${choices[@]}"; then
	defaults write com.apple.Safari HomePage -string 'about:blank'
fi

if is-needle safarifullurls "${choices[@]}"; then
	defaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true
else
	ok silent defaults delete com.apple.Safari ShowFullURLInSmartSearchField
fi

if is-needle safarinoopen "${choices[@]}"; then
	defaults write com.apple.Safari AutoOpenSafeDownloads -bool false
else
	ok silent defaults delete com.apple.Safari AutoOpenSafeDownloads
fi

if is-needle safarinobar "${choices[@]}"; then
	defaults write com.apple.Safari ShowFavoritesBar-v2 -bool false
else
	ok silent defaults delete write com.apple.Safari ShowFavoritesBar-v2
fi

# -------------------------------------
# Finder

if is-needle finderhome "${choices[@]}"; then
	defaults write com.apple.finder NewWindowTargetPath "file://$HOME"
fi

# https://software.com/mac/tweaks/show-file-extensions-in-finder
if is-needle allextensions "${choices[@]}"; then
	defaults write NSGlobalDomain AppleShowAllExtensions -bool true
else
	ok silent defaults delete NSGlobalDomain AppleShowAllExtensions
fi

# https://software.com/mac/tweaks/show-all-files-in-finder
if is-needle showhidden "${choices[@]}"; then
	defaults write com.apple.finder AppleShowAllFiles -bool true
else
	ok silent defaults delete com.apple.finder AppleShowAllFiles
fi

# http://osxdaily.com/2012/04/11/disable-the-file-extension-change-warning-in-mac-os-x/
if is-needle hideextwarn "${choices[@]}"; then
	defaults write com.apple.finder FXEnableExtensionChangeWarning -bool false
else
	ok silent defaults delete com.apple.finder FXEnableExtensionChangeWarning
fi

if is-needle showstatusbar "${choices[@]}"; then
	defaults write com.apple.finder ShowStatusBar -bool false
else
	ok silent defaults delete com.apple.finder ShowStatusBar
fi

if is-needle hidetrashwarn "${choices[@]}"; then
	defaults write com.apple.finder WarnOnEmptyTrash -bool false
else
	ok silent defaults delete write com.apple.finder WarnOnEmptyTrash
fi

# https://software.com/mac/tweaks/hide-desktop-icons
if is-needle hidedesktop "${choices[@]}"; then
	defaults write com.apple.finder CreateDesktop -bool false
	defaults write com.apple.finder ShowRemovableMediaOnDesktop -bool false
	defaults write com.apple.finder ShowHardDrivesOnDesktop -bool false
	defaults write com.apple.finder ShowExternalHardDrivesOnDesktop -bool false
	defaults write com.apple.finder ShowMountedServersOnDesktop -bool false
else
	ok silent defaults delete com.apple.finder CreateDesktop
	ok silent defaults delete com.apple.finder ShowRemovableMediaOnDesktop
	ok silent defaults delete com.apple.finder ShowHardDrivesOnDesktop
	ok silent defaults delete com.apple.finder ShowExternalHardDrivesOnDesktop
	ok silent defaults delete com.apple.finder ShowMountedServersOnDesktop

fi

# -------------------------------------
# Global

if is-needle screenshotdir "${choices[@]}"; then
	mkdir -p "$HOME/Desktop/Screenshots"
	defaults write com.apple.screencapture location "$HOME/Desktop/Screenshots"
else
	ok silent defaults delete com.apple.screencapture location
fi

if is-needle disableautocorrect "${choices[@]}"; then
	defaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false
else
	ok silent defaults delete NSGlobalDomain NSAutomaticSpellingCorrectionEnabled
fi

if is-needle updatedaily "${choices[@]}"; then
	defaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1
else
	ok silent defaults delete com.apple.SoftwareUpdate ScheduleFrequency
fi

# https://en.wikipedia.org/wiki/Apple_Developer_Tools#CrashReporterPrefs
if is-needle devcrashes "${choices[@]}"; then
	defaults write com.apple.CrashReporter DialogType -string 'developer'
else
	ok silent defaults delete com.apple.CrashReporter DialogType
fi


# -------------------------------------
# Reset

killall SystemUIServer
killall Finder
killall Dock