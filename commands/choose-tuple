#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/splitlines.bash"

# env
RETURN="${RETURN-'value'}"
VALUE_IN_LABEL="${VALUE_IN_LABEL='always'}"  # @todo: support only for duplcate labels
# @todo: fix the case where RETURN=label and VALUE_IN_LABEL=always, which should not return the value in the label, but should show it to the user in selections

# validate
if test "${3-}" != '--'; then
	stderr echo 'USAGE: choose-tuple <question> <selection> -- <[label, value]...>'
	exit 1
fi

# extract
question="${1-}"
selection="${2-}"
tuples=("${@:4}")
labels=()
values=()
filteredLabels=()
filteredValues=()
if is-odd "${#tuples[@]}"; then
	stderr echo "the amount of labels must match the amount of values"
	exit 1
fi
for ((i = 0; i < ${#tuples[@]}; i=i+2)); do
	label="${tuples[$i]}"
	value="${tuples[$i+1]}"
	# check both exist
	if test -z "$label" -o -z "$value"; then
		stderr echo "choose-tuple: both label [$label] and value [$value] must exist"
		exit 1
	fi
	# add to the list
	if test "$label" != "$value" -a "$VALUE_IN_LABEL" != 'never'; then
		labels+=("$label [$value]")
	else
		labels+=("$label")
	fi
	values+=("$value")
	# if we have a value, then constrain selection
	if test -n "$selection"; then
		if [[ "${label,,}" = *"${selection,,}"* ]] || [[ "${value,,}" = *"${selection,,}"* ]]; then
			if test "$label" != "$value" -a "$VALUE_IN_LABEL" != 'never'; then
				filteredLabels+=("$label [$value]")
			else
				filteredLabels+=("$label")
			fi
			filteredValues+=("$value")
		fi
	fi
done

# sanity check
if test "${#labels[@]}" -ne "${#values[@]}"; then
	stderr echo "the amount of labels must match the amount of values"
	exit 1
fi
if test "${#filteredLabels[@]}" -ne "${#filteredValues[@]}"; then
	stderr echo "the amount of filtered labels must match the amount of fitlered values"
	exit 1
fi
if is-array-empty-or-partial "${labels[@]}"; then
	stderr echo "empty labels were provided:"
	stderr echo-lines-verbose "${labels[@]}"
	exit 1
fi
if is-array-empty-or-partial "${values[@]}"; then
	stderr echo "empty values were provided"
	stderr echo-lines-verbose "${values[@]}"
	exit 1
fi
if test -n "$selection" && is-array-empty-or-partial "${filteredLabels[@]}"; then
	stderr echo "selection criteria [$selection] returned no results:"
	stderr echo-lines-verbose "${filteredLabels[@]}"
	exit 1
fi

# if we have a selection, then replace the options with it
if is-array-full "${filteredValues[@]}"; then
	labels=("${filteredLabels[@]}")
	values=("${filteredValues[@]}")
fi

# if we one option, then use that
if is-array-count 1 "${values[@]}"; then
	if test "$RETURN" = 'label'; then
		echo "${labels[0]}"
	else
		echo "${values[0]}"
	fi
	exit
fi

# let the user pick
stderr echo "$question"
selection="$(choose "${labels[@]}")"
for ((i = 0; i < ${#labels[@]}; i=i+1)); do
	label="${labels[$i]}"
	if test "$selection" = "$label"; then
		if test "$RETURN" = 'label'; then
			echo "$label"
		else
			echo "${values[$i]}"
		fi
		exit
	fi
done

# unknown failure
exit 1
