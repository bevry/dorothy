#!/usr/bin/env bash

function is_nonempty_file_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	# prep
	local root dir file dir_target dir_symlink file_target file_symlink
	root="$(fs-temp --directory='is-nonempty-file-test')"
	fs-rm --quiet --no-confirm -- "$root"
	dir="$(fs-temp --root="$root" --directory --touch)"
	file="$(fs-temp --root="$root" --file --touch)"
	dir_target="$(fs-temp --root="$root" --directory='dir_target' --touch)"
	file_target="$(fs-temp --root="$root" --file='file_target' --touch)"
	dir_symlink="$(fs-temp --root="$root" --directory='dir_symlink' --no-touch)"
	file_symlink="$(fs-temp --root="$root" --file='file_symlink' --no-touch)"
	symlink-helper --existing="$dir_target" --symlink="$dir_symlink" --quiet
	symlink-helper --existing="$file_target" --symlink="$file_symlink" --quiet

	# test standard paths
	eval-tester --name='no args' --status=22 --ignore-stderr \
		-- is-nonempty-file --

	eval-tester --name='empty args' --status=22 \
		-- is-nonempty-file -- '' ''

	eval-tester --name='missing' --status=2 \
		-- is-nonempty-file -- "$DOROTHY/this-does-not-exist"

	eval-tester --name='empty dirs' --status=79 \
		-- is-nonempty-file -- "$dir" "$dir"

	eval-tester --name='empty files' --status=66 \
		-- is-nonempty-file -- "$file" "$file"

	eval-tester --name='non-empty dir' --status=79 \
		-- is-nonempty-file -- "$DOROTHY"

	eval-tester --name='non-empty file' \
		-- is-nonempty-file -- "$DOROTHY/README.md"

	# test working symlinks
	eval-tester --name='symlink empty dir' --status=79 \
		-- is-nonempty-file -- "$dir_symlink"

	eval-tester --name='symlink empty file' --status=66 \
		-- is-nonempty-file -- "$file_symlink"

	# test non-empty symlinks
	__print_line >"$file_target"

	eval-tester --name='symlink non-empty file' \
		-- is-nonempty-file -- "$file_symlink"

	eval-tester --name='symlink non-empty file then non-empty file' \
		-- is-nonempty-file -- "$file_symlink" "$DOROTHY/README.md"

	eval-tester --name='symlink non-empty file then empty file' --status=66 \
		-- is-nonempty-file -- "$file_symlink" "$file"

	eval-tester --name='symlink non-empty file then non-empty dir' --status=79 \
		-- is-nonempty-file -- "$file_symlink" "$DOROTHY"

	eval-tester --name='symlink non-empty file then missing' --status=2 \
		-- is-nonempty-file -- "$file_symlink" "$DOROTHY/this-does-not-exist"

	# test broken symlinks
	fs-rm --quiet --no-confirm -- "$dir_target" "$file_target"

	eval-tester --name='broken symlink dir' --status=9 \
		-- is-nonempty-file -- "$dir_symlink"

	eval-tester --name='broken symlink file' --status=9 \
		-- is-nonempty-file -- "$file_symlink"

	eval-tester --name='broken symlink file then non-empty dir' --status=9 \
		-- is-nonempty-file -- "$file_symlink" "$DOROTHY"

	eval-tester --name='broken symlink file then file' --status=9 \
		-- is-nonempty-file -- "$file_symlink" "$DOROTHY/README.md"

	eval-tester --name='broken symlink file then missing' --status=9 \
		-- is-nonempty-file -- "$file_symlink" "$DOROTHY/this-does-not-exist"

	echo-style --g1="TEST: $0"
	return 0
)
function is_nonempty_file() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks if a <path> is a file that has contents, aka a file that is not zero-length.
			Companion to [is-empty-file].

			USAGE:
			is-nonempty-file [...options] [--] ...<path>

			OPTIONS:
			--sudo
			    If specified, use sudo on filesystem interactions.
			--user=<user>
			--group=<group>
			    If specified use this user and/or group for filesystem interactions.

			RETURNS:
			[0] if all <path>s were a readable non-zero-length file
			[2] if a <path> was not found
			[9] if a <path> was a broken symlink
			[13] if a <path> was a non-readable file, as such the length could not be determined, or if a <path> was not accessible: unless [--no-sudo] was provided a sudo request will be made to prevent this failure.
			[17] if a <path> was a zero-length file
			[22] if empty arguments are provided
			[79] if a <path> was found but was not a file, nor an unbroken symlink to a file
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inputs=() option_sudo='no' option_user='' option_group=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--')
			option_inputs+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_inputs+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_inputs[@]} -eq 0 ]]; then
		help "No <path>s provided."
	fi

	# =====================================
	# Action

	sudo-helper --inherit --optional=13 --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- is-nonempty-file.bash -- "${option_inputs[@]}"
	return
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		is_nonempty_file_test
	else
		is_nonempty_file "$@"
	fi
fi
