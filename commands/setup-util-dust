#!/usr/bin/env bash

# https://github.com/bootandy/dust
# du alternative

# https://github.com/bootandy/dust/releases
# du-dust_0.8.6_amd64.deb
# du-dust_0.8.6_i386.deb
# dust-v0.8.6-aarch64-unknown-linux-gnu.tar.gz
# dust-v0.8.6-aarch64-unknown-linux-musl.tar.gz
# dust-v0.8.6-arm-unknown-linux-gnueabihf.tar.gz
# dust-v0.8.6-i686-pc-windows-gnu.zip
# dust-v0.8.6-i686-pc-windows-msvc.zip
# dust-v0.8.6-i686-unknown-linux-gnu.tar.gz
# dust-v0.8.6-i686-unknown-linux-musl.tar.gz
# dust-v0.8.6-x86_64-apple-darwin.tar.gz
# dust-v0.8.6-x86_64-pc-windows-gnu.zip
# dust-v0.8.6-x86_64-pc-windows-msvc.zip
# dust-v0.8.6-x86_64-unknown-linux-gnu.tar.gz
# dust-v0.8.6-x86_64-unknown-linux-musl.tar.gz

function setup_util_dust() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=dust; then
		return 0
	fi

	# setup
	local arch options=(
		--cli='dust'
		"$@"
		BREW='dust'
		CARGO='du-dust'
	)
	arch="$(get-arch)"
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='bootandy/dust' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB="*/$2"
		)
	}
	function add_deb_option {
		options+=(
			DEB="$(get_github_asset_url "$1")"
		)
	}
	if is-mac; then
		add_download_option 'x86_64-apple-darwin.tar.gz' 'dust'
	elif is-linux; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-unknown-linux-musl.tar.gz' 'dust'
		elif test "$arch" = 'a32'; then
			add_download_option '-arm-unknown-linux-musl.tar.gz' 'dust'
		elif test "$arch" = 'x64'; then
			add_deb_option '_amd64.deb'
			add_download_option '-x86_64-unknown-linux-musl.tar.gz' 'dust'
		elif test "$arch" = 'x32'; then
			add_deb_option '_i386.deb'
			add_download_option '-i686-unknown-linux-musl.tar.gz' 'dust'
		fi
	elif is-wsl; then
		if test "$arch" = 'x64'; then
			add_download_option '-x86_64-pc-windows-msvc.zip' 'dust.exe'
		elif test "$arch" = 'x32'; then
			add_download_option '-i686-pc-windows-msvc.zip' 'dust.exe'
		fi
	fi
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_dust "$@"
fi
