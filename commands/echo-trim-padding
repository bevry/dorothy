#!/usr/bin/env bash

function echo_trim_padding() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Trims empty lines from the start and end of all input received.

			USAGE:
			echo-trim-padding [...options] [--] ...<input>
			echo-lines ...<input> | echo-trim-padding [...options]

			OPTIONS:
			$(stdinargs_options_help --)

			EXAMPLE:
			echo-trim-padding -- ''  $'\n'  'a'  ' ' 'b'  $'\t'
			echo-lines -- ''  $'\n'  'a'  ' ' 'b'  $'\t' | echo-trim-padding --stdin
			printf '%s' $'\n\na\n\nb\n\n' | echo-trim-padding --stdin

			    a

			    b
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# =====================================
	# Action

	# instead of buffering everything, then filtering off the end
	# we can instead have a queue/buffer of empty lines, then flush them when a non-empty line is found
	# this allows data to be echoed as it is received
	local queue=() started='no'
	function on_line {
		if is-empty-string -- "$1"; then
			if test "$started" = 'yes'; then
				queue+=("$1")
			fi
		else
			started='yes'
			if test "${#queue[@]}" -ne 0; then
				for line in "${queue[@]}"; do
					print_line "$line"
				done
				queue=()
			fi
			print_line "$1"
		fi
	}

	stdinargs "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_trim_padding "$@"
fi
