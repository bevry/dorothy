#!/usr/bin/env bash

# CLI
# https://app-updates.agilebits.com/product_history/CLI
# https://app-updates.agilebits.com/product_history/CLI2

function setup_util_1password() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=op; then
		return 0
	fi

	# dependencies
	source "$DOROTHY/sources/ripgrep.bash"

	# prepare
	local arch platform version options=(
		--name='1Password CLI'
		--cli=op
		"$@"
	)
	function add_download_option {
		options+=(
			DOWNLOAD="$1"
			DOWNLOAD_ARCHIVE_GLOB='op'
		)
	}
	function add_installer_option {
		options+=(
			INSTALLER="$1"
			INSTALLER_OPEN='yes'
		)
	}
	arch="$(get-arch)"
	platform="$(uname -s)"

	# fetcch latest cli version
	version="v$(fetch 'https://app-updates.agilebits.com/product_history/CLI2' | rg --only-matching --regexp='https://cache.agilebits.com/dist/1P/op2/pkg/v([^/-]+)/' --replace='$1' --max-count=1 || :)" # || : to avoid exit code 141

	# fetch appropriate platform url for that cli version
	if test "$platform" = 'Darwin'; then
		add_installer_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_apple_universal_$version.pkg"
		# uninstall cask version as it lags behind
		setup-util --quiet --optional --uninstall --name='1Password CLI' "$@" \
			CASK='homebrew/cask-versions/1password-cli-beta' \
			CASK_TAP='homebrew/cask-versions'
	elif test "$platform" = 'Linux'; then
		if test "$arch" = 'a64'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_linux_arm64_$version.zip"
		elif test "$arch" = 'a32'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_linux_arm_$version.zip"
		elif test "$arch" = 'x64'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_linux_amd64_$version.zip"
		elif test "$arch" = 'x32'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_linux_386_$version.zip"
		fi
	elif test "$platform" = 'FreeBSD'; then
		if test "$arch" = 'a64'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_freebsd_arm64_$version.zip"
		elif test "$arch" = 'a32'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_freebsd_arm_$version.zip"
		elif test "$arch" = 'x64'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_freebsd_amd64_$version.zip"
		elif test "$arch" = 'x32'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_freebsd_386_$version.zip"
		fi
	elif test "$platform" = 'OpenBSD'; then
		if test "$arch" = 'a64'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_openbsd_arm64_$version.zip"
		elif test "$arch" = 'x64'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_openbsd_amd64_$version.zip"
		elif test "$arch" = 'x32'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_openbsd_386_$version.zip"
		fi
	elif test "$platform" = 'Windows'; then
		if test "$arch" = 'x64'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_windows_amd64_$version.zip"
		elif test "$arch" = 'x32'; then
			add_download_option "https://cache.agilebits.com/dist/1P/op2/pkg/$version/op_windows_386_$version.zip"
		fi
	fi

	# setup
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_1password "$@"
fi
