#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# prepare
fallbacks=()  # for package systems that could be installed

# quiet
if is-affirmative "${QUIET-}"; then
	if test -n "${CLI-}"; then
		if command-missing "${CLI}"; then
			stderr echo "missing utility [$CLI], installing automatically..."
			env QUIET='' stderr setup-util
			exit $?
		else
			exit 0
		fi
	else
		env QUIET='' stderr setup-util
		exit $?
	fi
fi

# brew / Homebrew / macOS
function do_brew () {
	if test -n "${CASK-}" && is-brew; then
		if test -n "${FORCE-}"; then
			brew install --cask "${CASK}" --force
		else
			brew install --cask "${CASK}"
		fi
	else
		return 1
	fi
}

# brew / Homebrew Casks / macOS
function do_cask () {
	if test -n "${CASK-}" && is-brew; then
		if test -n "${FORCE-}"; then
			brew install --cask "${CASK}" --force
		else
			brew install --cask "${CASK}"
		fi
	else
		return 1
	fi
}

# pacman / Arch Linux
function do_pacman () {
	if test -n "${PACMAN-}" && command-exists pacman; then
		# -q, --quiet: show less information for query and search
		# --needed: do not reinstall up to date packages
		# --noconfirm: do not ask for any confirmation
		sudo pacman -S --noconfirm --needed --quiet "${PACMAN}"
	else
		return 1
	fi
}

# yay / AUR / Arch Linux
function do_yay () {
	if test -n "${YAY-}" && command-exists yay; then
		yay -Sy "${YAY}"
	else
		return 1
	fi
}

# snap/ Snap Craft / Ubuntu
function do_snap () {
	if test -n "${SNAP-}" && command-exists snap; then
		if test -n "${SNAP_CHANNEL-}"; then
			snap install --channel="${SNAP_CHANNEL}" "${SNAP}"
		else
			snap install "${SNAP}"
		fi
	else
		return 1
	fi
}

# yum / RedHat / Fedora / CentOS / etc
function do_yum () {
	if test -n "${YUM_EVAL-}" && command-exists yum; then
		eval "${YUM_EVAL}"
	elif test -n "${YUM-}" && command-exists yum; then
		if test -n "${YUM_REPO-}"; then
			cd /etc/yum.repos.d/ || exit 1
			wget "$YUM_REPO"
		fi
		sudo yum install "${YUM}"
	else
		return 1
	fi
}

# apt / Ubuntu / Debian / Linux Mint / elementary OS / etc
function do_apt () {
	if test -n "${APT_EVAL-}" && is-apt; then
		eval "${APT_EVAL}"
	elif test -n "${APT-}" && is-apt; then
		if test -n "${APT_REPO-}"; then
			sudo apt-add-repository -y "$APT_REPO"
			sudo apt-get update
		fi
		sudo apt install -y "${APT}"
	else
		return 1
	fi
}

# apk / Alpine Linux
function do_apk () {
	if test -n "${APK-}" && command-exists apk; then
		apk add "${APK}"
	else
		return 1
	fi
}

# nix
function do_nix () {
	if test -n "${NIX-}" && command-exists nix-env; then
		nix-env -iA "${NIX}"
	else
		return 1
	fi
}

# xbps / Void Linux
function do_xbps () {
	if test -n "${XBPS-}" && command-exists xbps-install; then
		xbps-install -S "${XBPS}"
	else
		return 1
	fi
}

# eopkg / Solus
function do_eopkg () {
	if test -n "${EOPKG-}" && command-exists eopkg; then
		sudo eopkg it "${EOPKG}"
	else
		return 1
	fi
}

# emerge / GURU / Gentoo Linux
function do_emerge () {
	if test -n "${EMERGE_EVAL-}" && command-exists emerge; then
		eval "${EMERGE_EVAL}"
	elif test -n "${EMERGE-}" && command-exists emerge; then
		sudo emerge -av "${EMERGE}"
	else
		return 1
	fi
}

# dnf / COPR / Fedora / CentOS / RHEL
function do_dnf () {
	if test -n "${DNF_EVAL-}" && command-exists dnf; then
		eval "${DNF_EVAL}"
	elif test -n "${DNF-}" && command-exists dnf; then
		if test -n "${DNF_COPR-}"; then
			sudo dnf copr enable -y "${DNF_COPR}"
		fi
		if test -n "${DNF_REPO-}"; then
			sudo dnf config-manager --add-repo "$DNF_REPO"
		fi
		sudo dnf install "${DNF}"
	else
		return 1
	fi
}

# zypper / openSUSE / SLES
function do_zypper () {
	if test -n "${ZYPPER_EVAL-}" && command-exists zypper; then
		eval "${ZYPPER_EVAL}"
	elif test -n "${ZYPPER-}" && command-exists zypper; then
		if test -n "${ZYPPER_REPO-}"; then
			zypper addrepo "$ZYPPER_REPO"
			zypper refresh
		fi
		zypper install "${ZYPPER}"
	else
		return 1
	fi
}

# port / MacPorts
function do_port () {
	if test -n "${PORT-}" && command-exists port; then
		sudo port install "${PORT}"
	else
		return 1
	fi
}

# choco / Chocolatey / Windows
function do_choco () {
	if test -n "${CHOCO-}" && command-exists choco; then
		choco install "${CHOCO}"
	else
		return 1
	fi
}

# scoop / Windows
function do_scoop () {
	if test -n "${SCOOP-}" && command-exists scoop; then
		scoop install "${SCOOP}"
	else
		return 1
	fi
}

# winget / Windows Package Manager Client
function do_winget () {
	if test -n "${WINGET-}" && command-exists winget; then
		winget install "${WINGET}"
	else
		return 1
	fi
}

# pkg / FreeBSD / Termux
function do_pkg () {
	if test -n "${PKG-}" && command-exists pkg; then
		pkg install "${PKG}"
	else
		return 1
	fi
}

# pkgutil / Solaris 10+, Sparc and x86.
function do_pkgutil () {
	if test -n "${PKGUTIL-}" && command-exists pkgutil; then
		pkgutil -i "${PKG}"
	else
		return 1
	fi
}

# huber
function do_huber () {
	if test -n "${HUBER-}" && command-exists huber; then
		huber install "${HUBER}"
	else
		return 1
	fi
}

# guix
function do_guix () {
	if test -n "${GUIX-}" && command-exists guix; then
		guix package -i "${GUIX}"
	else
		return 1
	fi
}

# dpkg / Debian / Ubuntu / Linux Mint / elementary OS / etc
function do_dpkg () {
	if test -n "${DPKG_EVAL-}" && command-exists dpkg; then
		eval "${DPKG_EVAL}"
	else
		return 1
	fi
}

# doas / Solaris
function do_doas () {
	if test -n "${DOAS-}" && command-exists doas; then
		doas pkg_add "${DOAS}"
	else
		return 1
	fi
}

# pkg_add / OpenBSD
function do_pkg () {
	if test -n "${PKGADD-}" && command-exists pkg_add; then
		pkg_add "${PKGADD}"
	else
		return 1
	fi
}

# pkgin/ NetBSD
function do_pkgin () {
	if test -n "${PKGIN-}" && command-exists pkgin; then
		pkgin install "${PKGIN}"
	else
		return 1
	fi
}

# pkgman / Haiku
function do_pkgman () {
	if test -n "${PKGMAN-}" && command-exists pkgman; then
		pkgman install "${PKGMAN}"
	else
		return 1
	fi
}

# stack
function do_stack () {
	if test -n "${STACK-}" && command-exists stack; then
		stack update
		stack install "${STACK}"
	else
		return 1
	fi
}

# cabal
function do_cabal () {
	if test -n "${CABAL-}" && command-exists cabal; then
		cabal update
		cabal install "${CABAL}"
	else
		return 1
	fi
}

# conda
function do_conda () {
	if test -n "${CONDA-}" && command-exists conda; then
		if test -n "${CONDA_CHANNEL-}"; then
			conda install -c "${CONDA_CHANNEL}" "${CONDA}"
		else
			conda install "${CONDA}"
		fi
	else
		return 1
	fi
}

# npm / Node.js
function do_npm () {
	if test -n "${NPM-}"; then
		if command-missing npm; then
			fallbacks+=('npm')
			return 1
		fi
		npm install -g "${NPM}"
	else
		return 1
	fi
}
function do_npm_fallback () {
	setup-node
	source "$DOROTHY/sources/paths.sh"
	source "$DOROTHY/sources/nvm.sh"
	do_gem "$@"
}

# pip / Python
function do_pip () {
	if test -n "${PIP-}"; then
		if ! silent pipp --version; then
			fallbacks+=('pip')
			return 1
		fi
		pipp install --user --upgrade --force-reinstall --no-warn-script-location "$PIP"
	else
		return 1
	fi
}
function do_pip_fallback () {
	setup-python
	source "$DOROTHY/sources/paths.sh"
	do_cargo "$@"
}

# gem / Ruby
function do_gem () {
	# we use --user-install because of:
	# https://github.com/ffi/ffi/issues/631
	if test -n "${GEM-}"; then
		if command-missing gem; then
			fallbacks+=('gem')
			return 1
		fi
		silent gem uninstall "$GEM" -axI
		if test -n "${GEM_VERSION-}"; then
			gem install "$GEM" --version "$GEM_VERSION" --user-install --no-document
		else
			gem install "$GEM" --user-install --no-document
		fi
	else
		return 1
	fi
}
function do_gem_fallback () {
	setup-ruby
	source "$DOROTHY/sources/paths.sh"
	do_gem "$@"
}

# cargo / Crates.io / Rust
function do_cargo () {
	if test -n "${CARGO-}"; then
		if command-missing cargo; then
			fallbacks+=('cargo')
			return 1
		fi
		cargo install "${CARGO}"
	else
		return 1
	fi
}
function do_cargo_fallback () {
	setup-rust
	source "$DOROTHY/sources/paths.sh"
	do_cargo "$@"
}

# curl / Manual Installer
function do_curl () {
	if test -n "${CURL-}" && command-exists curl; then
		sh -c "$(fetch "$CURL")"
	else
		return 1
	fi
}

# zip / Manual Installer
function do_zip () {
	if test -n "${ZIP-}"; then
		mkdir -p "$HOME/bin"
		if test -n "${ZIP_FILE-}"; then
			down-zip-file "$ZIP" "$ZIP_FILE" "$HOME/bin"
		else
			down-zip-file "$ZIP" "$HOME/bin"
		fi
	else
		return 1
	fi
}

# -------------------------------------

# arguments specify the order
order=("$@")
if test "${#order[@]}"; then
	order=(
		# intelligent
		brew
		cask

		# precompiled
		pacman
		apt
		apk
		yum

		# precompiled containers
		snap

		# source containers
		# flatpack

		# source
		cargo
		npm
		pip
		gem

		# unknown
		yay
		nix
		xbps
		eopkg
		emerge
		dnf
		zypper
		port
		choco
		scoop
		winget
		pkg
		pkgutil
		huber
		guix
		dpkg
		doas
		pkg
		pkgin
		pkgman
		stack
		cabal
		conda
		yay

		# custom
		curl
		zip
	)
fi

# cycle through the order
if test -z "${FORCE-}" -a -n "${CLI-}" && command-exists "${CLI}"; then
	echo "${CLI} already installed"
	exit 0
else
	for item in "${order[@]}"; do
		pass='y'
		"do_${item}" || pass='n'
		if test "${pass}" = 'y'; then
			# installed fine, so everything else is fine too ✅
			exit 0
		fi
	done
fi

# fallback for failed packages which are missing their package system
for item in "${fallbacks[@]}"; do
	pass='y'
	"do_${item}_fallback" || pass='n'
	if test "${pass}" = 'y'; then
		# installed fine, so everything else is fine too ✅
		exit 0
	fi
done

# failure
if test -z "${CLI-}"; then
	stderr echo 'Unable to install the unamed utility on this platform. ❌'
	# env
else
	stderr echo "Unable to install the utility [${CLI-}] on this platform. ❌"
fi
exit 1

