#!/usr/bin/env bash
source "$DOROTHY/sources/arrays.bash"
source "$DOROTHY/sources/strict.bash"
if test "$ARRAYS" = 'no'; then
	exit 1
fi

# if quiet, log to stderr
if is-affirmative "${QUIET-}"; then
	env QUIET='' stderr setup-util
	exit $?
fi

# prepare
fallbacks=()  # for package systems that could be installed
name="${NAME:-"${CLI:-unnamed}"}"

# check if necessary
if test -n "${CLI-}"; then
	if command-missing "$CLI"; then
		echo "The [$name] utility does not appear to be installed because [$CLI] is missing. Installing automatically... ⏲"
	elif test -n "${FORCE-}"; then
		echo "The [$name] utility is already installed because [$CLI] is present. Forcing reinstall... ⏲"
	else
		echo "The [$name] utility is already installed because [$CLI] is present. All good. ✅"
		exit 0
	fi
fi

# confirm if necessary
if is-affirmative "${CONFIRM-}"; then
	if ! confirm-positive "Do you want to install the [$name] utility?"; then
		exit 2  # error exit code so that things that depend on this abort
	fi
fi

# log helpers
function won () {
	echo "The [$name] utility is now installed. ✅"
}
function lost () {
	stderr echo "The [$name] utility was unable to be installed. ❌"
	if test "$name" = 'unnamed'; then
		sleep 5
		if confirm-positive "Do you want to output the environment variables to determine what it was?"; then
			env | sort
		fi
	fi
}

# brew / Homebrew / macOS
function do_brew () {
	if test -n "${BREW-}"; then
		if ! is-brew; then
			if is-mac; then
				fallbacks+=('brew')
			fi
			return 1
		fi
		# support BREW holding multiple args
		mapfile -t args < <(echo-split ' ' -- "$BREW")
		if test -n "${FORCE-}"; then
			args+=('--force')
		fi
		if ! brew install "${args[@]}"; then
			brew upgrade "${args[@]}"
		fi
	else
		return 1
	fi
}
function do_brew_fallback () {
	setup-util-brew
	source "$DOROTHY/sources/paths.sh"
	do_brew "$@"
}

# brew / Homebrew Casks / macOS
function do_cask () {
	if test -n "${CASK-}"; then
		if ! is-brew; then
			if is-mac; then
				fallbacks+=('cask')
			fi
			return 1
		fi
		# support CASK holding multiple args
		mapfile -t args < <(echo-split ' ' -- "$CASK")
		args=('--cask')
		if test -n "${FORCE-}"; then
			args+=('--force')
		fi
		brew install "${args[@]}"
	else
		return 1
	fi
}
function do_cask_fallback () {
	setup-util-brew
	source "$DOROTHY/sources/paths.sh"
	do_cask "$@"
}


# pacman / Arch Linux / Manjaro
function do_pacman () {
	if test -n "${PACMAN-}" && command-exists pacman; then
		# -q, --quiet: show less information for query and search
		# --needed: do not reinstall up to date packages
		# --noconfirm: do not ask for any confirmation
		sudo pacman -S --noconfirm --needed --quiet "${PACMAN}"
	else
		return 1
	fi
}

# yay / AUR / Arch Linux
# https://github.com/Jguer/yay
function do_yay () {
	pkg="${YAY:-"${AUR-}"}"
	if test -n "$pkg" && command-exists yay; then
		yay -Sy "$pkg"
	else
		return 1
	fi
}

# paru / AUR / Arch Linux
# https://itsfoss.com/paru-aur-helper/
function do_paru () {
	pkg="${PARU:-"${AUR-}"}"
	if test -n "$pkg" && command-exists paru; then
		paru -Sy "$pkg"
	else
		return 1
	fi
}

# pakku / AUR / Arch Linux
# https://itsfoss.com/best-aur-helpers/
function do_pakku () {
	pkg="${PARU:-"${AUR-}"}"
	if test -n "$pkg" && command-exists pakku; then
		pakku -Sy "$pkg"
	else
		return 1
	fi
}

# aurutils / AUR / Arch Linux
# https://itsfoss.com/best-aur-helpers/
function do_aurutils () {
	pkg="${AURUTILS:-"${AUR-}"}"
	if test -n "$pkg" && command-exists aurutils; then
		aurutils -Sy "$pkg"
	else
		return 1
	fi
}

# pamac / AUR / Arch Linux
# https://itsfoss.com/best-aur-helpers/
function do_pamac () {
	pkg="${PAMAC:-"${AUR-}"}"
	if test -n "$pkg"; then
		if command-missing pamac; then
			fallbacks+=('pamac')
			return 1
		fi
		pamac install --no-confirm "$pkg"
	else
		return 1
	fi
}
function do_pamac_fallback () {
	setup-util-pamac
	do_pamac "$@"
}

# flatpak / Arch Linux / Manjaro
function do_flatpak () {
	pkg="${FLATPAK:-"${FLATPACK-}"}"  # accomodate typo
	repo="${FLATPAK_REPO:-"${FLATPACK_REPO:-flathub}"}"  # accomodate typo
	if test -n "$pkg"; then
		if command-missing flatpak; then
			fallbacks+=('flatpak')
			return 1
		fi
		flatpak install "$repo" "$pkg"
	else
		return 1
	fi
}
function do_flatpak_fallback () {
	setup-util-flatpak
	do_flatpak "$@"
}

# snap / Snap Craft / Ubuntu
function do_snap () {
	if test -n "${SNAP-}"; then
		if command-missing snap; then
			fallbacks+=('snap')
			return 1
		fi
		args=()
		# support multiple args
		mapfile -t args < <(echo-split ' ' -- "$SNAP")
		# add `--classic` if `SNAP_CLASSIC` affirmative
		if is-affirmative "${SNAP_CLASSIC-}"; then
			args+=('--classic')
		fi
		# support `SNAP_CHANNEL`
		if test -n "${SNAP_CHANNEL-}"; then
			snap install --channel="${SNAP_CHANNEL}" "${args[@]}"
		else
			snap install "${args[@]}"
		fi
	else
		return 1
	fi
}
function do_snap_fallback () {
	setup-util-snap
	do_snap "$@"
}

# yum / RedHat / Fedora / CentOS / etc
function do_yum () {
	if test -n "${YUM_EVAL-}" && command-exists yum; then
		eval "${YUM_EVAL}"
	elif test -n "${YUM-}" && command-exists yum; then
		if test -n "${YUM_REPO-}"; then
			cd /etc/yum.repos.d/ || exit 1
			wget "$YUM_REPO"
		fi
		sudo yum install -y "${YUM}"
	else
		return 1
	fi
}

# apt / Ubuntu / Debian / Linux Mint / elementary OS / etc
# can also be used for install .deb files
function do_apt () {
	if test -n "${APT_EVAL-}" && is-apt; then
		eval "${APT_EVAL}"
	elif test -n "${APT-}" && is-apt; then
		# support multiple args
		mapfile -t args < <(echo-split ' ' -- "$APT")
		if test -n "${APT_KEY-}"; then
			fetch "${APT_KEY}" | sudo apt-key add -
		fi
		if test -n "${APT_REPO-}"; then
			sudo apt-add-repository -y "$APT_REPO"
			sudo apt-get update
		fi
		sudo apt install -y --fix-broken "${args[@]}"
	else
		return 1
	fi
}

# apk / Alpine Linux
function do_apk () {
	if test -n "${APK-}" && command-exists apk; then
		# support multiple args
		mapfile -t args < <(echo-split ' ' -- "$APK")
		apk add "${args[@]}"
	else
		return 1
	fi
}

# nix
function do_nix () {
	if test -n "${NIX-}" && command-exists nix-env; then
		nix-env -iA "${NIX}"
	else
		return 1
	fi
}

# xbps / Void Linux
function do_xbps () {
	if test -n "${XBPS-}" && command-exists xbps-install; then
		xbps-install -S "${XBPS}"
	else
		return 1
	fi
}

# eopkg / Solus
function do_eopkg () {
	if test -n "${EOPKG-}" && command-exists eopkg; then
		sudo eopkg it "${EOPKG}"
	else
		return 1
	fi
}

# emerge / GURU / Gentoo Linux
function do_emerge () {
	if test -n "${EMERGE_EVAL-}" && command-exists emerge; then
		eval "${EMERGE_EVAL}"
	elif test -n "${EMERGE-}" && command-exists emerge; then
		sudo emerge -av "${EMERGE}"
	else
		return 1
	fi
}

# dnf / COPR / Fedora / CentOS / RHEL
function do_dnf () {
	if test -n "${DNF_EVAL-}" && command-exists dnf; then
		eval "${DNF_EVAL}"
	elif test -n "${DNF-}" && command-exists dnf; then
		if test -n "${DNF_COPR-}"; then
			sudo dnf copr enable -y "${DNF_COPR}"
		fi
		if test -n "${DNF_REPO-}"; then
			sudo dnf config-manager -y --add-repo "$DNF_REPO"
		fi
		sudo dnf install -y "${DNF}"
	else
		return 1
	fi
}

# zypper / openSUSE / SLES
function do_zypper () {
	if test -n "${ZYPPER_EVAL-}" && command-exists zypper; then
		eval "${ZYPPER_EVAL}"
	elif test -n "${ZYPPER-}" && command-exists zypper; then
		if test -n "${ZYPPER_REPO-}"; then
			zypper addrepo "$ZYPPER_REPO"
			zypper refresh
		fi
		zypper install "${ZYPPER}"
	else
		return 1
	fi
}

# port / MacPorts
function do_port () {
	if test -n "${PORT-}" && command-exists port; then
		sudo port install "${PORT}"
	else
		return 1
	fi
}

# choco / Chocolatey / Windows
function do_choco () {
	if test -n "${CHOCO-}" && command-exists choco; then
		choco install "${CHOCO}"
	else
		return 1
	fi
}

# scoop / Windows
function do_scoop () {
	if test -n "${SCOOP-}" && command-exists scoop; then
		scoop install "${SCOOP}"
	else
		return 1
	fi
}

# winget / Windows Package Manager Client
function do_winget () {
	if test -n "${WINGET-}" && command-exists winget; then
		winget install "${WINGET}"
	else
		return 1
	fi
}

# pkg / FreeBSD / Termux
function do_pkg () {
	if test -n "${PKG-}" && command-exists pkg; then
		pkg install "${PKG}"
	else
		return 1
	fi
}

# pkgutil / Solaris 10+, Sparc and x86.
function do_pkgutil () {
	if test -n "${PKGUTIL-}" && command-exists pkgutil; then
		pkgutil -i "${PKG}"
	else
		return 1
	fi
}

# huber
function do_huber () {
	if test -n "${HUBER-}" && command-exists huber; then
		huber install "${HUBER}"
	else
		return 1
	fi
}

# guix
function do_guix () {
	if test -n "${GUIX-}" && command-exists guix; then
		guix package -i "${GUIX}"
	else
		return 1
	fi
}

# dpkg / Debian / Ubuntu / Linux Mint / elementary OS / etc
# used for installing .deb files
function do_dpkg () {
	if command-exists dpkg; then
		if test -n "${DPKG-}"; then
			sudo dpkg --install "${DPKG}"
		elif test -n "${DPKG_EVAL-}"; then
			eval "${DPKG_EVAL}"
		fi
	else
		return 1
	fi
}

# doas / Solaris
function do_doas () {
	if test -n "${DOAS-}" && command-exists doas; then
		doas pkg_add "${DOAS}"
	else
		return 1
	fi
}

# pkg_add / OpenBSD
function do_pkg () {
	if test -n "${PKGADD-}" && command-exists pkg_add; then
		pkg_add "${PKGADD}"
	else
		return 1
	fi
}

# pkgin/ NetBSD
function do_pkgin () {
	if test -n "${PKGIN-}" && command-exists pkgin; then
		pkgin install "${PKGIN}"
	else
		return 1
	fi
}

# pkgman / Haiku
function do_pkgman () {
	if test -n "${PKGMAN-}" && command-exists pkgman; then
		pkgman install "${PKGMAN}"
	else
		return 1
	fi
}

# stack
function do_stack () {
	if test -n "${STACK-}" && command-exists stack; then
		stack update
		stack install "${STACK}"
	else
		return 1
	fi
}

# cabal
function do_cabal () {
	if test -n "${CABAL-}" && command-exists cabal; then
		cabal update
		cabal install "${CABAL}"
	else
		return 1
	fi
}

# conda
function do_conda () {
	if test -n "${CONDA-}" && command-exists conda; then
		if test -n "${CONDA_CHANNEL-}"; then
			conda install -c "${CONDA_CHANNEL}" "${CONDA}"
		else
			conda install "${CONDA}"
		fi
	else
		return 1
	fi
}

# npm / Node.js
function do_npm () {
	if test -n "${NPM-}"; then
		if command-missing npm; then
			fallbacks+=('npm')
			return 1
		fi
		# support NPM holding multiple args
		mapfile -t args < <(echo-split ' ' -- "$NPM")
		args+=('--global')
		if is-affirmative "${NPM_FORCE-}"; then
			args+=('--force')
		fi
		npm install "${args[@]}"
	else
		return 1
	fi
}
function do_npm_fallback () {
	setup-node
	source "$DOROTHY/sources/paths.sh"
	set +e  # nvm prevents strict from working: .nvm/nvm.sh: line 1966: TMPDIR: unbound variable
	source "$DOROTHY/sources/nvm.sh"
	do_npm "$@"
}

# go
function do_go () {
	if test -n "${GO-}"; then
		if command-missing go; then
			fallbacks+=('go')
			return 1
		fi
		go get -u -v "$GO"
	else
		return 1
	fi
}
function do_go_fallback () {
	setup-go
	source "$DOROTHY/sources/paths.sh"
	do_go "$@"
}

# pip / Python
function do_pip () {
	if test -n "${PIP-}"; then
		if ! silent pipp --version; then
			fallbacks+=('pip')
			return 1
		fi
		pipp install --user --upgrade --force-reinstall --no-warn-script-location "$PIP"
	else
		return 1
	fi
}
function do_pip_fallback () {
	setup-python
	source "$DOROTHY/sources/paths.sh"
	do_pip "$@"
}

# gem / Ruby
function do_gem () {
	# we use --user-install because of:
	# https://github.com/ffi/ffi/issues/631
	if test -n "${GEM-}"; then
		if command-missing gem; then
			fallbacks+=('gem')
			return 1
		fi
		silent gem uninstall "$GEM" -axI
		if test -n "${GEM_VERSION-}"; then
			gem install "$GEM" --version "$GEM_VERSION" --user-install --no-document
		else
			gem install "$GEM" --user-install --no-document
		fi
	else
		return 1
	fi
}
function do_gem_fallback () {
	setup-ruby
	source "$DOROTHY/sources/paths.sh"
	do_gem "$@"
}

# cargo / Crates.io / Rust
function do_cargo () {
	if test -n "${CARGO-}"; then
		if command-missing cargo; then
			fallbacks+=('cargo')
			return 1
		fi
		if ! is-affirmative "${QUIET-}"; then
			log-performance
		fi
		cargo install "${CARGO}"
	else
		return 1
	fi
}
function do_cargo_fallback () {
	setup-rust
	source "$DOROTHY/sources/paths.sh"
	do_cargo "$@"
}

# curl / Manual Installer
function do_curl () {
	if test -n "${CURL-}"; then
		sh -c "$(fetch "$CURL")"
	else
		return 1
	fi
}

# zip / Manual Installer
function do_zip () {
	if test -n "${ZIP-}"; then
		mkdir -p "$HOME/bin"
		if test -n "${ZIP_FILE-}"; then
			down-zip "$ZIP" --filter="$ZIP_FILE" --destination="$HOME/bin"
		else
			down-zip "$ZIP" --destination="$HOME/bin"
		fi
	else
		return 1
	fi
}

# -------------------------------------

# arguments specify the order
order=("$@")
if is-array-partial "${order[@]}"; then
	stderr echo "an invalid order value was present:"
	stderr echo-verbose "${order[@]}"
	stderr echo
	stderr echo "will set the order to the defaults..."
	order=()
fi
# fallback the order to defaults if no custom order provided
if is-array-empty "${order[@]}"; then
	order=(
		# intelligent
		brew
		cask

		# precompiled
		pacman
		apt
		apk
		yum

		# precompiled containers
		snap

		# source containers
		flatpak

		# aur
		# https://itsfoss.com/paru-aur-helper/
		# https://itsfoss.com/best-aur-helpers/
		yay
		pakku
		paru
		aurutils
		pamac

		# source
		cargo
		npm
		go
		pip
		gem

		# unknown
		cabal
		choco
		conda
		dnf
		doas
		dpkg
		emerge
		eopkg
		guix
		huber
		nix
		pkg
		pkgin
		pkgman
		pkgutil
		port
		scoop
		stack
		winget
		xbps
		zypper

		# custom
		curl
		zip
	)
fi

# cycle through the order
for item in "${order[@]}"; do
	pass='y'
	"do_${item}" || pass='n'
	if test "${pass}" = 'y'; then
		won
		exit 0
	fi
	# stderr echo "failed via ${item}"
done

# fallback for failed packages which are missing their package system
for item in "${fallbacks[@]}"; do
	pass='y'
	"do_${item}_fallback" || pass='n'
	if test "${pass}" = 'y'; then
		won
		exit 0
	fi
done

# failure
lost
exit 1
