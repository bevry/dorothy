#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

if is-needle '--quiet' "$@" || is-affirmative "${QUIET-}"; then
	if test -n "${CLI-}"; then
		if command-missing "${CLI}"; then
			stderr echo "missing utility [$CLI], installing automatically..."
			stderr setup-util
			exit $?
		else
			exit 0
		fi
	else
		stderr setup-util
		exit $?
	fi
fi

# these should be sorted in order of preference, which for now I am unsure
# perhaps the order could even be a preference
# like UTIL_INSTALLERS=("apt" "yum" "zypper")

# perhaps instead of using ENV, we can use arguments instead, but that would require fancy parsing
# as such, perhaps this can be rewritten as a rust util?

if test -n "${CLI-}" && command-exists "${CLI}"; then
	echo "${CLI} already installed"
	exit 0
elif test -n "${BREW-}" && is-brew; then # brew / Homebrew / macOS
	brew install "${BREW}"
elif test -n "${CASK-}" && is-brew; then # brew / Homebrew / macOS
	brew install --cask "${CASK}"
elif test -n "${YAY-}" && command-exists yay; then # yay / AUR / Arch Linux
	yay -Sy "${YAY}"
elif test -n "${SNAP-}" && command-exists snap; then # snap/ Snap Craft / Ubuntu
	sudo snap install "${SNAP}"
elif test -n "${YUM_EVAL-}" && command-exists yum; then # yum / RedHat / Fedora / CentOS / etc
	eval "${YUM_EVAL}"
elif test -n "${YUM-}" && command-exists yum; then # yum / RedHat / Fedora / CentOS / etc
	if test -n "${YUM_REPO-}"; then
		cd /etc/yum.repos.d/ || exit 1
		wget "$YUM_REPO"
	fi
	sudo yum install "${YUM}"
elif test -n "${APT_EVAL-}" && is-apt; then # apt / Ubuntu / Debian / Linux Mint / elementary OS / etc
	eval "${APT_EVAL}"
elif test -n "${APT-}" && is-apt; then # apt / Ubuntu / Debian / Linux Mint / elementary OS / etc
	if test -n "${APT_REPO-}"; then
		sudo apt-add-repository -y "$APT_REPO"
		sudo apt-get update
	fi
	sudo apt install -y "${APT}"
elif test -n "${APK-}" && command-exists apk; then # apk / Alpine Linux
	apk add bat "${APK}"
elif test -n "${PACMAN-}" && command-exists pacman; then # pacman / Arch Linux
	sudo pacman -S "${PACMAN}"
elif test -n "${NIX-}" && command-exists nix-env; then # nix
	nix-env -iA "${NIX}"
elif test -n "${XBPS-}" && command-exists xbps-install; then # xbps / Void Linux
	xbps-install -S "${XBPS}"
elif test -n "${EOPKG-}" && command-exists eopkg; then # eopkg / Solus
	sudo eopkg it "${EOPKG}"
elif test -n "${EMERGE_EVAL-}" && command-exists emerge; then # emerge / GURU / Gentoo Linux
	eval "${EMERGE_EVAL}"
elif test -n "${EMERGE-}" && command-exists emerge; then # emerge / GURU / Gentoo Linux
	sudo emerge -av "${EMERGE}"
elif test -n "${DNF_EVAL-}" && command-exists dnf; then # dnf / COPR / Fedora / CentOS / RHEL
	eval "${DNF_EVAL}"
elif test -n "${DNF-}" && command-exists dnf; then # dnf / COPR / Fedora / CentOS / RHEL
	if test -n "${DNF_COPR-}"; then
		sudo dnf copr enable -y "${DNF_COPR}"
	fi
	if test -n "${DNF_REPO-}"; then
		sudo dnf config-manager --add-repo "$DNF_REPO"
	fi
	sudo dnf install "${DNF}"
elif test -n "${ZYPPER_EVAL-}" && command-exists zypper; then # zypper / openSUSE / SLES
	eval "${ZYPPER_EVAL}"
elif test -n "${ZYPPER-}" && command-exists zypper; then # zypper / openSUSE / SLES
	if test -n "${ZYPPER_REPO-}"; then
		zypper addrepo "$ZYPPER_REPO"
		zypper refresh
	fi
	zypper install "${ZYPPER}"
elif test -n "${PORT-}" && command-exists port; then # port / MacPorts
	sudo port install "${PORT}"
elif test -n "${CHOCO-}" && command-exists choco; then # choco / Chocolatey / Windows
	choco install "${CHOCO}"
elif test -n "${SCOOP-}" && command-exists scoop; then # scoop / Windows
	scoop install "${SCOOP}"
elif test -n "${WINGET-}" && command-exists winget; then # winget / Windows Package Manager Client
	winget install "${WINGET}"
elif test -n "${PKG-}" && command-exists pkg; then # pkg / FreeBSD / Termux
	pkg install "${PKG}"
elif test -n "${PKGUTIL-}" && command-exists pkgutil; then # pkgutil / Solaris 10+, Sparc and x86.
	pkgutil -i "${PKG}"
elif test -n "${NPM-}" && command-exists npm; then # npm / Node.js
	npm install -g "${NPM}"
elif test -n "${HUBER-}" && command-exists huber; then # huber
	huber install "${HUBER}"
elif test -n "${GUIX-}" && command-exists guix; then # guix
	guix package -i "${GUIX}"
elif test -n "${DPKG_EVAL-}" && command-exists dpkg; then # dpkg / Debian / Ubuntu / Linux Mint / elementary OS / etc
	eval "${DPKG_EVAL}"
elif test -n "${DOAS-}" && command-exists doas; then # doas / Solaris
	doas pkg_add "${DOAS}"
elif test -n "${PKGADD-}" && command-exists pkg_add; then # pkg_add / OpenBSD
	pkg_add "${PKGADD}"
elif test -n "${PKGIN-}" && command-exists pkgin; then # pkgin/ NetBSD
	pkgin install "${PKGIN}"
elif test -n "${PKGMAN-}" && command-exists pkgman; then # pkgman / Haiku
	pkgman install "${PKGMAN}"
elif test -n "${CONDA-}" && command-exists conda; then # conda
	if test -n "${CONDA_CHANNEL-}"; then
		conda install -c "${CONDA_CHANNEL}" "${CONDA}"
	else
		conda install "${CONDA}"
	fi
elif test -n "${PIP-}" && pipp --version; then # pip / Python
	pip-install "${PIP}"
elif test -n "${CARGO-}" && command-exists cargo; then # cargo / Crates.io / Rust
	if command-missing cargo; then
		stderr echo 'missing dependency [rust], installing automatically...'
		stderr setup-rust
	fi
	# this should be one of the last, as cargo has to fetch binaries for every dependency
	# rather than just using a precompiled bundle
	cargo install "${CARGO}"
elif test -n "${CURL-}" && command-exists curl; then # curl / Manual Installer
	sh -c "$(fetch "$CURL")"
else
	stderr echo 'unable to install utility on this platform'
	exit 1
fi
