#!/usr/bin/env bash

# https://github.com/rfjakob/gocryptfs/blob/master/Documentation/MANPAGE.md

function gocryptfs_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Wrappers around gocryptfs to make things easier.

			USAGE:
			gocryptfs-helper <action>

			ACTIONS:
			new -- <vault>
			    Creates a new vault at <vault> with the best algorithm for it.

			compare -- <vault-one> <vault-two>
			    Compares the features of two vaults, returning 0 if the same.

			features -- <vault>
			    Outputs the enabled feature flags of teh gocryptfs vault.

			info -- <vault>
			    Prints information about gocryptfs version, speed, and vault information.

			migrate -- <vault>
			    Upgrades the gocryptfs vault to the best algorithm for it, this can take a while.

			mount -- <vault> <mount-point> [--owner=<owner>] [--user=<user>] [--group=<group>]
			    Mounts the vault at the mount-point.

			unmount -- <mount-pount>
			    Unmounts the mount-point.

			upgrade -- <vault>
			    Upgrades the gocryptfs version.

			version
			    Prints the version of gocryptfs.

			verify -- <vault> [--user=<user>] [--group=<group>]
			    Verifies that the path is a gocryptfs vault.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$action"; then
				action="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure valid action
	local actions=(
		new
		compare
		features
		info
		migrate
		mount
		unmount
		upgrade
		verify
		version
	)
	action="$(
		choose-option --required \
			--question='What action to perform?' \
			--filter="$action" -- "${actions[@]}"
	)"

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"
	setup-util-gocryptfs --quiet

	# =====================================
	# Helpers

	# -------------------------------------
	# Minor Actions

	function act_version {
		gocryptfs --version | rg --only-matching --regexp='20\d+-\d+-\d+'
	}
	function act_info {
		local vault="${1-}"
		eval-helper --no-quiet --wrap \
			-- gocryptfs --speed # dumps version info
		if test -n "$vault"; then
			eval-helper --no-quiet --wrap \
				-- gocryptfs --info "$vault" # dumsps vault info
		fi
	}
	function act_verify {
		# process
		local item vault='' owner='' user='' group=''
		while test "$#" -ne 0; do
			item="$1"
			shift
			case "$item" in
			'--help' | '-h') help ;;
			'--user='*) user="${item#*=}" ;;
			'--group='*) group="${item#*=}" ;;
			'--'*) help "An unrecognised flag was provided: $item" ;;
			*)
				if test -z "$vault"; then
					vault="$item"
				else
					help "An unrecognised argument was provided: $item"
				fi
				;;
			esac
		done

		local cmd=() cmd_status
		if test -n "$user" -o -n "$group"; then
			cmd+=(
				'sudo-helper'
				"--user=$user"
				"--group=$group"
				'--'
			)
		fi
		cmd+=(
			'test'
			'-f'
			"$vault/gocryptfs.conf"
		)
		eval_capture --statusvar=cmd_status -- "${cmd[@]}"
		if test "$cmd_status" -eq 0; then
			echo-style --success="${vault@Q} is a gocryptfs vault"
		else
			echo-style --error="${vault@Q} is not a gocryptfs vault" >/dev/stderr
			return 1
		fi
	}
	function act_features {
		local vault="$1"
		gocryptfs --info "$vault" | grep FeatureFlags
	}
	function act_compare {
		local old_vault="$1" new_vault="$2" result=0
		local old_vault_features new_vault_features
		old_vault_features="$(
			act_features "$old_vault"
		)"
		new_vault_features="$(
			act_features "$new_vault"
		)"

		# compare the features
		if test "$old_vault_features" = "$new_vault_features"; then
			echo-style --success="Vaults have the same features."
			result=0
		else
			echo-style --warning="Vaults have different features."
			result=1
		fi
		echo-element --open="$old_vault"
		print_line "$old_vault_features"
		echo-element --close="$old_vault"
		echo-element --open="$new_vault"
		print_line "$new_vault_features"
		echo-element --close="$new_vault"
		return "$result"
	}
	function act_upgrade {
		setup-util-gocryptfs --upgrade
	}
	function act_mount {
		# process
		local item mount_source='' mount_target='' owner='' user='' group=''
		while test "$#" -ne 0; do
			item="$1"
			shift
			case "$item" in
			'--help' | '-h') help ;;
			'--owner='*) owner="${item#*=}" ;;
			'--user='*) user="${item#*=}" ;;
			'--group='*) group="${item#*=}" ;;
			'--'*) help "An unrecognised flag was provided: $item" ;;
			*)
				if test -z "$mount_source"; then
					mount_source="$item"
				elif test -z "$mount_target"; then
					mount_target="$item"
				elif test -z "$owner"; then
					owner="$item"
				else
					help "An unrecognised argument was provided: $item"
				fi
				;;
			esac
		done

		# check
		if test -z "$mount_source" -o -z "$mount_target"; then
			help "No <path>s provided."
		fi

		# construct command
		local mount_cmd=() ls_cmd=()
		if test -n "$owner" -o -n "$user" -o -n "$group"; then
			# https://github.com/rfjakob/gocryptfs/issues/638#issuecomment-1009578054
			mount_cmd+=(
				'sudo-helper'
				"--user=$user"
				"--group=$group"
				'--'
			)
			ls_cmd+=(
				'sudo-helper'
				"--user=$user"
				"--group=$group"
				'--'
			)
		fi
		mount_cmd+=(
			'gocryptfs'
			'--rw'
			'--noprealloc'
			'--allow_other'
		)
		if test -n "$owner"; then
			mount_cmd+=(
				'--force_owner'
				"$owner"
			)
		fi
		mount_cmd+=(
			"$mount_source"
			"$mount_target"
		)
		ls_cmd+=(
			'ls'
			'-la'
			"$mount_target"
		)

		# mount
		cat <<-EOF
			$(echo-style --bold="Enter the cipher password for mounting:")
			$(echo-quote -- "$mount_source") => $(echo-quote -- "$mount_target")
		EOF
		eval-helper --no-quiet --wrap \
			-- "${mount_cmd[@]}"
		eval-helper --no-quiet --wrap \
			-- "${ls_cmd[@]}"
		if test -n "$owner" -o -n "$user" -o -n "$group"; then
			eval-helper --no-quiet --wrap \
				-- fs-own --owner="$owner" --user="$user" --group="$group" \
				-- "$mount_target"
		fi
		echo
	}

	# -------------------------------------
	# Init Action

	function act_new {
		local new_vault="$1" algorithm=''

		# optional
		if is-raspi; then
			algorithm='xchacha'
		fi
		algorithm="$(
			choose-option \
				--question="Which algorithm to use for the new vault?" \
				--label --filter="$algorithm" -- aessiv 'AES-SIV (RFC5297) - Best for AES Hardware Acceleration' xchacha 'XChaCha20-Poly1305 — Best for Raspberry Pi'
		)"

		# create
		if is-missing -- "$new_vault" || is-empty-ls -- "$new_vault"; then
			mkdir -p "$new_vault"
			echo-style --bold="Creating a new vault vault at [$new_vault] with algorithm [$algorithm]."
			gocryptfs --init --"$algorithm" "$new_vault"
		else
			{
				echo-style --error="Something already existed at [$new_vault]..."
				echo-style --notice='Leaving for you to figure out.'
				eval-helper --no-quiet --wrap -- ls -la "$new_vault"
			} >/dev/stderr
			return 1
		fi
	}

	# -------------------------------------
	# Migrate Action

	function act_migrate {
		local old_vault="$1" algorithm='' verify_status compare_status temp_dir new_vault old_plain new_plain

		# optional
		if is-raspi; then
			algorithm='xchacha'
		fi
		algorithm="$(
			choose-option \
				--question="Which algorithm to use for the new vault?" \
				--label --filter="$algorithm" -- aessiv 'AES-SIV (RFC5297) - Best for AES Hardware Acceleration' xchacha 'XChaCha20-Poly1305 — Best for Raspberry Pi'
		)"

		# prepare temporary mountpoints
		temp_dir="$(fs-temp --directory='gocryptfs-helper' --directory)"
		new_vault="$(fs-temp --root="$temp_dir" --directory='new_vault')"
		old_plain="$(fs-temp --root="$temp_dir" --directory='old_plain')"
		new_plain="$(fs-temp --root="$temp_dir" --directory='new_plain')"

		# ensure clean exit
		if test "$0" != "${BASH_SOURCE[0]}"; then
			echo-error '[gocryptfs-helper migrate] requires being run as a command, not a function, such that cleanup always occurs, even on failures.'
			return 1 # EPERM 1 Operation not permitted
		fi
		function on_gocryptfs_finish {
			mount-helper --unmount --target="$old_plain" || :
			mount-helper --unmount --target="$new_plain" || :
			fs-rm --quiet -- "$temp_dir" || :
		}
		trap on_gocryptfs_finish EXIT

		# create
		echo
		eval_capture --statusvar=verify_status -- act_verify "$new_vault"
		if test "$verify_status" -eq 0; then
			cat <<-EOF
				$(echo-style --notice="The new vault [$new_vault] already exists...")
				This means a vault upgrade was started but not finished.
				We will continue with this vault, if you wish setup a new one, remove the old one first.
			EOF
		elif is-missing -- "$new_vault" || is-empty-ls -- "$new_vault"; then
			echo-style --bold="Creating a new vault vault at [$new_vault] with algorithm [$algorithm]."
			gocryptfs --init --"$algorithm" "$new_vault"
			act_chown "$new_vault"
		else
			{
				echo-style --error="Something already existed at [$new_vault] which was not a known vault structure..."
				echo-style --notice='Leaving for you to figure out.'
				eval-helper --no-quiet --wrap -- ls -la "$new_vault"
			} >/dev/stderr
			return 1
		fi
		# gocryptfs --info "$new_vault"

		# verify there is a difference
		eval_capture --statusvar=compare_status -- act_compare "$old_vault" "$new_vault"
		if test "$compare_status" -eq 0; then
			echo-style --error='Vault migration is nonsensical, as both vaults have the same features.' >/dev/stderr
			return 1
		fi

		# mount
		act_mount "$old_vault" "$old_plain"
		act_mount "$new_vault" "$new_plain"

		# migrate
		cpr --remove --tool=rsync -- \
			"${old_plain}/" \
			"${new_plain}/"

		# replace
		echo
		print_line "Prepping replacement:"
		fs-rm --no-confirm -- "$old_plain/"
		fs-size -- "$new_plain/"
		mount-helper \
			-- --unmount --target="$old_plain" \
			-- --unmount --target="$new_plain"
		fs-size -- "$old_vault" "$new_vault"
		cat <<-EOF
			$(echo-style --bold="Confirm the following replacement:")
			Delete:  $old_vault
			Move:    $new_vault  =>  $old_vault
		EOF
		if ! confirm --bool --ppid=$$ -- "Proceed with replacement?"; then
			return 1
		fi
		fs-rm --no-confirm -- "$old_vault"
		sudo-helper -- mv --verbose "$new_vault" "$old_vault"
		cat <<-EOF
			$(echo-style --bold="Replacement complete:")
			Deleted:  $old_vault
			Moved:    $new_vault  =>  $old_vault
		EOF

		# done
		cat <<-EOF
			$(echo-style --success="Migration complete. ✅")
		EOF
	}

	# =====================================
	# Act

	if test "$(type -t "act_$action")" = 'function'; then
		"act_$action" "${option_args[@]}"
	else
		echo-style --error="Action [$action] not yet implemented." >/dev/stderr
		return 78 # ENOSYS 78 Function not implemented
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	gocryptfs_helper "$@"
fi
