#!/usr/bin/env bash

function eval_tester() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P debug-bash)"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			eval-tester [...options] -- <command> [...args]

			OPTIONS:
			--name=<test name>
			--status=<expected exit code> (defaults to 0)
			--ignore-status
			--stdout=<expected stdout> (defaults to empty)
			--ignore-stdout
			--stderr=<expected stderr> (defaults to empty)
			--ignore-stderr
			--debug (implies --ignore-stderr)
			--bash=<bash path>
			    Used to ensure that the command is invoked through a specific bash binary.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_cmd=() ignore_option=$'\e' option_name='' option_bash='' option_status='0' option_stdout='' option_stderr='' option_debug='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--name='*) option_name="${item#*=}" ;;
		'--bash='*) option_bash="${item#*=}" ;; # unlike [dorothy test] and [debug-bash] only support a single bash binary here, as nothing else makes sense for the [eval-tester] use case, as it is for getting specific results for a specific bash version
		'--ignore-status') option_status="$ignore_option" ;;
		'--ignore-stdout') option_stdout="$ignore_option" ;;
		'--ignore-stderr') option_stderr="$ignore_option" ;;
		'--status='*) option_status="${item#*=}" ;;
		'--stdout='*) option_stdout="${item#*=}" ;;
		'--stderr='*) option_stderr="${item#*=}" ;;
		'--no-debug'* | '--debug'*)
			option_debug="$(get-flag-value --affirmative --fallback="$option_debug" -- "$item")"
			;;
		'--')
			option_cmd+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# if debugging, or custom bash, wrap in debug_bash
	if [[ $option_debug == 'yes' && -n $option_bash ]]; then
		option_cmd=(debug_bash -x --bash="$option_bash" -- "${option_cmd[@]}")
	elif [[ $option_debug == 'yes' ]]; then
		option_cmd=(debug_bash -x -- "${option_cmd[@]}")
	elif [[ -n $option_bash ]]; then
		option_cmd=(debug_bash --bash="$option_bash" -- "${option_cmd[@]}")
	fi

	# =====================================
	# Action

	# run the command
	local args=() cmd_status stdout stderr cmd_string fail='no' title='' using_tty_stderr_fallback='no'
	cmd_string="$(echo-escape-command -- "${option_cmd[@]}")"
	if [[ -n $option_name ]]; then
		title="$option_name: $cmd_string"
	else
		title="$cmd_string"
	fi
	if ! get-terminal-tty-support --quiet; then
		using_tty_stderr_fallback='yes'
	fi
	if [[ -n $option_status && $option_status != "$ignore_option" ]]; then
		args+=('--statusvar=cmd_status')
	fi
	if [[ $option_stdout != "$ignore_option" ]]; then
		args+=('--stdoutvar=stdout')
	else
		args+=('--no-stdout')
	fi
	if [[ $option_debug == 'yes' || $using_tty_stderr_fallback == 'yes' ]]; then
		: # allow stderr to go directly to stderr
	elif [[ $option_stderr != "$ignore_option" ]]; then
		args+=('--stderrvar=stderr')
	else
		args+=('--no-stderr')
	fi
	echo-style --h3="$title"
	eval_capture "${args[@]}" -- "${option_cmd[@]}"

	# check exit code
	if [[ -n $option_status && $option_status != "$ignore_option" ]]; then
		if [[ $option_status -ne $cmd_status ]]; then
			fail='yes'
			echo-style --red="Actual Exit Code [$cmd_status]  !=  Expected Exit Code [$option_status]"
		else
			echo-style --green="Actual Exit Code [$cmd_status]  ==  Expected Exit Code [$option_status]"
		fi
	fi

	# check stdout
	if [[ $option_stdout != "$ignore_option" ]]; then
		if [[ $option_stdout != "$stdout" ]]; then
			fail='yes'
			echo-style --red="Actual Stdout  !=  Expected Stdout" $'\n' \
				--header3='<actual stdout>' $'\n' \
				"$stdout" $'\n' \
				--header3='</actual stdout>' $'\n' \
				--header3='<expected stdout>' $'\n' \
				"$option_stdout" $'\n' \
				--header3='</expected stdout>'
			if [[ $option_stdout =~ [[:cntrl:]] || $stdout =~ [[:cntrl:]] ]]; then
				echo-style --header3='<actual escaped stdout>' $'\n' \
					"$(printf '%q' "$stdout")" $'\n' \
					--header3='</actual escaped stdout>' $'\n' \
					--header3='<expected escaped stdout>' $'\n' \
					"$(printf '%q' "$option_stdout")" $'\n' \
					--header3='</expected escaped stdout>'
			fi
		else
			echo-style --green="Actual Stdout  ==  Expected Stdout"
		fi
	fi

	# check stderr
	if [[ $option_stderr != "$ignore_option" ]]; then
		if [[ $option_debug == 'yes' ]]; then
			echo-style --notice='Unable to test stderr, as debugging.'
		elif [[ $using_tty_stderr_fallback == 'yes' ]]; then
			echo-style --notice='Unable to test stderr, as it will be filled with TTY output.'
		elif [[ $option_stderr != "$stderr" ]]; then
			fail='yes'
			echo-style --red="Actual Stderr  !=  Expected Stderr" $'\n' \
				--header3='<actual stderr>' $'\n' \
				"$stderr" $'\n' \
				--header3='</actual stderr>' $'\n' \
				--header3='<expected stderr>' $'\n' \
				"$option_stderr" $'\n' \
				--header3='</expected stderr>'
		else
			echo-style --green="Actual Stderr  ==  Expected Stderr"
		fi
	fi

	# pass or fail
	if [[ $fail == 'yes' ]]; then
		echo-style --e3="$title" $'\n'
		return 1
	else
		echo-style --g3="$title" $'\n'
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	eval_tester "$@"
fi
