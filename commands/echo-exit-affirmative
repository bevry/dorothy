#!/usr/bin/env bash

function echo_exit_affirmative() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output the result of a command's exit status.

			USAGE:
			echo-exit-affirmative [...options] [--] ...<command>

			OPTIONS:
			--fallback=<fallback>
			    If provided, use this value when exit status is neither [0] or [1]

			EXAMPLES:
			echo-exit-affirmative -- waiter 0 --status=0
			    outputs: yes
			echo-exit-affirmative -- waiter 0 --status=1
			    outputs: no
			echo-exit-affirmative -- waiter 2 --status=2
			    exit status: 2
			echo-exit-affirmative --fallback=no -- waiter 0 --status=2
			    outputs: no
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local rand="$RANDOM"
	local item option_cmd=() option_fallback="$rand"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--fallback='*) option_fallback="${item#*=}" ;;
		'--')
			option_cmd+=("$@")
			shift "$#"
			break
			;;
		*) option_cmd+=("$item") ;;
		esac
	done

	# check
	if test "${#option_cmd[@]}" -eq 0; then
		help "No <command> was provided."
	fi

	# =====================================
	# Action

	local cmd_status
	eval_capture --statusvar=cmd_status -- "${option_cmd[@]}"
	if test "$cmd_status" -eq 0; then
		print_line 'yes'
	elif test "$cmd_status" -eq 1; then
		print_line 'no'
	elif test "$option_fallback" != "$rand"; then
		print_line "$option_fallback"
	else
		return "$cmd_status"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_exit_affirmative "$@"
fi
