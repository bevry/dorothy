#!/usr/bin/env bash

# https://starship.rs
# https://starship.rs/guide/#ðŸš€-installation
# cross-shell prompt

# https://github.com/starship/starship/releases
# starship-aarch64-apple-darwin.tar.gz
# starship-aarch64-pc-windows-msvc.zip
# starship-aarch64-unknown-linux-musl.tar.gz
# starship-arm-unknown-linux-musleabihf.tar.gz
# starship-i686-pc-windows-msvc.msi
# starship-i686-pc-windows-msvc.zip
# starship-i686-unknown-linux-musl.tar.gz
# starship-x86_64-apple-darwin.tar.gz
# starship-x86_64-pc-windows-msvc.msi
# starship-x86_64-pc-windows-msvc.zip
# starship-x86_64-unknown-freebsd.tar.gz
# starship-x86_64-unknown-linux-gnu.tar.gz
# starship-x86_64-unknown-linux-musl.tar.gz

function setup_util_starship() (
	source "$DOROTHY/sources/bash.bash"

	# configure
	function do_configure {
		# note nerd-font requirement
		if command-exists starship; then
			cat <<-EOF
				If you see unknown icons while using Starship, you probably require fonts:
				$(echo-style --code_notice='setup-util-noto-emoji') # for emojis
				$(echo-style --code_notice='setup-util-nerd-fonts') # for glyphs
				Then set your terminal to use one of the installed fonts.
			EOF
		fi

		# ensure nushell configuration works
		if command-exists nu; then
			setup-util-nu --quiet
		fi
	}

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=starship; then
		do_configure
		return 0
	fi

	# don't interfere with github download:
	# INSTALLER='https://starship.rs/install.sh'
	local arch options=(
		--name='Starship'
		--cli='starship'
		"$@"
		BREW='starship'
		SCOOP='starship'
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='starship/starship' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB="$2"
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-apple-darwin.tar.gz' 'starship'
		elif test "$arch" = 'x64'; then
			add_download_option '-x86_64-apple-darwin.tar.gz' 'starship'
		fi
	elif is-linux; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-unknown-linux-musl.tar.gz' 'starship'
		elif test "$arch" = 'a32'; then
			add_download_option '-arm-unknown-linux-musl.tar.gz' 'starship'
		elif test "$arch" = 'x64'; then
			add_download_option '-x86_64-unknown-linux-musl.tar.gz' 'starship'
		elif test "$arch" = 'x32'; then
			add_download_option '-i686-unknown-linux-musl.tar.gz' 'starship'
		fi
	elif is-wsl; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-pc-windows-msvc.zip' 'starship.exe'
		elif test "$arch" = 'x64'; then
			add_download_option '-x86_64-pc-windows-msvc.zip' 'starship.exe'
		elif test "$arch" = 'x32'; then
			add_download_option '-i686-pc-windows-msvc.zip' 'starship.exe'
		fi
	fi
	setup-util "${options[@]}"
	# .msi failed with: This installation package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer package.
	#
	# function add_installer_option {
	# 	options+=(
	# 		INSTALLER="$(get_github_asset_url "$1")"
	# 		INSTALLER_OPEN=yes
	# 	)
	# }
	# add_installer_option '-x86_64-pc-windows-msvc.msi'
	# add_installer_option '-i686-pc-windows-msvc.msi'

	# configure
	do_configure
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_starship "$@"
fi
