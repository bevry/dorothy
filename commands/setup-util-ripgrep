#!/usr/bin/env bash

# https://github.com/BurntSushi/ripgrep
# https://github.com/BurntSushi/ripgrep/issues/1094
# grep alternative

# https://github.com/BurntSushi/ripgrep/releases
# https://github.com/microsoft/ripgrep-prebuilt/releases
# ripgrep-v13.0.0-10-aarch64-apple-darwin.tar.gz
# ripgrep-v13.0.0-10-aarch64-pc-windows-msvc.zip
# ripgrep-v13.0.0-10-aarch64-unknown-linux-gnu.tar.gz
# ripgrep-v13.0.0-10-aarch64-unknown-linux-musl.tar.gz
# ripgrep-v13.0.0-10-arm-unknown-linux-gnueabihf.tar.gz
# ripgrep-v13.0.0-10-i686-pc-windows-msvc.zip
# ripgrep-v13.0.0-10-i686-unknown-linux-musl.tar.gz
# ripgrep-v13.0.0-10-powerpc64le-unknown-linux-gnu.tar.gz
# ripgrep-v13.0.0-10-s390x-unknown-linux-gnu.tar.gz
# ripgrep-v13.0.0-10-x86_64-apple-darwin.tar.gz
# ripgrep-v13.0.0-10-x86_64-pc-windows-msvc.zip
# ripgrep-v13.0.0-10-x86_64-unknown-linux-musl.tar.gz

# https://packages.debian.org/sid/amd64/ripgrep/filelist
# /usr/bin/rg

# https://repology.org/project/ripgrep/versions

function setup_util_ripgrep() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=rg; then
		return 0
	fi

	# setup
	local arch options=(
		--name='ripgrep'
		--cli='rg'
		"$@"
		APK='ripgrep' # ALPINE
		APT='ripgrep' # UBUNTU
		AUR='ripgrep' # ARCH
		BREW='ripgrep'
		BSD='ripgrep'
		CARGO='ripgrep'
		CHOCO='ripgrep'
		EMERGE='sys-apps/ripgrep' # GENTOO
		URPMI='ripgrep'           # MAGEIA
		NIX='ripgrep'
		PORT='ripgrep'
		RPM='ripgrep' # FEDORA
		SCOOP='ripgrep'
		TEA='+crates.io/ripgrep'
		ZYPPER='ripgrep' # SUSE
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='microsoft/ripgrep-prebuilt' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB="$2"
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-apple-darwin.tar.gz' 'rg'
		elif test "$arch" = 'x64'; then
			add_download_option '-x86_64-apple-darwin.tar.gz' 'rg'
		fi
	elif is-linux; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-unknown-linux-musl.tar.gz' 'rg'
		elif test "$arch" = 'a32'; then
			add_download_option '-arm-unknown-linux-gnueabihf.tar.gz' 'rg'
		elif test "$arch" = 'x64'; then
			add_download_option '-x86_64-unknown-linux-musl.tar.gz' 'rg'
		elif test "$arch" = 'x32'; then
			add_download_option '-i686-unknown-linux-musl.tar.gz' 'rg'
		fi
	elif is-wsl; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-pc-windows-msvc.zip' 'rg.exe'
		elif test "$arch" = 'x64'; then
			add_download_option '-x86_64-pc-windows-msvc.zip' 'rg.exe'
		elif test "$arch" = 'x32'; then
			add_download_option '-i686-pc-windows-msvc.zip' 'rg.exe'
		fi
	fi
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_ripgrep "$@"
fi
