#!/usr/bin/env bash

# https://github.com/Eugeny/tabby/releases
# tabby-1.0.205-linux-arm64.AppImage
# tabby-1.0.205-linux-arm64.deb
# tabby-1.0.205-linux-arm64.pacman
# tabby-1.0.205-linux-arm64.rpm
# tabby-1.0.205-linux-arm64.tar.gz
# tabby-1.0.205-linux-armv7l.AppImage
# tabby-1.0.205-linux-armv7l.deb
# tabby-1.0.205-linux-armv7l.pacman
# tabby-1.0.205-linux-armv7l.rpm
# tabby-1.0.205-linux-armv7l.tar.gz
# tabby-1.0.205-linux-x64.AppImage
# tabby-1.0.205-linux-x64.deb
# tabby-1.0.205-linux-x64.pacman
# tabby-1.0.205-linux-x64.rpm
# tabby-1.0.205-linux-x64.tar.gz
# tabby-1.0.205-macos-arm64.dmg
# tabby-1.0.205-macos-arm64.zip
# tabby-1.0.205-macos-x86_64.dmg
# tabby-1.0.205-macos-x86_64.zip
# tabby-1.0.205-portable-arm64.zip
# tabby-1.0.205-portable-x64.zip
# tabby-1.0.205-setup-arm64.exe
# tabby-1.0.205-setup-x64.exe

# not on repology

function setup_util_tabby() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --app=Tabby; then
		return 0
	fi

	# setup
	local arch options=(
		--app='Tabby'
		"$@"
		CASK='tabby'
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='Eugeny/tabby' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_deb_option {
		options+=(
			DEB="$(get_github_asset_url "$1")"
		)
	}
	function add_rpm_option {
		options+=(
			RPM="$(get_github_asset_url "$1")"
		)
	}
	function add_download_dmg_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB='*/Tabby.app'
			DOWNLOAD_FILENAME='Tabby.app'
		)
	}
	function add_download_appimage_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_FILENAME='Tabby.appimage'
		)
	}
	function add_installer_option {
		options+=(
			INSTALLER="$(get_github_asset_url "$1")"
			INSTALLER_OPEN=yes
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_dmg_option '-macos-arm64.dmg'
		elif test "$arch" = 'x64'; then
			add_download_dmg_option '-macos-x86_64.dmg'
		fi
	elif is-linux; then
		if test "$arch" = 'a64'; then
			add_deb_option '-linux-arm64.deb'
			add_rpm_option '-linux-arm64.rpm'
			add_download_appimage_option '-linux-arm64.AppImage'
		elif test "$arch" = 'a32'; then
			add_deb_option '-linux-armv7l.deb'
			add_rpm_option '-linux-armv7l.rpm'
			add_download_appimage_option '-linux-armv7l.AppImage'
		elif test "$arch" = 'x64'; then
			add_deb_option '-linux-x64.deb'
			add_rpm_option '-linux-x64.rpm'
			add_download_appimage_option '-linux-x64.AppImage'
		fi
	elif is-wsl; then
		if test "$arch" = 'a64'; then
			add_installer_option '-setup-arm64.exe'
		elif test "$arch" = 'x64'; then
			add_installer_option '-setup-x64.exe'
		fi
	fi
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_tabby "$@"
fi
