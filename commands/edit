#!/usr/bin/env bash

function edit_() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Open your preferred editor.

			USAGE:
			edit [...options] [--] [...everything here is forwarded to the editor]

			OPTIONS:
			--dry
			    If enabled, output the editor instead of invoking it.

			--[no-]prompt
			    If enabled (the default), support editors that require additional arguments to edit the file.

			--[no-]wait
			    If disabled (the default), edit the file but skip waiting for the editor to close the file.

			--only-editor
			    If enabled, only output the editor command, and not any arguments.
			    Enforces --dry.

			--sudo
			    If enabled, the editor will be opened in sudo mode.

			--terminal
			    If enabled, enforce a terminal editor.

			--gui
			    If enabled, enforce a gui editor.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item dry='no' prompt='yes' wait='no' only_editor='no' sudo='no' terminal='' gui='' args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-dry'* | '--dry'*)
			dry="$(get-flag-value dry --missing="$dry" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-prompt'* | '--prompt'*)
			prompt="$(get-flag-value prompt --missing="$prompt" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-wait'* | '--wait'*)
			wait="$(get-flag-value wait --missing="$wait" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-only-editor'* | '--only-editor'*)
			only_editor="$(get-flag-value only-editor --missing="$only_editor" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-sudo'* | '--sudo'*)
			sudo="$(get-flag-value sudo --missing="$sudo" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-terminal'* | '--terminal'*)
			terminal="$(get-flag-value terminal --missing="$terminal" -- "$item" | echo-affirmative --stdin)"
			;;
		'--no-gui'* | '--gui'*)
			gui="$(get-flag-value gui --missing="$gui" -- "$item" | echo-affirmative --stdin)"
			;;
		'--')
			args+=("$@")
			shift "$#"
			break
			;;
		*)
			args+=("$item" "$@")
			shift "$#"
			break
			;;
		esac
	done

	# check conflicts
	if test -n "$terminal" -a "$terminal" = "$gui"; then
		help "[--terminal] and [--gui] must be opposite values."
	fi

	# default terminal
	if test -z "$terminal"; then
		if is-ssh || is-headless; then
			terminal='yes'
		fi
	fi

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# editors.bash provides:
	local TERMINAL_EDITORS=() GUI_EDITORS=()
	load_dorothy_config 'editors.bash'

	# check config
	if test "${#TERMINAL_EDITORS[@]}" -eq 0; then
		echo-style --warning="TERMINAL_EDITORS was undefined" >/dev/stderr
	fi
	if test "${#GUI_EDITORS[@]}" -eq 0; then
		echo-style --warning="GUI_EDITORS was undefined" >/dev/stderr
	fi

	# =====================================
	# Action

	# grab options
	local editors=()
	if test "$terminal" = 'yes'; then
		editors=("${TERMINAL_EDITORS[@]}")
	fi
	if test "$gui" = 'yes'; then
		editors=("${GUI_EDITORS[@]}")
	fi

	# filter options by available
	local array=() string command
	for string in "${editors[@]}"; do
		array=()
		command="${string%% *}"
		if test -n "$command"; then
			if command-exists "$command"; then
				mapfile -t array < <(echo-split ' ' -- "$string")

				# absolute path so sudo has availability: may not actually be necessary
				# array[0]="$(fs-absolute -- "${array[0]}")"

				# editors that require prompts
				if [[ $command =~ code|atom|subl ]]; then
					if test "$prompt" = 'yes'; then
						if test "$wait" = 'yes'; then
							array+=('-w') # wait
						fi
						if [[ $command =~ code ]]; then
							array+=('-n') # new window
						fi
					else
						continue
					fi
				elif [[ $command =~ emacs ]]; then
					if test "$prompt" = 'yes'; then
						array+=('--no-window-system')
					else
						continue
					fi
				fi

				# it exists, use it
				break
			elif test "$terminal" = 'no' && get-app "$command" >/dev/null; then
				# apps require prompts
				if test "$prompt" = 'yes'; then
					mapfile -t array < <(echo-split ' ' -- "$string")
					array=('open' '-a' "${array[@]}")
				else
					continue
				fi
			fi

			# we have a suitable editor, leave the search
			break
		fi
	done

	# check editor
	if test "${#array[@]}" -eq 0; then
		if test "$dry" = 'yes' && is-ci; then
			: # if running on ci, and if dry, then suppress error
		else
			echo-style --error="$0: None of the configured editors were available:" >/dev/stderr
			echo-verbose "${array[@]}" >/dev/stderr
		fi
		return 42 # ENOPROTOOPT 42 Protocol not available
	fi

	# only output the editor command
	if test "$only_editor" != 'no'; then
		print_line "${array[0]}"
		return
	fi

	# generate the entire command
	local cmd=()
	if test "$sudo" = 'yes'; then
		cmd+=(
			'sudo-helper'
			'--inherit'
			'--'
		)
	fi
	cmd+=("${array[@]}")
	if test "${#args[@]}" -ne 0; then
		cmd+=("${args[@]}")
	fi

	# invoke
	if test "$dry" = 'yes'; then
		print_line "${cmd[@]}"
	else
		"${cmd[@]}"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	edit_ "$@"
fi
