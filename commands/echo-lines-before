#!/usr/bin/env bash

# https://stackoverflow.com/a/1603436/130638
# "$bin_gsed" -e '/^$/,$d' "$@" <-- before blank lines

function echo_lines_before_test() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-tester)"
	echo-style --h1="TEST: $0"

	# prepare
	local expected=$'a\nb' needles=('--needle=')
	function pl {
		__print_lines a b '' c d
	}

	# standard tests
	eval_tester --name='using arguments' --stdout="$expected" \
		-- echo-lines-before "${needles[@]}" -- "$(pl)"

	pl | eval_tester --name='using stdin' --stdout="$expected" \
		-- echo-lines-before "${needles[@]}"

	pl | eval_tester --name='using --stdin' --stdout="$expected" \
		-- echo-lines-before "${needles[@]}" --stdin

	pl | eval_tester --name='using -' --stdout="$expected" \
		-- echo-lines-before "${needles[@]}" -

	eval_tester --name='using <<<' --stdout="$expected" \
		-- echo-lines-before "${needles[@]}" - <<<"$(pl)"

	# https://github.com/bevry/dorothy/issues/283
	local in out
	in="$(mktemp)"
	out="$(mktemp)"
	pl >"$in"
	function test_a {
		echo-lines-before "${needles[@]}" --stdin <"$in"
	}
	function test_b {
		echo-lines-before "${needles[@]}" --stdin <"$in" >"$out"
		cat "$out"
	}
	function test_c {
		echo-lines-before "${needles[@]}" --stdin >"$out" <"$in"
		cat "$out"
	}
	function test_aa {
		__print_lines '0' >"$out"
		echo-lines-before "${needles[@]}" --stdin >>"$out" <"$in"
		cat "$out"
	}
	function test_bb {
		__print_lines '0' >"$out"
		echo-lines-before "${needles[@]}" --stdin <"$in" >>"$out"
		cat "$out"
	}
	eval_tester --stdout="$expected" -- test_a
	eval_tester --stdout="$expected" -- test_b
	eval_tester --stdout="$expected" -- test_c
	eval_tester --stdout=$'0\n'"$expected" -- test_aa
	eval_tester --stdout=$'0\n'"$expected" -- test_bb

	# done
	echo-style --g1="TEST: $0"
	return 0
)
function echo_lines_before() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get everything before the first occurrence of <line>.

			USAGE:
			echo-lines-before <needle> [...options] [--] ...<input>
			echo-lines ...<input> | echo-lines-before <needle> [...options]

			OPTIONS:
			<needle> | --needle=<needle>
			    Only output the <input> that occurs before one of these <needle> lines.
			    Use [--needle=<needle>] to provide multiple needles.

			$(stdinargs_options_help --)

			EXAMPLE:

			echo-lines-before --needle='b' -- a b b c b

			    a
			    # exit status: 0

			echo-lines -- a b b c b | echo-lines-before --needle='' --stdin

			    a
			    # exit status: 0

			echo-lines-before --needle='' --stdin <<< "\$(echo-lines -- a b b c b)"

			    a
			    # exit status: 0
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_needles=() option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--needle='*) option_needles+=("${item#*=}") ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinargs options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		'--'*) option_args+=("$item") ;;
		*)
			if [[ ${#option_needles[@]} -eq 0 ]]; then
				option_needles+=("$item")
			else
				option_args+=("$item")
			fi
			;;
		esac
	done

	# check
	if [[ ${#option_needles[@]} -eq 0 ]]; then
		help 'No <needle>s provided.'
	fi

	# =====================================
	# Action

	function on_line {
		local line="$1" needle
		for needle in "${option_needles[@]}"; do
			if [[ $line == "$needle" ]]; then
				return 210 # ECUSTOM 210 Processing complete, exit early
			fi
		done
		__print_lines "$line"
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		echo_lines_before_test
	else
		echo_lines_before "$@"
	fi
fi
