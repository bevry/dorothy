#!/usr/bin/env bash
# shellcheck disable=SC2164,SC1091
source "$DOROTHY/sources/strict.bash"
source "$(which eval-collapse)"

# setup-environment-commands provides: NVM_DIR
if test -z "${NVM_DIR-}"; then
	export NVM_DIR="$HOME/.nvm"
fi

# =====================================
# Configuration

source "$DOROTHY/sources/config.sh"
load_dorothy_config 'setup.bash'
# ^ provides: NPM_INSTALL/NODE_INSTALL

# =====================================
# Prepare

echo-segment --h1="Setup Node.js"
echo-color --dim "NVM_DIR=$NVM_DIR"

# Wiping nvm, positive as we want to clear npm packages on outdated node versions
if test -d "$NVM_DIR" && confirm-positive "Clean NVM installation? [$NVM_DIR]"; then
	rm -Rf "$NVM_DIR"
fi

# =====================================
# Install

# setup system node for global installs and vscode on mac
function install_homebrew_node() {
	brew install node || brew upgrade node || :
	npm cache clean --force
	brew cleanup
}
if is-brew; then
	echo-segment --h2='Install System Node.js'
	eval_collapse -- install_homebrew_node
	echo-segment --g2='Install System Node.js'
fi

# install nvm
function install_nvm() {
	if test -d "$NVM_DIR"; then
		cd "$NVM_DIR"
	else
		mkdir -p "$NVM_DIR"
		cd "$NVM_DIR"
		git init
		git remote add origin 'https://github.com/nvm-sh/nvm.git'
	fi
	# ensure git remote is usable
	# git-protocol-ensure
	git-protocol-apply origin https
	# fetch tags
	git fetch --tags origin
	# checkout latest stable tag
	# shellcheck disable=SC2006,SC2046
	git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
}
echo-segment --h2='Install Node Version Manager'
eval_collapse -- install_nvm
echo-segment --g2='Install Node Version Manager'

# install nvm node
function install_nvm_node() {
	source "$DOROTHY/sources/nvm.sh"

	# install
	nvm install node       # latest active
	nvm-2596 install --lts # latest LTS

	# set default node version
	if is-brew; then
		nvm alias default system
	else
		# use latest lts
		nvm alias default stable
		# use current lts: "$(nvm version-remote --lts)"
	fi

	# default
	nvm use default
}
echo-segment --h2='Install Node.js via NVM'
eval_collapse -- install_nvm_node
echo-segment --g2='Install Node.js via NVM'

# npm
echo-segment --h2='Upgrade npm'
echo-color --dim="   npm version: $(npm --version)"
eval_collapse -- npm install -g npm --force
echo-color --dim+green="   npm version: $(npm --version)"
echo-segment --g2='Upgrade npm'

# configure
echo-segment --h2='Configure npm'
npm config set init.author.name "$(ask --question="What is your name that you want to configure npm with?" --default="$(npm config get init.author.name)" --required --confirm)"
npm config set init.author.email "$(ask --question="What is your email that you want to configure npm with?" --default="$(npm config get init.author.email)" --required --confirm)"
npm config set init.author.url "$(ask --question="What is your homepage that you want to configure npm with?" --default="$(npm config get init.author.url)" --required --confirm)"
npm config set init.license "$(ask --question="What license do you want to configure npm to default to?" --default="$(npm config get init.license)" --required --confirm)"
echo-segment --g2='Configure npm'

# https://github.com/yarnpkg/yarn/issues/2993
function install_npm_packages() {
	echo-segment --h2="Install $# npm packages"
	env NAME="npm:$*" NPM="$*" setup-util npm
	echo-segment --g2="Install $# npm packages"
}
if test -v 'NPM_INSTALL'; then
	install_npm_packages "${NPM_INSTALL[@]}"
fi
if test -v 'NODE_INSTALL'; then
	install_npm_packages "${NODE_INSTALL[@]}"
fi

# =====================================
# Done

echo-segment --h1='Setup Node.js'
