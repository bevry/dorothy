#!/usr/bin/env bash
source "$DOROTHY/sources/essentials.sh"
source "$DOROTHY/sources/nvm.bash"
source "$DOROTHY/sources/strict.bash"

# Wiping nvm
echo -e '\nWiping nvm...'
rm -Rf "$HOME/.nvm"
if is-string "${NVM_DIR-}"; then
	rm -Rf "$NVM_DIR"
else
	export NVM_DIR="$HOME/.nvm"
fi
echo '...nvm wiped!'

# Setup system node for global installs and vscode on mac
if is-brew; then
	echo -e '\nInstalling system node...'
	brew reinstall node
	npm cache clean --force
	brew cleanup
	echo '...system node installed!'
fi

# Reinstalling nvm
echo -e '\nInstalling nvm...'
# install nvm
mkdir -p "$NVM_DIR"
cd "$NVM_DIR" || exit 1
git init
git remote add origin git@github.com:nvm-sh/nvm.git
git fetch --tags origin
# shellcheck disable=SC2006,SC2046
git checkout `git describe --abbrev=0 --tags --match "v[0-9]*" $(git rev-list --tags --max-count=1)`
# load nvm
source "$DOROTHY/sources/nvm.bash"
echo '...nvm installed!'

echo -e '\nInstalling nvm node versions...'
nvm install node   # latest active
nvm install --lts  # latest LTS
echo '...nvm node versions installed!'

echo -e '\nConfiguring default node version...'
if is-brew; then
	nvm alias default system
else
	# use latest lts
	nvm alias default stable
	# use current lts: "$(nvm version-remote --lts)"
fi
nvm use default
echo '...success!'

echo -e '\nUpgrading npm...'
npm install -g npm --force
echo '...upgraded npm!'

# https://github.com/yarnpkg/yarn/issues/2993
if is-present "${NODE_INSTALL-}"; then
	echo -e '\nInstalling global npm packages...'
	npm install -g --force "${NODE_INSTALL[@]}"
	echo '...installed global npm packages!'
fi

echo -e '\nConfiguring npm...'
if test "$(npm config get init.author.name)" = "undefined"; then
	read -r -p "What is your name? " name
	npm config set init.author.name "$name"
fi
if test "$(npm config get init.author.email)" = "undefined"; then
	read -r -p "What is your email? " email
	npm config set init.author.email "$email"
fi
if test "$(npm config get init.author.url)" = "undefined"; then
	read -r -p "What is your url? " url
	npm config set init.author.url "$url"
fi
if test "$(npm config get init.license)" = "undefined"; then
	read -r -p "What license do you prefer? " license
	npm config set init.license "$license"
fi
echo '...configured npm!'
