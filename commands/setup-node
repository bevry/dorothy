#!/usr/bin/env bash
# shellcheck disable=SC2164,SC1091
source "$DOROTHY/sources/strict.bash"

# setup-environment-commands provides: NVM_DIR
if test -z "$NVM_DIR"; then
	export NVM_DIR="$HOME/.nvm"
fi

# =====================================
# Configuration

source "$DOROTHY/sources/config.sh"
load_dorothy_config 'setup.bash'
# ^ provides: NODE_INSTALL

# =====================================
# Prepare

echo-color $'\n' --h1="Setup Node.js ⏲"
echo-color --dim "NVM_DIR=$NVM_DIR"

# Wiping nvm, positive as we want to clear npm packages on outdated node versions
if test -d "$NVM_DIR" && confirm-positive "Clean NVM installation? [$NVM_DIR]"; then
	rm -Rf "$NVM_DIR"
fi

# =====================================
# Install

# Setup system node for global installs and vscode on mac
if is-brew; then
	echo-color --h2='Installing system node...'
	brew install node || brew upgrade node || :
	npm cache clean --force
	brew cleanup
	echo-color --g2='...system node installed!'
fi

# Reinstalling nvm
echo-color --h2='Installing nvm...'
if test -d "$NVM_DIR"; then
	cd "$NVM_DIR"
else
	mkdir -p "$NVM_DIR"
	cd "$NVM_DIR"
	git init
	git remote add origin 'https://github.com/nvm-sh/nvm.git'
fi
# ensure git remote is usable
git-protocol-ensure
# fetch tags
git fetch --tags origin
# checkout latest stable tag
# shellcheck disable=SC2006,SC2046
git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
# log
echo-color --g2='...nvm installed!'

# nvm node
{
	# install nvm
	echo-color --h2='Installing nvm node versions...'
	source "$DOROTHY/sources/nvm.sh"
	nvm install node       # latest active
	nvm-2596 install --lts # latest LTS
	echo-color --g2='...nvm node versions installed!'

	# default node version
	echo-color --h2='Configuring nvm default node version...'
	if is-brew; then
		nvm alias default system
	else
		# use latest lts
		nvm alias default stable
		# use current lts: "$(nvm version-remote --lts)"
	fi
	nvm use default
	echo-color --g2='...configured nvm default node version!'
} || {
	echo-color --e2='...nvm failed!'
	exit 1
}

# npm
echo-color --h2='Upgrading npm...'
npm install -g npm --force
echo-color --g2='...upgraded npm!'

# configure
echo-color --h2='Configuring npm...'
npm config set init.author.name "$(ask --question="What is your name that you want to configure npm with?" --default="$(npm config get init.author.name)" --required --confirm)"
npm config set init.author.email "$(ask --question="What is your email that you want to configure npm with?" --default="$(npm config get init.author.email)" --required --confirm)"
npm config set init.author.url "$(ask --question="What is your homepage that you want to configure npm with?" --default="$(npm config get init.author.url)" --required --confirm)"
npm config set init.license "$(ask --question="What license do you want to configure npm to default to?" --default="$(npm config get init.license)" --required --confirm)"
echo-color --g2='...configured npm!'

# https://github.com/yarnpkg/yarn/issues/2993
function install_npm_packages() {
	echo-color --h2="Installing $# npm packages..."
	env NAME="npm:$*" NPM="$*" setup-util npm
	echo-color --g2="Installed $# npm packages."
}
if test -v 'NPM_INSTALL'; then
	install_npm_packages "${NPM_INSTALL[@]}"
fi
if test -v 'NODE_INSTALL'; then
	install_npm_packages "${NODE_INSTALL[@]}"
fi

# =====================================
# Done

echo-color --dim 'Installed Node.js, its versions, and its packages successfully.'
echo-color --h1="Setup Node.js completed. ✅"
