#!/usr/bin/env bash

function setup_node() (
	source "$DOROTHY/sources/bash.bash"
	__require_array 'empty'
	source "$(type -P eval-helper)"

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# environment.bash provides:
	# NVM_DIR
	# but in case it failed to:
	if [[ -z ${NVM_DIR-} ]]; then
		export NVM_DIR="$HOME/.nvm"
	fi

	# setup.bash provides:
	local NPM_INSTALL=()
	local NODE_INSTALL=() # deprecated, use NPM_INSTALL
	local NODE_VERSIONS=()
	load_dorothy_config 'setup.bash'

	# deprecations
	if [[ ${#NODE_INSTALL[@]} -ne 0 ]]; then
		NPM_INSTALL+=("${NODE_INSTALL[@]}")
		dorothy-config 'setup.bash' -- \
			--field='NODE_INSTALL' --replace= \
			--field='NPM_INSTALL' --array="$(__print_lines "${NPM_INSTALL[@]}" | sort --ignore-case | uniq)"
	fi

	# adjustments
	mapfile -t NPM_INSTALL < <(dorothy-config --packages-var='NPM_INSTALL' -- "${NPM_INSTALL[@]}")

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Setup the Node.js ecosystem.

			USAGE:
			setup-node [...options] [install|update|setup|configure]

			OPTIONS:
			--configure
			    Whether to prompt, confirm, or save configuration changes.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_configure=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		# install|update|setup|configure
		'setup') ;;
		'update')
			option_configure='no'
			;;
		'install' | 'configure')
			option_configure='yes'
			;;
		'--no-configure'* | '--configure'*)
			option_configure="$(get-flag-value --affirmative --fallback="$option_configure" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# check
	if [[ ${#NPM_INSTALL[@]} -eq 0 ]]; then
		if [[ $option_configure == 'no' ]]; then
			echo-style --dim='Setup of Node.js ecosystem skipped.'
			return 0
		elif ! confirm --linger --negative --ppid=$$ -- 'Setup Node.js ecosystem?'; then
			return 0
		fi
	fi

	# =====================================
	# Start

	echo-style --h1='Setup Node.js'

	# =====================================
	# Install/Upgrade Node.js and npm

	setup-util-node --upgrade --no-quiet

	# =====================================
	# Reconfigure npm

	# helper
	function configure_system_npm {
		echo-style --h2='Configure npm'
		nvm-env -- npm config set init-author-name "$(
			ask --required --linger \
				--question='What is the profile name that you want to configure npm with?' \
				--default="$(get-profile name -- npm ... || :)"
		)"
		nvm-env -- npm config set init-author-email "$(
			ask --required --linger \
				--question='What is the profile email that you want to configure npm with?' \
				--default="$(get-profile email -- npm ... || :)"
		)"
		nvm-env -- npm config set init-author-url "$(
			ask --required --linger \
				--question='What is the profile homepage that you want to configure npm with?' \
				--default="$(get-profile url -- npm ... || :)"
		)"
		nvm-env -- npm config set init-license "$(
			ask --required --linger \
				--question='What license do you want to configure npm to default to?' \
				--default="$(npm config get init-license)"
		)"
		echo-style --g2='Configure npm'
	}

	# check
	if
		is-empty-value -- "$(npm config get init-author-name)" ||
			is-empty-value -- "$(npm config get init-author-email)" ||
			is-empty-value -- "$(npm config get init-author-url)" ||
			is-empty-value -- "$(npm config get init-license)"
	then
		option_configure='yes'
	fi

	# configure
	if [[ $option_configure == 'yes' ]]; then
		configure_system_npm
	fi

	# =====================================
	# Packages via npm

	if [[ ${#NPM_INSTALL[@]} -ne 0 ]]; then
		echo-style --h2='Node.js Packages'
		setup-util --installer=NODE -- "${NPM_INSTALL[@]}"
		echo-style --g2='Node.js Packages'
	fi

	# =====================================
	# Additional Node.js versions

	local version
	if [[ ${#NODE_VERSIONS[@]} -ne 0 ]]; then
		echo-style --h2='Additional Node.js Versions'
		for version in "${NODE_VERSIONS[@]}"; do
			eval-helper --wrap --quiet --success="Installed: v$version" -- nvm-env -- nvm install "$version"
		done
		echo-style --g2='Additional Node.js Versions'
	fi

	# =====================================
	# Finish

	echo-style --g1='Setup Node.js'
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	setup_node "$@"
fi
