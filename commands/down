#!/usr/bin/env bash

function down_() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-helper)"

	# supported tools
	# @todo probably won't require shapeshifter if [eval-helper] is wrote to make more use of [eval_capture]
	local tool available_tools=() all_tools=(
		wget   # nice progress bar without shapeshifter
		curl   # nice progress bar with shapeshifter
		got    # nice progress bar with shapeshifter
		aria2c # no useful progress bar
		# httpie # writes to stdout with [eval-helper], shapeshifter doesn't fix it, [eval-helper --no-quiet] solves it, but isn't what we want
	) shapeshifter_tools=(
		curl
		got
	)

	# determine which tools are available
	for tool in "${all_tools[@]}"; do
		if command-exists -- "$tool"; then
			available_tools+=("$tool")
		fi
	done
	tool=''

	# if no tools are available, install preference
	if test "${#available_tools[@]}" -eq 0; then
		get-installer --first-success --invoke --quiet -- "${all_tools[@]}"
		down "$@"
		return
	fi

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Download a file, using the best available tool, and with the best available options.

			USAGE:
			down [...options] <url>

			OUTPUTS:
			Progress to tty.
			Errors to stderr.
			Downloaded filepath to stdout.

			OPTIONS:
			--tool=<tool>
			    Enforce the usage of <tool> to download the file.
			    If omitted, the first available preferred tool will be used.

			--archive-format=<format>
			    Treat the download as an archive file, and enforce <format> as the extraction format.
			    This option is handled by the [unziptar] command.

			--archive-glob=<glob>
			    Treat the download as an archive file, and only extract files that match the glob pattern <glob>.
			    This option is handled by the [unziptar] command.

			--bearer-token=<token>
			    If provided, include this in a bearer token header.

			--directory=<directory>
			    Place downloaded file(s) inside <directory>.
			    If ommitted, the current working directory will be used.

			--file=<file>
			    If only a single file was downloaded, rename it to <file>.
			    If multiple files were downloaded, then fail.

			--filepath=<directory>/<file>
			    If only a single file was downloaded, rename it to <file>, and place it inside <directory>.
			    If multiple files were downloaded, then fail.

			--retry=<retries>
			    How many times to retry the download.
			    Defaults to 2.

			--[no-]quiet
			    Whether or not output should be simplified, defaults to enabled.

			TOOLS:
			The following download tools, sorted by order of preference, were determined to be available on your system:

			    ${available_tools[*]}

		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet url='' tool='' archive_format='' archive_glob='' directory='' file='' filepath='' retry='2' option_bearer_token=''
	option_quiet="$(echo-quiet-enabled --fallback=yes -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--bearer-token='*) option_bearer_token="${item#*=}" ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet-enabled
		'--tool='*) tool="${item#*=}" ;;
		'--archive-format='* | '--unzip-format='*) archive_format="${item#*=}" ;;
		'--archive-glob='* | '--archive-filter='* | '--unzip-glob='* | '--unzip-filter='*) archive_glob="${item#*=}" ;;
		'--directory='*) directory="${item#*=}" ;;
		'--file='*) file="${item#*=}" ;;
		'--filepath='*) filepath="${item#*=}" ;;
		'--retry='*) retry="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$url"; then
				url="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# assert url
	if test -z "$url"; then
		help "No URL was provided."
	fi

	# ensure tool
	if test -z "$tool"; then
		tool="${available_tools[0]}"
	elif ! is-needle --needle="$tool" -- "${available_tools[@]}"; then
		help "The specified tool is not available: $tool"
	fi

	# some tools need shapeshifter
	local shapeshifter='no'
	if is-needle --needle="$tool" -- "${shapeshifter_tools[@]}"; then
		shapeshifter='yes'
	fi

	# ensure filepath, directory, file
	if test -n "$filepath"; then
		# filepath is a directory + file combination
		filepath="$(fs-absolute -- "$filepath")"
		directory="$(dirname "$filepath")"
		file="$(basename "$filepath")"
	elif test -n "$directory" -a -n "$file"; then
		# directory + file
		filepath="$(fs-absolute -- "$directory/$file")"
		directory="$(dirname "$filepath")"
		file="$(basename "$filepath")"
	elif test -z "$directory" -a -n "$file"; then
		# file, without directory
		filepath="$(pwd)/$file"
		directory="$(dirname "$filepath")"
		file="$(basename "$filepath")"
	elif test -n "$directory" -a -z "$file"; then
		# directory, without file
		directory="$(fs-absolute -- "$directory")"
		filepath='' # it is for dir+file combos only
	else
		directory="$(pwd)"
		filepath='' # it is for dir+file combos only
	fi
	mkdir -p "$directory"

	# =====================================
	# Action

	function act {
		# if zip, then download to a temporary/random directory first, filename must be valid but keep extension for unziptar (so trim special)
		local download_directory download_file
		if test -n "$archive_format" -o -n "$archive_glob"; then
			local url_basename
			url_basename="$(basename "$url" | echo-trim-special --stdin)"
			download_directory="$(fs-temp --directory='down' --directory)"
			download_file="$url_basename"
		else
			download_directory="$directory"
			download_file="$file" # can be empty
		fi
		mkdir -p "$download_directory"

		# tool helpers
		function do_aria2c {
			local aria2c_options=(
				--dir="$download_directory"
				--file-allocation=none
				--allow-overwrite=true
				--always-resume=true
				--auto-file-renaming=false
				--show-console-readout=false
				--quiet # its multiline bar doesn't reset itself, just dumps more bars to stdout
				--no-conf
			)
			if test -n "$option_bearer_token"; then
				aria2c_options+=(
					"--header=Authorization: Bearer $option_bearer_token"
				)
			fi
			if test -n "$download_file"; then
				aria2c_options+=(
					--out="$download_file"
				)
			fi
			aria2c_options+=("$url")
			aria2c "${aria2c_options[@]}"
		}
		function do_curl {
			# [--progress-bar] not as nice as default table
			local curl_options=(
				'-L'
			)
			if test -n "$option_bearer_token"; then
				curl_options+=(
					'--header'
					"Authorization: Bearer $option_bearer_token"
				)
			fi
			if test -n "$download_file"; then
				curl_options+=(-o "$download_file")
			else
				curl_options+=(-O)
			fi
			curl_options+=("$url")
			(
				cd "$download_directory"
				curl "${curl_options[@]}"
			)
		}
		function do_got {
			# https://github.com/melbahja/got#command-line-tool-usage
			local got_options=()
			if test -n "$option_bearer_token"; then
				got_options+=(
					'--header'
					"Authorization: Bearer $option_bearer_token"
				)
			fi
			if test -n "$download_file"; then
				got_options+=(-o "$download_file")
			fi
			got_options+=("$url")
			(
				cd "$download_directory"
				got "${got_options[@]}"
			)
		}
		function do_httpie {
			# https://httpie.io/docs/cli/download-mode
			local http_options=(
				'--download'
			)
			if test -n "$option_bearer_token"; then
				http_options+=(
					'--auth'
					"Bearer $option_bearer_token"
				)
			fi
			if test -n "$download_file"; then
				http_options+=(
					'--continue' # --continue only works with --output
					'--output' "$download_file"
				)
			fi
			http_options+=("$url")
			(
				cd "$download_directory"
				http "${http_options[@]}"
			)
		}
		function do_wget {
			#   -O,  --output-document=FILE      write documents to FILE
			#   -o,  --output-file=FILE          log messages to FILE
			#   -N,  --timestamping              don't re-retrieve files unless newer than local
			#   -c,  --continue                  resume getting a partially-downloaded file
			#   -q,  --quiet                     quiet (no output)
			#   -v,  --verbose                   be verbose (this is the default)
			#   -nv, --no-verbose                turn off verboseness, without being quiet
			#        --show-progress             display the progress bar in any verbosity mode
			# WARNING: timestamping does nothing in combination with -O. See the manual for details.
			local wget_options=()
			if ! is-apk; then
				# wget on apk doesn't have the --prgoress option:
				# https://github.com/bevry/dorothy/actions/runs/7498226466/job/20414036419#step:4:64
				# bar is nicer than dot, and noscroll prevents issues with our clearing
				wget_options+=('--progress=bar:noscroll')
			fi
			if test "$option_bearer_token"; then
				wget_options+=(
					"--header=Authorization: Bearer $option_bearer_token"
				)
			fi
			if test -n "$download_file"; then
				wget_options+=(
					"--output-document=$download_file"
				)
			else
				wget_options+=(
					--timestamping
				)
			fi
			wget_options+=("$url")
			(
				cd "$download_directory"
				wget "${wget_options[@]}"
			)
		}
		function do_download {
			if test "$(type -t "do_$tool")" = 'function'; then
				"do_$tool"
			else
				help "Unrecognised tool: $tool"
			fi
		}

		# invoke the download with retry support, capturing exit codes
		local download_status
		while test "$retry" -ge 0; do
			eval_capture --statusvar=download_status -- do_download
			if test "$download_status" -eq 0; then
				break
			fi
			retry=$((retry - 1))
		done

		# double confirm it was created, in case exit code passed but it still was not created
		if test -n "$download_file"; then
			if is-missing -- "$download_directory/$download_file"; then
				echo-error "Failed to download " --code="$url" ' to ' --code="$download_directory/$download_file"
				return 1
			fi
		fi

		# log
		echo-style --success="Downloaded!"

		# if desired, perform extraction of the temporary file
		if test -n "$archive_format" -o -n "$archive_glob"; then
			echo-style --notice="Unzipping..."
			unziptar "$download_directory/$download_file" \
				--prune \
				--directory="$directory" \
				--file="$file" \
				--filepath="$filepath" \
				--format="$archive_format" \
				--filter="$archive_glob"

			# check extraction
			if test -n "$file"; then
				# assert it was created
				if is-missing -- "$filepath"; then
					echo-error "Failed to extract " --code="$url" ' to ' --code="$filepath"
					return 1
				fi
			fi
		fi

		# log
		echo-style --success="Extracted!"
	}

	# messages
	local pending="Downloading"
	local success="Downloaded"
	local failure="Failed to download"
	if test -n "$archive_format" -o -n "$archive_glob"; then
		pending="Downloading and extracting"
		success="Downloaded and extracted"
		failure="Failed to download and extract"
	fi

	# act
	eval_helper --quiet="$option_quiet" --no-wrap --shapeshifter="$shapeshifter" \
		--pending="$(
			echo-style --bold="$pending " \
				--code="$url" " to " --code="$directory/$file"
		)" \
		--success="$(
			echo-style --success="$success " \
				--code="$url" " to " --code="$directory/$file"
		)" \
		--failure="$(
			echo-style --error="$failure " \
				--code="$url" " to " --code="$directory/$file"
		)" \
		-- act
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	down_ "$@"
fi
