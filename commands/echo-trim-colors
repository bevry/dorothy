#!/usr/bin/env bash
#!/usr/bin/env bash

function echo_trim_colors_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	{
		echo-style --green='i am green' | echo-trim-colors --stdin | echo-escape-newlines --stdin
	} | eval-tester --name='stdin' --stdout='i am green\n' \
		-- cat

	{
		echo-style --no-trail --green='i am green' | echo-trim-colors --stdin | echo-escape-newlines --stdin
	} | eval-tester --name='stdin' --stdout='i am green' \
		-- cat

	echo-style --g1="TEST: $0"
	return 0
)
function echo_trim_colors() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Attempt to strip colours from the input.

			USAGE:
			echo-trim-colors [...options] [--] ...<input>
			echo-lines ...<input> | echo-trim-colors [...options]

			OPTIONS:
			$(stdinargs_options_help --)

			EXAMPLE:

			echo-style --green='plant' | echo-trim-colors --stdin

			    plant
			    # exit status: 0

		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# =====================================
	# Dependencies

	local bin_gsed
	bin_gsed="$(echo-gnu-command --install -- gsed)"

	# =====================================
	# Action

	# https://superuser.com/a/380778
	function on_line {
		"$bin_gsed" 's/\x1b\[[0-9;]*m//g' <<<"$1"
	}
	function on_inline {
		"$bin_gsed" 's/\x1b\[[0-9;]*m//g' < <(__print_string "$1")
	}
	# ^ note that on_input does not preserve inline

	stdinargs "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_trim_colors_test
	else
		echo_trim_colors "$@"
	fi
fi
