#!/usr/bin/env bash

function get_flag_value_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	# named, not found

	eval-tester --status=91 -- \
		get-flag-value var --

	eval-tester --status=91 -- \
		get-flag-value var --affirmative --

	eval-tester --status=91 -- \
		get-flag-value var --non-affirmative --

	eval-tester --status=91 -- \
		get-flag-value var -- ''

	eval-tester --status=91 -- \
		get-flag-value var --affirmative -- ''

	eval-tester --status=91 -- \
		get-flag-value var --non-affirmative -- ''

	eval-tester --status=91 -- \
		get-flag-value var -- --other

	eval-tester --status=91 -- \
		get-flag-value var --affirmative -- --other

	eval-tester --status=91 -- \
		get-flag-value var --non-affirmative -- --other

	# unnamed, not found

	eval-tester --status=91 -- \
		get-flag-value --

	eval-tester --status=91 -- \
		get-flag-value --affirmative --

	eval-tester --status=91 -- \
		get-flag-value --non-affirmative --

	eval-tester --status=91 -- \
		get-flag-value -- ''

	eval-tester --status=91 -- \
		get-flag-value --affirmative -- ''

	eval-tester --status=91 -- \
		get-flag-value --non-affirmative -- ''

	eval-tester --stdout=yes -- \
		get-flag-value -- --other

	eval-tester --stdout=yes -- \
		get-flag-value --affirmative -- --other

	eval-tester --stdout=no -- \
		get-flag-value --non-affirmative -- --other

	# special cases

	# argument ignored, first flag
	eval-tester --stdout=two -- \
		get-flag-value -- one --flag=two

	# first flag
	eval-tester --stdout=one -- \
		get-flag-value -- --flag=one --flag=two

	# fallback, unnamed
	eval-tester --stdout=missing -- \
		get-flag-value var --fallback=missing -- ''

	# fallback, named
	eval-tester --stdout=missing -- \
		get-flag-value var --fallback=missing -- --other

	# named, implied boolean
	eval-tester --stdout=yes -- \
		get-flag-value var -- --var

	# named, implied boolean
	eval-tester --stdout=no -- \
		get-flag-value var -- --no-var

	# named, value
	eval-tester --stdout=value -- \
		get-flag-value var -- --var=value

	# named, empty
	eval-tester -- \
		get-flag-value var -- --var=

	# named, affirmative

	eval-tester --stdout=yes -- \
		get-flag-value var --affirmative -- --var

	eval-tester --stdout=yes -- \
		get-flag-value var --affirmative -- --var=yes

	eval-tester --stdout=no -- \
		get-flag-value var --affirmative -- --no-var

	eval-tester --stdout=no -- \
		get-flag-value var --affirmative -- --var=no

	eval-tester --stdout=no -- \
		get-flag-value var --non-affirmative -- --var

	eval-tester --stdout=no -- \
		get-flag-value var --non-affirmative -- --var=yes

	eval-tester --stdout=yes -- \
		get-flag-value var --non-affirmative -- --no-var

	eval-tester --stdout=yes -- \
		get-flag-value var --non-affirmative -- --var=no

	eval-tester --stdout=missing -- \
		get-flag-value var --fallback=missing --affirmative -- --other=asd

	eval-tester --stdout=missing -- \
		get-flag-value var --fallback=missing --non-affirmative -- --other=asd

	# unnamed, affirmative

	eval-tester --stdout=yes -- \
		get-flag-value --affirmative -- --var

	eval-tester --stdout=yes -- \
		get-flag-value --affirmative -- --var=yes

	eval-tester --stdout=no -- \
		get-flag-value --affirmative -- --no-var

	eval-tester --stdout=no -- \
		get-flag-value --affirmative -- --var=no

	eval-tester --stdout=no -- \
		get-flag-value --non-affirmative -- --var

	eval-tester --stdout=no -- \
		get-flag-value --non-affirmative -- --var=yes

	eval-tester --stdout=yes -- \
		get-flag-value --non-affirmative -- --no-var

	eval-tester --stdout=yes -- \
		get-flag-value --non-affirmative -- --var=no

	eval-tester --stdout=asd -- \
		get-flag-value --fallback=missing --affirmative -- --other=asd

	eval-tester --stdout=asd -- \
		get-flag-value --fallback=missing --non-affirmative -- --other=asd

	# done

	echo-style --g1="TEST: $0"
	return 0
)
function get_flag_value() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			get-flag-value [name] [...options] -- ...<flag>

			OPTIONS:
			[name]
			    The flag to search for.
			    If not provided, it is inferred from the first <flag>.

			--multi
			    Output the value for each occurrence of the flag, instead of just the first.

			--fallback=<fallback> | --missing=<fallback>
			    When the flag is missing, use <fallback> as the value.

			--fallback-on-empty
			    When the flag is empty, use the fallback value.

			--affirmative
			    Parse the flag as an affirmative value, e.g. [yes] or [no]

			--non-affirmative
			    Parse the flag as an inverted affirmative value, e.g. [yes] becomes [no], [no] becomes [yes]

			QUIRKS:
			It does not support [--flag value], only [--[no-]flag[=value]].
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_name='' option_multi=no option_fallback='' option_boolean='no' option_invert='no' option_fallback_on_empty='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--multi') option_multi='yes' ;;
		'--fallback='* | '--missing='*) option_fallback="${item#*=}" ;;
		'--fallback-on-empty') option_fallback_on_empty='yes' ;;
		'--affirmative') option_boolean='yes' ;;
		'--non-affirmative')
			option_boolean='yes'
			option_invert='yes'
			;;
		'--') break ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $option_name ]]; then
				option_name="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# =====================================
	# Action

	local name inverted index value values=() had_nonempty_value='no'
	for item in "$@"; do
		# prepare
		name="$option_name"
		inverted='no'
		index=0

		# check flag status
		if [[ ${item:0:2} != '--' ]]; then
			# not a flag
			continue
		fi
		index=2

		# check inversion
		if [[ ${item:index:3} == 'no-' ]]; then
			# is inverted
			inverted='yes'
			index=5
		fi

		# if we are looking for a specific flag, check it is so
		if [[ -n $name && ${item:index:${#name}} != "$name" ]]; then
			# not our specific flag
			continue
		fi

		# fallback the name
		if [[ -z $name ]]; then
			name="${item:index}"
			name="${name%%=*}"
		fi

		# get the value
		value="${item:index+${#name}}"
		if [[ -z $value ]]; then
			value='yes'
		elif [[ ${value:0:1} == '=' ]]; then
			# is a proper value, trim =
			value="${value:1}"
		else
			# we didn't actually find the option, we just found its prefix, continue
			continue
		fi

		# convert the value if inverted, affirmative, or non-affirmative
		if [[ $option_boolean == 'yes' ]]; then
			if [[ $option_invert == 'no' ]]; then
				case "$value" in
				'yes' | 'y' | 'true' | 'Y' | 'YES' | 'TRUE') value='yes' ;;
				'no' | 'n' | 'false' | 'N' | 'NO' | 'FALSE') value='no' ;;
				esac
			else
				case "$value" in
				'yes' | 'y' | 'true' | 'Y' | 'YES' | 'TRUE') value='no' ;;
				'no' | 'n' | 'false' | 'N' | 'NO' | 'FALSE') value='yes' ;;
				esac
			fi
		fi
		if [[ $inverted == 'yes' ]]; then
			if [[ $value == 'yes' ]]; then
				value='no'
			elif [[ $value == 'no' ]]; then
				value='yes'
			fi
		fi

		# output
		values+=("$value")
		if [[ -n $value ]]; then
			had_nonempty_value='yes'
		fi

		# if single, one result is all we want
		if [[ $option_multi == 'no' ]]; then
			break
		fi
	done

	# handle missing case
	if [[ ($had_nonempty_value == 'no' && $option_fallback_on_empty == 'yes') || ${#values[@]} -eq 0 ]]; then
		if [[ -n $option_fallback ]]; then
			__print_lines "$option_fallback"
		else
			return 91 # ENOMSG 91 No message of desired type
		fi
	else
		__print_lines "${values[@]}"
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		get_flag_value_test
	else
		get_flag_value "$@"
	fi
fi
