#!/usr/bin/env bash

function get_flag_value_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	eval-tester --name='default response -confirm' --stdout='a default response' \
		-- ask --question='What is your response?' --default='a default response'

	eval-tester --status=91 -- \
		get-flag-value var -- ''

	eval-tester --status=91 -- \
		get-flag-value var -- --something-else

	eval-tester --stdout=two -- \
		get-flag-value -- one --flag=two

	eval-tester --stdout=one -- \
		get-flag-value -- --flag=one --flag=two

	eval-tester --stdout=missing -- \
		get-flag-value var --fallback=missing -- ''

	eval-tester --stdout=missing -- \
		get-flag-value var --fallback=missing -- --something-else

	eval-tester --stdout=yes -- \
		get-flag-value var -- --var

	eval-tester --stdout=no -- \
		get-flag-value var -- --no-var

	eval-tester --stdout=value -- \
		get-flag-value var -- --var=value

	eval-tester -- \
		get-flag-value var -- --var=

	eval-tester --stdout=yup -- \
		get-flag-value var --fallback=gone --affirmative-fallback=yup --non-affirmative-fallback=nada -- --var

	eval-tester --stdout=yes -- \
		get-flag-value var --fallback=gone --affirmative-fallback=yup --non-affirmative-fallback=nada -- --var=yes

	eval-tester --stdout=nada -- \
		get-flag-value var --fallback=gone --affirmative-fallback=yup --non-affirmative-fallback=nada -- --no-var

	eval-tester --stdout=no -- \
		get-flag-value var --fallback=gone --affirmative-fallback=yup --non-affirmative-fallback=nada -- --var=no

	eval-tester --stdout=gone -- \
		get-flag-value var --fallback=gone --affirmative-fallback=yup --non-affirmative-fallback=nada --

	echo-segment --g1="TEST: $0"
	return 0
)
function get_flag_value() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			get-flag-value [name] [...options] -- ...<flag>

			OPTIONS:
			[name]
			    The flag to search for.
			    If not provided, it is inferred from the first <flag>.

			--multi
			    Output the value for each occurence of the flag, instead of just the first.

			--fallback=<fallback> | --missing=<fallback>
			    When the flag is missing, use <fallback> as the value.

			--affirmative
			    Parse the value of the flag as an affirmative value, e.g. [yes] or [no]

			--non-affirmative
			    Parse the value of the flag as an inverted affirmative value, e.g. [yes] becomes [no], [no] becomes [yes]

			--affirmative-fallback=<affirmative-fallback>
			    When the flag is provided without an affirmative value, e.g. [--flag] use <affirmative-fallback> as the value.

			--non-affirmative-fallback=<non-affirmative-fallback>
			    When the flag is provided without a non-affirmative value, e.g. [--no-flag] use <non-affirmative-fallback> as the value.

			QUIRKS:
			It does not support [--flag value], only [--[no-]flag=[value]].
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_name='' option_multi=no option_fallback='' option_affirmative=no option_non_affirmative=no option_affirmative_fallback='yes' option_non_affirmative_fallback='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--multi') option_multi='yes' ;;
		'--fallback='* | '--missing='*) option_fallback="${item#*=}" ;;
		'--affirmative') option_affirmative='yes' ;;
		'--non-affirmative') option_non_affirmative='yes' ;;
		'--affirmative-fallback='* | '--yes='*) option_affirmative_fallback="${item#*=}" ;;
		'--non-affirmative-fallback='* | '--no='*) option_non_affirmative_fallback="${item#*=}" ;;
		'--') break ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$option_name"; then
				option_name="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# =====================================
	# Action

	local found='no' name inverted index value
	for item in "$@"; do
		# prepare
		name="$option_name"
		inverted='no'
		index=0

		# check flag status
		if test "${item:0:2}" != '--'; then
			# not a flag
			continue
		fi
		index=2

		# check inversion
		if test "${item:index:3}" == 'no-'; then
			# is inverted
			inverted='yes'
			index=5
		fi

		# if we are looking for a specific flag, check it is so
		if test -n "$name" -a "${item:index:${#name}}" != "$name"; then
			# not our specific flag
			continue
		fi
		found='yes'

		# fallback the name
		if test -z "$name"; then
			name="${item:index}"
			name="${name%%=*}"
		fi

		# get the value
		value="${item:index+${#name}}"
		if test -z "$value"; then
			if test "$inverted" = 'yes'; then
				value="$option_non_affirmative_fallback"
			else
				value="$option_affirmative_fallback"
			fi
		elif test "${value:0:1}" = '='; then
			# is a proper value, trim =
			value="${value:1}"
			# convert the value if inverted, affirmative, or non-affirmative
			if test "$option_affirmative" = 'yes'; then
				case "$value" in
				'Y' | 'y' | 'YES' | 'yes' | 'TRUE' | 'true') value='yes' ;;
				'N' | 'n' | 'NO' | 'no' | 'FALSE' | 'false') value='no' ;;
				esac
			elif test "$option_non_affirmative" = 'yes'; then
				case "$value" in
				'Y' | 'y' | 'YES' | 'yes' | 'TRUE' | 'true') value='no' ;;
				'N' | 'n' | 'NO' | 'no' | 'FALSE' | 'false') value='yes' ;;
				esac
			fi
			if test "$inverted" = 'yes'; then
				if test "$value" = 'yes'; then
					value='no'
				elif test "$value" = 'no'; then
					value='yes'
				fi
			fi
		else
			# we didn't actually find the option, we just found its prefix, continue
			continue
		fi

		# output
		print_line "$value"

		# if single, one result is all we want
		if test "$option_multi" = 'no'; then
			break
		fi
	done

	# handle missing case
	if test "$found" = 'no'; then
		if test -n "$option_fallback"; then
			print_line "$option_fallback"
		else
			return 91 # ENOMSG 91 No message of desired type
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		get_flag_value_test
	else
		get_flag_value "$@"
	fi
fi
