#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# =====================================
# RESET FIREWALL

# https://serverfault.com/a/200658/63348
sudo iptables -P INPUT ACCEPT
sudo iptables -P FORWARD ACCEPT
sudo iptables -P OUTPUT ACCEPT
sudo iptables -t nat -F
sudo iptables -t mangle -F
sudo iptables -F
sudo iptables -X
sudo ip6tables -P INPUT ACCEPT
sudo ip6tables -P FORWARD ACCEPT
sudo ip6tables -P OUTPUT ACCEPT
sudo ip6tables -t nat -F
sudo ip6tables -t mangle -F
sudo ip6tables -F
sudo ip6tables -X
sudo iptables -nvL

sudo ufw disable
sudo ufw status verbose

# =====================================
# CONFIGURE FIREWALL

# https://docs.docker.com/network/bridge/#enable-forwarding-from-docker-containers-to-the-outside-world
sudo sysctl net.ipv4.conf.all.forwarding=1
sudo iptables -P FORWARD ACCEPT

# https://docs.docker.com/config/daemon/ipv6/
# /etc/docker/daemon.json doesn't seem to exist

# =====================================
# RELOAD DOCKER

# sudo systemctl restart docker
sudo systemctl reload docker
sudo service docker restart

# network
# echo 'create docker network'
# docker network rm web || echo
# docker network create \
# 	--driver bridge \
# 	--subnet 192.168.0.0/16 \
# 	--gateway 192.168.4.1 \
# 	--opt parent=eth0 \
# 	web
# docker network ls

# =====================================
# DEBUG DOCKER

# https://developer.ibm.com/technologies/linux/tutorials/l-lpic1-109-4/

# NOTE: https://docs.docker.com/network/bridge/#use-the-default-bridge-network
# The default bridge network is considered a legacy detail of Docker and is not recommended for production use. Configuring it is a manual operation, and it has technical shortcomings.

# works:
# --net=host

# fails:
# --net=bridge
# --net=bridge --dns 9.9.9.9
# --net=bridge --dns=9.9.9.9 --dns-search=raspi8
# --dns-opt='DNSSEC=true' --dns-opt='DNSOverTLS=opportunistic'
# --net=bridge --dns 9.9.9.9
# sudo ... --privileged --net=bridge --dns=9.9.9.9
#  --dns-opt='edns0 trust-ad'
#  --dns-search='lan'
# --network web \

# alpine \
#	sh -c 'apk add curl bind-tools;

# sudo docker run -ti mmoy/ubuntu-netutils bash

# ubuntu \
# 	sh -c 'apt update -y; apt install -y curl dnsutils;

dnsip="$(what-is-my-exposed-dns)"
set -x
sudo docker run --rm --cap-add=NET_ADMIN --net=bridge --dns="$dnsip" alpine sh -c "apk add curl bind-tools; $(cat "$DOROTHY/commands/debug-network")"
set +x
