#!/usr/bin/env bash

function command_missing_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	eval-tester \
		-- command-missing -- this-is-a-non-existent-command

	eval-tester \
		-- command-missing -- this-is-a-non-existent-command command-missing

	eval-tester --status=1 \
		-- command-missing -- command-missing

	eval-tester --status=1 \
		-- command-missing -- command-missing command-exists

	echo-style --g1="TEST: $0"
	return 0
)
function command_missing() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Checks if <command>s are missing.

			USAGE:
			command-missing [--] ...<command>

			RETURNS:
			[0] if ANY command is missing.
			[1] if all commands are present.

			QUIRKS:
			Returns on first failure.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_commands=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_commands+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_commands+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_commands[@]} -eq 0 ]]; then
		help 'No <command>s provided.'
	fi

	# =====================================
	# Action

	# call the [bash.bash] helper
	__command_missing -- "${option_commands[@]}"
	return
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		command_missing_test
	else
		command_missing "$@"
	fi
fi
