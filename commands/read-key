#!/usr/bin/env bash
# trunk-ignore-all(shellcheck/SC2162)

function read_key_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	# refer to [is-tty --test] for more comprehensive testing

	# do a test without any capturing
	local book status

	printf '%s\n' "read-key bash version [$BASH_VERSION] [$BASH_VERSION_MAJOR] "

	status=0
	read -t 0 || status=$?
	printf '%s\n' "read-key check status [$status] "

	status=0
	printf '%s\n' 'abc' | read -t 0 || status=$?
	printf '%s\n' "read-key pipe check status [$status] "

	status=0
	read -t 0 <<<"$(printf '%s\n' 'abc')" || status=$?
	printf '%s\n' "read-key <<< check status [$status] "

	status=0
	read -t 0 < <(printf '%s\n' 'abc') || status=$?
	printf '%s\n' "read-key < <(...) check status [$status] "

	if test "$BASH_VERSION_MAJOR" -ge '4'; then
		status=0
		date
		read -sN1 -t 5 book || status=$?
		date
		printf '%s\n' "read-key v4 status [$status] and read [$book]"
	fi

	status=0
	date
	IFS= read -sn1 -t 5 book || status=$?
	date
	printf '%s\n' "read-key v3 status [$status] and read [$book]"

	if test "$BASH_VERSION_MAJOR" -ge '4'; then
		status=0
		printf '%s\n' 'abc' | read -sN1 -t 5 book || status=$?
		printf '%s\n' "read-key v4 status [$status] and read [$book]"
	fi

	status=0
	printf '%s\n' 'def' | IFS= read -sn1 -t 5 book || status=$?
	printf '%s\n' "read-key v3 status [$status] and read [$book]"

	status=0
	printf '%s\n' 'abc' | read -s -t 5 book || status=$?
	printf '%s\n' "read-key -s status [$status] and read [$book]"

	status=0
	printf '%s\n' 'abc' | read -t 5 book || status=$?
	printf '%s\n' "read-key status [$status] and read [$book]"

	status=0
	(
		sleep 3
		printf '%s\n' 'abc'
	) | read -t 60 book || status=$?
	printf '%s\n' "read-key manual timeout [$status] and read [$book]"

	eval-tester --name='timeout was detected' --status='60' \
		-- read-key --timeout=10

	{
		sleep 3
		echo
	} | eval-tester --name='enter was detected' --stdout='enter' \
		-- read-key --timeout=10

	{
		sleep 3
		printf '%s' $'\x0a'
	} | eval-tester --name='enter was detected' --stdout='enter' \
		-- read-key --timeout=10

	{
		sleep 3
		printf '%s' $'\eOB'
	} | eval-tester --name='down was detected' --stdout='down' \
		-- read-key --timeout=10

	{
		sleep 3
		printf '%s' $'\e[B'
	} | eval-tester --name='down was detected' --stdout='down' \
		-- read-key --timeout=10

	echo-segment --g1="TEST: $0"
	return 0
)
function read_key() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Read the pressed character and output what it was, such as [a], [left], [backspace], [enter], etc.

			USAGE:
			read-key [--timeout=600]
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_timeout=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# timeout
	if ! is-number -- "$option_timeout"; then
		option_timeout=600 # ten minutes
	fi
	option_timeout="$(get_read_decimal_timeout "$option_timeout")"

	# =====================================
	# Action

	# helper
	# -s do not echo input coming from a terminal
	# -t timeout	time out and return failure if a complete line of
	# 	input is not read within TIMEOUT seconds.  The value of the
	# 	TMOUT variable is the default timeout.  TIMEOUT may be a
	# 	fractional number.  If TIMEOUT is 0, read returns
	# 	immediately, without trying to read any data, returning
	# 	success only if input is available on the specified
	# 	file descriptor.  The exit status is greater than 128
	# 	if the timeout is exceeded
	# -n nchars	return after reading NCHARS characters rather than waiting
	# 	for a newline, but honor a delimiter if fewer than
	# 	NCHARS characters are read before the delimiter
	# -N nchars	return only after reading exactly NCHARS characters, unless
	# 	EOF is encountered or read times out, ignoring any
	# 	delimiter
	local key='' k0='' k1='' k2='' k3='' status=0
	if test "$BASH_VERSION_MAJOR" -ge '4'; then
		# bash v4+ technique
		read -sN1 -t "$option_timeout" k0 || status=$?
		read -sN1 -t 0.0001 k1 || :
		read -sN1 -t 0.0001 k2 || :
		read -sN1 -t 0.0001 k3 || :
		key="${k0}${k1}${k2}${k3}"
	else
		# bash v3 technique
		# IFS= is necessary to separate space from enter
		IFS= read -sn1 -t "$option_timeout" k0 || status=$?
		# printf 'k0 = %q \n' "$k0" >/dev/stderr
		if test "$k0" = $'\e'; then
			IFS= read -sn1 -t1 k1 || :
			# printf 'k1 = %q \n' "$k1" >/dev/stderr
			if test "$k1" = $'\e'; then
				print_line 'escape' # duplicate escape press
				return 0
			fi
			IFS= read -sn1 -t1 k2 || :
			# printf 'k2 = %q \n' "$k2" >/dev/stderr
		fi
		key="${k0}${k1}${k2}"
	fi
	if test "$status" -eq 142; then
		return 60 # ETIMEDOUT 60 Operation timed out
	elif test "$status" -eq 1 && (! test -t 0 || ! read -t 0); then
		# this can happen on CI environments, and other environments with stdin and TTY trickery
		# the read isn't wrapped in this, as those check are immediate, whereas read-key supports non-immediate timeouts
		# return a timeout, read-key always functions with a timeout, so no input = is the same result as a timeout
		return 60 # ETIMEDOUT 60 Operation timed out
	elif test "$status" -ne 0; then
		return "$status" # some other issue, let the caller figure it out
	fi

	# expand the key
	case "$key" in
	# vt100
	$'\eOB') print_line 'down' ;;
	$'\eOD') print_line 'left' ;;
	$'\eOC') print_line 'right' ;;
	$'\eOA') print_line 'up' ;;

		# linux
	$'\e[B') print_line 'down' ;;
	$'\e[4~') print_line 'end' ;;
	$'\e[1~') print_line 'home' ;;
	$'\e[D') print_line 'left' ;;
	$'\e[C') print_line 'right' ;;
	$'\e[A') print_line 'up' ;;

		# screen
	$'\eOB') print_line 'down' ;;
	$'\e[4~') print_line 'end' ;;
	$'\e[1~') print_line 'home' ;;
	$'\eOD') print_line 'left' ;;
	$'\eOC') print_line 'right' ;;
	$'\eOA') print_line 'up' ;;

		# xterm
	$'\eOB') print_line 'down' ;;
	$'\eOF') print_line 'end' ;;
	$'\eOH') print_line 'home' ;;
	$'\eOD') print_line 'left' ;;
	$'\eOC') print_line 'right' ;;
	$'\eOA') print_line 'up' ;;

		# special
	$'\x7f') print_line 'backspace' ;;
	$'\x01') print_line 'all' ;;    # what type of key is this?
	$'\x1b') print_line 'escape' ;; # same as $'\e'
	$'\x0a') print_line 'enter' ;;  # same as $'\n'
	'') print_line 'enter' ;;       # bash v3 compat
	$'\t') print_line 'tab' ;;
	' ') print_line 'space' ;;

	# other
	$'\eOH') print_line 'home' ;;
	$'\e[H') print_line 'home' ;;
	$'\eOF') print_line 'end' ;;
	$'\eOF') print_line 'end' ;;
	*) print_line "$key" ;;
	esac
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		read_key_test
	else
		read_key "$@"
	fi
fi
