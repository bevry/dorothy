#!/usr/bin/env bash
# trunk-ignore-all(shellcheck/SC2162)

function read_key_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	# refer to [is-tty --test] for more comprehensive testing

	# do a test without any capturing
	local book status

	printf '%s\n' "read-key bash version [$BASH_VERSION] [$BASH_VERSION_MAJOR] "

	status=0
	read -t 0 || status=$?
	printf '%s\n' "read-key check status [$status] "

	status=0
	printf '%s\n' 'abc' | read -t 0 || status=$?
	printf '%s\n' "read-key pipe check status [$status] "

	status=0
	read -t 0 <<<"$(printf '%s\n' 'abc')" || status=$?
	printf '%s\n' "read-key <<< check status [$status] "

	status=0
	read -t 0 < <(printf '%s\n' 'abc') || status=$?
	printf '%s\n' "read-key < <(...) check status [$status] "

	if test "$BASH_VERSION_MAJOR" -ge '4'; then
		status=0
		date
		read -sN1 -t 5 book || status=$?
		date
		printf '%s\n' "read-key v4 status [$status] and read [$book]"
	fi

	status=0
	date
	IFS= read -sn1 -t 5 book || status=$?
	date
	printf '%s\n' "read-key v3 status [$status] and read [$book]"

	if test "$BASH_VERSION_MAJOR" -ge '4'; then
		status=0
		printf '%s\n' 'abc' | read -sN1 -t 5 book || status=$?
		printf '%s\n' "read-key v4 status [$status] and read [$book]"
	fi

	status=0
	printf '%s\n' 'def' | IFS= read -sn1 -t 5 book || status=$?
	printf '%s\n' "read-key v3 status [$status] and read [$book]"

	status=0
	printf '%s\n' 'abc' | read -s -t 5 book || status=$?
	printf '%s\n' "read-key -s status [$status] and read [$book]"

	status=0
	printf '%s\n' 'abc' | read -t 5 book || status=$?
	printf '%s\n' "read-key status [$status] and read [$book]"

	status=0
	(
		sleep 3
		printf '%s\n' 'abc'
	) | read -t 60 book || status=$?
	printf '%s\n' "read-key manual timeout [$status] and read [$book]"

	eval-tester --name='timeout was detected' --status='60' \
		-- read-key --timeout=10

	{
		sleep 3
		echo
	} | eval-tester --name='enter was detected' --stdout='enter' \
		-- read-key --timeout=10

	{
		sleep 3
		printf '%s' $'\x0a'
	} | eval-tester --name='enter was detected' --stdout='enter' \
		-- read-key --timeout=10

	{
		sleep 3
		printf '%s' $'\eOB'
	} | eval-tester --name='down was detected' --stdout='down' \
		-- read-key --timeout=10

	{
		sleep 3
		printf '%s' $'\e[B'
	} | eval-tester --name='down was detected' --stdout='down' \
		-- read-key --timeout=10

	echo-style --g1="TEST: $0"
	return 0
)
function read_key() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Read the pressed character and output what it was, such as [a], [left], [backspace], [enter], etc.

			USAGE:
			read-key [--timeout=600]
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_timeout=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# timeout
	if ! is-number -- "$option_timeout"; then
		option_timeout=600 # ten minutes
	fi
	option_timeout="$(__get_read_decimal_timeout "$option_timeout")"

	# =====================================
	# Action

	# helper
	# -s do not echo input coming from a terminal
	# -t timeout	time out and return failure if a complete line of
	# 	input is not read within TIMEOUT seconds.  The value of the
	# 	TMOUT variable is the default timeout.  TIMEOUT may be a
	# 	fractional number.  If TIMEOUT is 0, read returns
	# 	immediately, without trying to read any data, returning
	# 	success only if input is available on the specified
	# 	file descriptor.  The exit status is greater than 128
	# 	if the timeout is exceeded
	# -n nchars	return after reading NCHARS characters rather than waiting
	# 	for a newline, but honor a delimiter if fewer than
	# 	NCHARS characters are read before the delimiter
	# -N nchars	return only after reading exactly NCHARS characters, unless
	# 	EOF is encountered or read times out, ignoring any
	# 	delimiter
	local key='' k0='' k1='' k2='' k3='' status=0
	if test "$BASH_VERSION_MAJOR" -ge '4'; then
		# bash v4+ technique
		read -sN1 -t "$option_timeout" k0 || status=$?
		read -sN1 -t 0.0001 k1 || :
		read -sN1 -t 0.0001 k2 || :
		read -sN1 -t 0.0001 k3 || :
		key="${k0}${k1}${k2}${k3}"
	else
		# bash v3 technique
		# IFS= is necessary to separate space from enter
		IFS= read -sn1 -t "$option_timeout" k0 || status=$?
		# printf 'k0 = %q \n' "$k0" >/dev/stderr
		if test "$k0" = $'\e'; then
			IFS= read -sn1 -t1 k1 || :
			# printf 'k1 = %q \n' "$k1" >/dev/stderr
			if test "$k1" = $'\e'; then
				__print_lines 'escape' # duplicate escape press
				return 0
			fi
			IFS= read -sn1 -t1 k2 || :
			# printf 'k2 = %q \n' "$k2" >/dev/stderr
		fi
		key="${k0}${k1}${k2}"
	fi
	if test "$status" -eq 142; then
		return 60 # ETIMEDOUT 60 Operation timed out
	elif test "$status" -eq 1 && (! test -t 0 || ! read -t 0); then
		# this can happen on CI environments, and other environments with stdin and TTY trickery
		# the read isn't wrapped in this, as those check are immediate, whereas read-key supports non-immediate timeouts
		# return a timeout, read-key always functions with a timeout, so no input = is the same result as a timeout
		return 60 # ETIMEDOUT 60 Operation timed out
	elif test "$status" -ne 0; then
		return "$status" # some other issue, let the caller figure it out
	fi

	# expand the key
	case "$key" in

	# special keys for common environments (manually verified)
	# don't do fn+key on ubuntu, as that is probably invoking a media key instead
	# https://en.wikipedia.org/wiki/Alt_key
	# https://en.wikipedia.org/wiki/Caps_Lock
	# https://en.wikipedia.org/wiki/Control_key
	# https://en.wikipedia.org/wiki/Command_key
	# https://en.wikipedia.org/wiki/Backspace
	# https://en.wikipedia.org/wiki/Delete_key
	# https://en.wikipedia.org/wiki/End_key
	# https://en.wikipedia.org/wiki/Enter_key
	# https://en.wikipedia.org/wiki/Esc_key
	# https://en.wikipedia.org/wiki/Home_key
	# https://en.wikipedia.org/wiki/Insert_key
	# https://en.wikipedia.org/wiki/List_of_Unicode_characters
	# https://en.wikipedia.org/wiki/Option_key
	# https://en.wikipedia.org/wiki/Page_Up_and_Page_Down_keys
	# https://en.wikipedia.org/wiki/Shift_key
	# https://en.wikipedia.org/wiki/Super_key_(keyboard_button)
	# https://en.wikipedia.org/wiki/Tab_key
	# https://stackoverflow.com/a/29243081/130638
	# https://www.acrobatfaq.com/atbref95/index/Keyboard_Shortcuts/Unicode_Codes_for_Keyboard_symbols.html
	# ⌅, ⌤ = enter key: [return enter] old macos keyboards, [return] new macos keyboards, [Enter ↵] raspberry keyboards
	# ↵ = return key, alias for enter
	# ↑ = up arrow key
	# ↓ = down arrow key
	# → = right arrow key
	# ⎋ = escape key: [esc] macos keyboards, [Esc] raspberry keyboard
	# ⌦ = delete key, aka delete forward key: [not present] macos keyboards, [Delete] raspberry keyboard
	# ⌫ = backspace key, aka delete backward key: [Backspace ⬸] raspberry keyboard
	# ← = left arrow key
	# ⇧ = shift key
	# ⎇ = alt key: [not present] macos keyboards, [Alt] raspberry keyboards
	# ⌥ = option key: [option alt] old macos keybaords, [option ⌥] new macos keyboards, [not present] raspberry keyboard
	# ⌃, ⎈ = control key: [control] old macos keyboards, [control ⌃] new macos keyboards, [Ctrl] raspberry keyboards, [⎈] rarely used official symbol
	# ⌘ = command key: [command ⌘] macos keyboards, [raspberry symbol] raspberry keyboards
	# ❖ = super key, alias for command key
	# 🌐 = function key: [fn] old macos keybaords, [🌐 fn] new macos keyboards, [Fn] raspberry keyboards
	# ⇪ = caps lock key: [caps lock] macos and raspberry keyboards
	# ⇥ = tab key: [tab] on macos keyboard, [tab ⇤ ⇥] raspberry keyboards
	# ⇤ = backtab key: [visible as the alt] raspberry keyboards
	# ⇱ = home key: [Home] raspberry keyboards
	# ⇲ = end key: [End] raspberry keyboards
	# ⇞ = page up key: [PgUp] raspberry keyboards
	# ⇟ = page down key: [PgDn] raspberry keyboards
	# Insert key does not have an official symbol: [not present] macos keyboards, [Ins] raspberry keyboards
	$'\e[A') __print_lines 'up' ;;                             # [↑] ubuntu, macos   [k] vim
	$'\e[B') __print_lines 'down' ;;                           # [↓] ubuntu, macos   [j] vim
	$'\e[C') __print_lines 'right' ;;                          # [→] ubuntu, macos   [l] vim
	$'\e[D') __print_lines 'left' ;;                           # [←] ubuntu, macos   [h] vim
	$'\e[H') __print_lines 'home' ;;                           # [⇱] ubuntu, macos   [numlock 7] ubuntu       [🌐 ⇧ ←] macos
	$'\e[F') __print_lines 'end' ;;                            # [⇲] ubuntu, macos   [numlock 1] ubuntu       [🌐 ⇧ →] macos
	$'\e[2~' | $'\e[2') __print_lines 'insert' ;;              # $'\e[2' bash v3     [INSERT] [numlock 0] ubuntu
	$'\e[3~' | $'\e[3') __print_lines 'delete' ;;              # $'\e[3' bash v3     [⌦] [numlock .] ubuntu   [🌐 ⌫] macos
	$'\e[5~' | $'\e[5' | $'\006') __print_lines 'page-up' ;;   # $'\e[5' bash v3     [⇞] [numlock 9] ubuntu   [$'\006'] [⌃ f] vim      [🌐 ⇧ ↑] macos
	$'\e[6~' | $'\e[6' | $'\002') __print_lines 'page-down' ;; # $'\e[6' bash v3     [⇟] [numlock 3] ubuntu   [$'\002'] [⌃ b] vim      [🌐 ⇧ ↓] macos
	$'\177') __print_lines 'backspace' ;;                      # $'\177' = $'\x7f'   [⌫] ubuntu, macos
	$'\e') __print_lines 'escape' ;;                           # $'\e' = $'\x1b'
	$'\x0a' | '') __print_lines 'enter' ;;                     # '' bash v3, $'\x0a' =  $'\n'
	$'\t') __print_lines 'tab' ;;                              # universal, ⇥
	$'\e[Z') __print_lines 'backtab' ;;                        # shift+tab on macos, ⇤
	' ') __print_lines 'space' ;;                              # universal

	# special keys for other environments (tried to verify, haven't been able to)
	$'\eOA') __print_lines 'up' ;;    # v100, screen, xterm
	$'\eOB') __print_lines 'down' ;;  # v100, screen, xterm
	$'\eOC') __print_lines 'right' ;; # v100, screen, xterm
	$'\eOD') __print_lines 'left' ;;  # v100, screen, xterm
	$'\eOH') __print_lines 'home' ;;  # xterm
	$'\eOF') __print_lines 'end' ;;   # xterm
	$'\e[1~') __print_lines 'home' ;; # linux, screen
	$'\e[4~') __print_lines 'end' ;;  # linux, screen
	$'\x01') __print_lines 'all' ;;   # what type of key is this?
	# G = end, g = home

	# standard key or unknown special key
	*) __print_lines "$key" ;;
	esac
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		read_key_test
	else
		read_key "$@"
	fi
fi
