#!/usr/bin/env bash

function is_match_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	eval-tester --name='match works' --status=0 \
		-- is-match 'a +haystack ?' 'a  haystack'

	eval-tester --name='match works' --status=0 \
		-- is-match -i 'Z|B' 'abc'

	eval-tester --name='no match works' --status=1 \
		-- is-match -i 'Z|Y' 'abc'

	echo-segment --g1="TEST: $0"
	return 0
)
function is_match() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks if the input matches the pattern.

			USAGE:
			is-match [...options]
			is-match [...options] <pattern> <input>

			OPTIONS:
			<pattern> | --pattern=<pattern>
			    The rust regular expression to use.

			<input> | --input=<input>
			    The input to check against the pattern.

			-i | --ignore-case
			    Ignore case when matching.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_pattern='' option_input='' option_ignore_case='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--pattern='*) option_pattern="${item#*=}" ;;
		'--input='*) option_input="${item#*=}" ;;
		'-i') option_ignore_case='yes' ;;
		'--no-ignore-case'* | '--ignore-case'*)
			option_ignore_case="$(get-flag-value --affirmative --fallback="$option_ignore_case" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$option_pattern"; then
				option_pattern="$item"
			elif test -z "$option_input"; then
				option_input="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# =====================================
	# Action

	source "$DOROTHY/sources/ripgrep.bash"

	local cmd=(
		rg --quiet --regexp="$option_pattern"
	)
	if test "$option_ignore_case" = 'yes'; then
		cmd+=('--ignore-case')
	fi
	"${cmd[@]}" <<<"$option_input"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		is_match_test
	else
		is_match "$@"
	fi
fi
