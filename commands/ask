#!/usr/bin/env bash

# read can set the default with [-i <default>] however that requries [-e] which uses readline, which requires stdin to not be programmatic
#
# if stdin is programmatic (ssh -T, CI, piped) then read behaves differently:
# [-p <prompt>] is discarded, no prompt is shown
# [-i <default>] is discarded, no default value is handled
# as such, do not pass such to read, do the prompt and handling of the default value ourself

function ask_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	eval-tester --name='receive default response by timeout and no input' --stdout='a default response' \
		-- ask --skip-default --question='What is your response?' --default='a default response'

	local down=$'\e[B'

	{
		sleep 3
		__print_line
	} | eval-tester --name='receive default response by enter key' --stdout='a default response' \
		-- ask --question='What is your response?' --default='a default response'

	{
		sleep 3
		__print_lines 'a custom response'
	} | eval-tester --name='receive custom response by sending custom response' --stdout='a custom response' \
		-- ask --question='What is your response?'

	{
		sleep 3
		__print_lines 'a custom response'
	} | eval-tester --name='receive custom response that overwrites the default, by sending custom response' --stdout='a custom response' \
		-- ask --question='What is your response?' --default='a default response'

	{
		__print_lines 'overwrite' | {
			ask --question='Q1' --default='D1' --skip-default
			ask --question='Q2' --default='D2'
		}
	} | eval-tester --name='receive a custom response that overwrites the default, but the custom response is ignored because of --skip-default, so it is absorbed by a subsequent consumer' --stdout=$'D1\noverwrite' \
		-- cat

	{
		# provide a custom response
		sleep 3
		__print_lines 'a custom response'

		# confirm the custom response
		sleep 3
		__print_line
	} | eval-tester --name='receive a custom response that is also confirmed due to required confirmation' --stdout='a custom response' \
		-- ask --question='What is your response?' --confirm

	{
		# select the default value
		sleep 3
		__print_line

		# move down and change to custom response
		sleep 3
		__print_string "$down"
		sleep 3
		__print_line

		# provide the custom response
		sleep 3
		__print_lines 'a custom response'

		# confirm the custom response
		sleep 3
		__print_line
	} | eval-tester --name='receive a custom response, by first selecting default, then changing mind, sending custom response, and confirming custom response' --stdout='a custom response' \
		-- ask --question='What is your response?' --default='a default response' --confirm

	{
		# override the default response with the custom response
		sleep 3
		__print_lines 'a custom response'

		# confirm the provided value
		sleep 3
		__print_line
	} | eval-tester --name='receuve a custom response, by sending the custon response to overwrite the default, and then confirming the custom response' --stdout='a custom response' \
		-- ask --question='What is your response?' --default='a default response' --confirm

	# @todo add tests for timout

	echo-style --g1="TEST: $0"
	return 0
)
function ask_() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Prompt the user for an input value in a clean and robust way.

			USAGE:
			ask [...options]

			OPTIONS:
			<question> | --question=<question>
			    Display this question in the prompt. If specified multiple times, they will be joined by newline, and only the first will be lingered.

			--default=<value>
			    Default value if no user specified value is entered.

			--[no-]confirm=[yes|no]
			    Confirm the (default/entered) value before continuing.

			--[no-]confirm-default=[YES|no] | --[no-]skip-default=[yes|NO]
			    Confirm the default value (if provided) before continuing. Defaults to enabled.

			--[no-]confirm-input=[yes|NO]
			    Confirm the entered value before continuing. Defaults to disabled.

			--[no-]password=[yes|NO]
			    Hide the value when entering by using password mode.

			--[no-]required=[yes|NO]
			    Do not continue until a value is provided. Disable aborting the prompt.

			--[no-]linger=[yes|NO]
			    Whether the prompt should persist afterwards.

			--timeout=<seconds>
			    Custom timeout value in seconds.

		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item args=() option_question=()
	local option_default='' option_confirm_default='yes' option_confirm_input='no'
	local option_required='no' option_password='no'
	local option_linger='no' option_timeout='' option_inline=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--question='*) option_question+=("${item#*=}") ;;
		'--default='*) option_default="${item#*=}" ;;
		'--no-skip-default'* | '--skip-default'*)
			option_confirm_default="$(get-flag-value --non-affirmative --fallback="$option_confirm_default" -- "$item")"
			;;
		'--no-confirm-default'* | '--confirm-default'*)
			option_confirm_default="$(get-flag-value --affirmative --fallback="$option_confirm_default" -- "$item")"
			;;
		'--no-confirm-input'* | '--confirm-input'*)
			option_confirm_input="$(get-flag-value --affirmative --fallback="$option_confirm_input" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm_default="$(get-flag-value --affirmative --fallback="$option_confirm_default" -- "$item")"
			option_confirm_input="$(get-flag-value --affirmative --fallback="$option_confirm_input" -- "$item")"
			;;
		'--no-required'* | '--required'*)
			option_required="$(get-flag-value --affirmative --fallback="$option_required" -- "$item")"
			;;
		'--no-password'* | '--password'*)
			option_password="$(get-flag-value --affirmative --fallback="$option_password" -- "$item")"
			;;
		'--no-linger'* | '--linger'*)
			option_linger="$(get-flag-value --affirmative --fallback="$option_linger" -- "$item")"
			;;
		'--no-inline'* | '--inline'*)
			option_inline="$(get-flag-value --affirmative --fallback="$option_inline" -- "$item")"
			;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--')
			args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_question+=("$item") ;;
		esac
	done

	# question
	local question_title question_body
	if test "${#option_question[@]}" -ne 0; then # bash v3 compat
		if test -n "${option_question[0]}"; then
			question_title="${option_question[0]}"
			question_body="$(__print_lines "${option_question[@]:1}")"
		else
			question_title="$(__print_lines "${option_question[@]:1}")"
			question_body=''
		fi
	else
		question_title=''
		question_body=''
	fi

	# =====================================
	# Styles

	source "$DOROTHY/sources/config.sh"

	# styles.bash provides:
	# all style variables
	load_dorothy_config 'styles.bash'

	# refresh the styles
	refresh_style_cache -- 'question_title_prompt' 'question_title_result' 'question_body' 'input_warning' 'input_error' 'icon_prompt' 'result_line' 'empty_line' 'commentary_nothing_provided' 'commentary_using_password' 'indent_blockquote' 'commentary_timeout_default' 'commentary_timeout_required' 'commentary_timeout_optional' 'commentary_input_failure' 'result_commentary_spacer' 'key' 'code' 'alternative_screen_buffer' 'default_screen_buffer' 'clear_screen'

	# style the question
	local question_title_and_body_and_newline='' question_title_result=''
	if test -n "$question_title"; then
		if test -n "$question_body"; then
			question_title_and_body_and_newline="${style__question_title_prompt}${question_title}${style__end__question_title_prompt}"$'\n'"${style__question_body}${question_body}${style__end__question_body}"$'\n'
		else
			question_title_and_body_and_newline="${style__question_title_prompt}${question_title}${style__end__question_title_prompt}"$'\n'
		fi
		question_title_result="${style__question_title_result}${question_title}${style__end__question_title_result}"
	fi

	# =====================================
	# Action

	# prepare
	local RESULT="$option_default"

	# adjust tty
	local terminal_device_file terminal_reactive inline
	terminal_device_file="$(get-terminal-device-file)"
	terminal_reactive="$(get-terminal-reactivity-support)"
	if [[ $terminal_reactive == 'no' || $option_inline == 'no' ]]; then
		inline='no'
	else
		inline='yes'
	fi

	# adjust prompt
	local input_prompt_and_newline=''
	if test "$terminal_reactive" = 'no' -a -n "$option_default"; then
		input_prompt_and_newline="Press ${style__key}ENTER${style__end__key} to use the default value of ${style__code}${option_default}${style__end__code}. Press ${style__key}ESC${style__end__key} then ${style__key}ENTER${style__end__key} to use no value."$'\n'
	fi

	# adjust timeout to one minute if we have a default value, or if optional
	if test -z "$option_timeout" && (is-value -- "$RESULT" || test "$option_required" = 'no'); then
		option_timeout=60
	fi

	# adjust read args based on timeout
	local READ_RESULT READ_PROMPT="${question_title_and_body_and_newline}${input_prompt_and_newline}${style__icon_prompt}" READ_PROMPT_LINES CLEAR
	if test "$inline" = 'no'; then
		if test -n "$option_timeout"; then
			function __read {
				READ_RESULT=''
				__print_string "${CLEAR}${READ_PROMPT}" >"$terminal_device_file"
				IFS= read -rt "$option_timeout" READ_RESULT
				return
			}
		else
			function __read {
				READ_RESULT=''
				__print_string "${CLEAR}${READ_PROMPT}" >"$terminal_device_file"
				IFS= read -r READ_RESULT
				return
			}
		fi
	else
		READ_PROMPT_LINES="$(echo-clear-lines --count-only --here-string <<<"$READ_PROMPT")"
		if test -n "$option_timeout"; then
			function __read {
				READ_RESULT=''
				IFS= read -rt "$option_timeout" -ei "$RESULT" -p "${CLEAR}${READ_PROMPT}" READ_RESULT
				return
			}
		else
			function __read {
				READ_RESULT=''
				IFS= read -rei "$RESULT" -p "${CLEAR}${READ_PROMPT}" READ_RESULT
				return
			}
		fi
	fi

	# helpers
	local ASKED='no' commentary=''
	function on_timeout {
		if is-value -- "$RESULT"; then
			# default
			commentary="${style__result_commentary_spacer}${style__commentary_timeout_default}"
			return 0
		elif test "$option_required" = 'no'; then
			# optional
			commentary="${style__result_commentary_spacer}${style__commentary_timeout_optional}"
			return 0
		else
			# required
			commentary="${style__result_commentary_spacer}${style__commentary_timeout_required}"
			return 60 # ETIMEDOUT 60 Operation timed out
		fi
	}
	function do_prompt { # has sideffects: RESULT, ASKED
		local __read_status result_prompt result_prompt_lines

		# reset clear, in case a choose/confirm failed and we are re-prompting
		if test "$inline" = 'no'; then
			CLEAR="$style__alternative_screen_buffer"
		else
			CLEAR=''
		fi

		ASKED='yes' # not local
		while true; do
			# reset
			__read_status=0
			READ_RESULT=''

			# adapt according to read mode
			if test "$inline" = 'no'; then
				__read || __read_status=$?
				if test "$__read_status" -eq 0; then
					# process the input result to the actual RESULT
					if test -z "$READ_RESULT" -o "$READ_RESULT" = $'\n'; then
						# treat empty string and newline as default
						:
					elif [[ $READ_RESULT =~ ^[[:cntrl:][:space:]]*$ ]]; then
						# treat only control characters (e.g. escape) and whitespace characters as empty input
						RESULT=''
					else
						# treat everything else as custom input
						RESULT="$READ_RESULT"
					fi
					CLEAR="$style__clear_screen"
				fi
			else
				result_prompt=''
				__read || __read_status=$?

				# update the value on successful read, and prepare the clear
				# note if there was a default value, pressing enter will set [READ_RESULT] to it
				if test "$__read_status" -eq 0; then
					# only update RESULT on successful read status, as [READ_RESULT] will be empty on timeout
					RESULT="$READ_RESULT"
					# the user has pressed enter. which will be added to the TTY, so trim it and trim a possibly very long input
					result_prompt+="$RESULT"$'\n'
				fi # otherwise it has timed out. ctrl+c is not caught as we are not trapping it

				# prepare the new erasure, this is done like so, because it is quicker, which is important for multiple enter presses on --required
				# it is quicker because processing the read_prompt takes time, as it has ANSI Escape Codes, which requires invoking deno behind the scenes for more advanced detection, so we do that processing once beforehand
				# then we do the quick result processing here and combine the two
				result_prompt_lines="$(echo-clear-lines --count-only --here-string <<<"$result_prompt")"
				CLEAR="$(echo-clear-lines --count="$((READ_PROMPT_LINES + result_prompt_lines))")"
				# this is too slow: clear="$(echo-clear-lines --count-only --here-string <<<"$read_prompt$result_prompt")"
			fi

			# handle the result
			if test "$__read_status" -eq 142; then
				__read_status=60 # ETIMEDOUT 60 Operation timed out
				break
			fi
			if is-value -- "$RESULT"; then
				# we have a value, proceed
				break
			elif test "$option_required" = 'yes'; then
				# reset and ask again
				RESULT="$option_default"
				continue
			else
				# no result, optional, set value to empty, exit read loop, and continue with program
				RESULT=''
				break
			fi
		done
		# do the final erasure if necessary
		if [[ $inline == 'no' || -n $CLEAR ]]; then
			CLEAR="$style__default_screen_buffer"
			__print_string "$CLEAR" >"$terminal_device_file"
		fi
		# done
		if test "$__read_status" -ne 0; then
			return "$__read_status"
		fi
		do_validate
	}
	function do_validate {
		local choose_args=() choose_status choice choices=()

		# have we prompted?
		if test "$ASKED" = 'no'; then
			# do we want to confirm the default value
			# adding a [&& test -t 0] will cause stdin input to always be respected, which is inconsistent with expecations, e.g.
			#     echo 'overwrite' | { ask --linger --default='d1' --skip-default --question='q1'; ask --linger --default='d2' --skip-default --question='q2' )
			# should output 'd1' and 'overwrite', not 'overwrite' and 'd2', as the goal of skip-default is to use the default preference for performance and intuition reasons
			if is-value -- "$RESULT" && test "$option_confirm_default" = 'no'; then
				return 0
			fi
		else
			# we have asked, do we want to confirm the input value
			if test "$option_confirm_input" = 'no'; then
				return 0
			fi

			# redo choices, has to be redone each time due to result
			if test "$option_password" = 'yes'; then
				choices+=('existing' 'use the entered password')
			else
				choices+=('existing' "use the entered value: [$RESULT]")
			fi
			choices+=('custom' 'redo the entered value')
			if test "$option_required" = 'no'; then
				choices+=('none' 'use no value')
			fi

			# we want to confirm
			if test "${#option_question[@]}" -ne 0; then
				choose_args+=(
					"${option_question[@]}"
				)
			fi
			choose_args+=(
				--timeout="$option_timeout"
				--label -- "${choices[@]}"
			)

			# choose and check for failure
			local choose_status=0
			eval_capture --statusvar=choose_status --stdoutvar=choice -- \
				choose "${choose_args[@]}"
			if test "$choose_status" -eq 60; then
				on_timeout
				return
			elif test "$choose_status" -ne 0; then
				commentary="${style__result_commentary_spacer}$(printf "$style__commentary_input_failure" "choose failure: $choose_status")"
				return "$choose_status"
			fi

			# proceess the confirmation
			if test "$choice" = 'existing'; then
				# done, sucess
				return 0
			elif test "$choice" = 'custom'; then
				: # proceed with prompt
			elif test "$choice" = 'none'; then
				# done, sucess
				RESULT=''
				return 0
			else
				# unknown error
				commentary="${style__result_commentary_spacer}$(printf "$style__commentary_input_failure" "invalid choice: $choice")"
				return 14 # EFAULT 14 Bad address
			fi
		fi

		# prompt and check for failure
		local prompt_status=0
		eval_capture --statusvar=prompt_status -- do_prompt
		if test "$prompt_status" -ne 0; then
			# timeout probably
			on_timeout
			return
		fi

		# done, success
		return 0
	}

	# act
	local validate_status=0
	eval_capture --statusvar=validate_status -- do_validate
	local render="$question_title_result$commentary"
	if test "$validate_status" -eq 0; then
		# success response
		# inform if requested
		if test "$option_linger" = 'yes'; then
			local result
			if test -z "$RESULT"; then
				result="${style__commentary_nothing_provided}"
			elif test "$option_password" = 'yes'; then
				result="${style__commentary_using_password}"
			else
				result="${RESULT//$'\n'/$'\n'"${style__indent_blockquote}"}" # add the necessary indentation
				result="${style__result_line}${style__indent_blockquote}${result}${style__end__result_line}"
			fi
			render+=$'\n'"$result"$'\n'
			__print_string "$render" >"$terminal_device_file"
		fi
		# stdout
		if test -n "$RESULT"; then
			__print_lines "$RESULT" # stdout, so use __print_lines
		fi
	else
		# failure response
		# always inform
		if test "$option_linger" = 'yes'; then
			__print_string "$render" >"$terminal_device_file"
		else
			__print_string "$render" >/dev/stderr
		fi
		return "$validate_status"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		ask_test
	else
		ask_ "$@"
	fi
fi
