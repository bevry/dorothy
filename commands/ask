#!/usr/bin/env bash
source "$DOROTHY/sources/tty.bash"
source "$DOROTHY/sources/strict.bash"

# options
option_question="$(get-flag-value question -- "$@")"
option_default="$(get-flag-value default -- "$@")"
option_confirm="$(get-flag-value confirm -- "$@")"
option_password="$(get-flag-value password -- "$@")"
option_required="$(get-flag-value required -- "$@")"
option_timeout="$(get-flag-value timeout -- "$@")"

# prepare
flags=('-r')
result="$option_default"

# helpers
asked='no'
function handle_timeout () {
	if is-value "$result"; then
		stderr echo "Ask timed out, using fallback value: $result"
		sleep 10
		echo "$result"
		return 0
	elif test "$option_required" != 'yes'; then
		stderr echo 'Ask timed out, as the field was optional will use no value.'
		sleep 10
		return 0
	else
		stderr echo 'Ask timed out, with no fallback.'
		sleep 10
		return 84  # timeout (ascii char code 84 'T')
	fi
}
function ask () {
	tty_auto
	asked='yes'
	if test -n "${1-}"; then
		echo -e "$1" > /dev/tty
	fi
	while true; do
		strict_e_pause; local eo="$?"
		read "${flags[@]}" -t 300 -r -p "> " result
		local ec="$?"; strict_e_restore "$eo"
		if test "$ec" -gt 128; then
			return 84  # timeout (ascii char code 84 'T')
		fi
		if is-value "$result"; then
			break
		elif test "$option_required" != 'yes'; then
			result=''
			break
		fi
	done
	validate
}
function validate () {
	choices=()
	if is-value "$result"; then
		# we have a value, so go for it
		if test "$option_confirm" != 'yes'; then
			echo "$result"
			exit
		fi
		# proceed with confirm
		if test "$asked" = 'yes'; then
			if test "$option_password" = 'yes'; then
				choices+=('existing' 'use the entered password')
			else
				choices+=('existing' "use the entered value: [$result]")
			fi
		else
			if test "$option_password" = 'yes'; then
				choices+=('existing' 'use the preconfigured password')
			else
				choices+=('existing' "use the preconfigured value: [$result]")
			fi
		fi
	fi
	if test "$asked" = 'yes'; then
		choices+=('custom' 'redo the entered value')
	else
		choices+=('custom' 'enter a value')
	fi
	if test "$option_required" != 'yes'; then
		choices+=('none' 'use no value')
	fi

	# as need to confirm, adjust the timeout
	if test -z "$option_timeout" && (is-value "$result" || test "$option_required" != 'yes'); then
		# timeout of one minute for confirms of existing values, or optional values
		option_timeout=60
	fi

	# ask
	strict_e_pause; local eo="$?"
	choice="$(choose-option \
		--question="$option_question" \
		--timeout="$option_timeout" \
		--label \
		-- "${choices[@]}")"
	local ec="$?"; strict_e_restore "$eo"

	# check
	if test "$ec" -ne 0; then
		# timeout probably
		handle_timeout
		exit "$?"  # exit with the above on success and failure
	fi

	# handle
	if test "$choice" = 'existing'; then
		# done, sucess
		echo "$result"
		exit
	elif test "$choice" = 'custom'; then
		# ask
		strict_e_pause; local eo="$?"
		ask "$option_question"
		local ec="$?"; strict_e_restore "$eo"

		# check for failure
		if test "$ec" -ne 0; then
			# timeout probably
			handle_timeout
			exit "$?"  # exit with the above on success and failure
		fi

		# done, success
		exit
	elif test "$choice" = 'none'; then
		# done, sucess
		echo
		exit
	else
		# unknown error
		stderr echo "invalid choice: [$result]"
		sleep 10
		exit 1
	fi
}

# act
validate
