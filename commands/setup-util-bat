#!/usr/bin/env bash

# https://github.com/sharkdp/bat
# cat alternative

# https://github.com/sharkdp/bat/releases
# bat-musl_0.23.0_amd64.deb
# bat-musl_0.23.0_i686.deb
# bat-v0.23.0-aarch64-unknown-linux-gnu.tar.gz
# bat-v0.23.0-arm-unknown-linux-gnueabihf.tar.gz
# bat-v0.23.0-arm-unknown-linux-musleabihf.tar.gz
# bat-v0.23.0-i686-pc-windows-msvc.zip
# bat-v0.23.0-i686-unknown-linux-gnu.tar.gz
# bat-v0.23.0-i686-unknown-linux-musl.tar.gz
# bat-v0.23.0-x86_64-apple-darwin.tar.gz
# bat-v0.23.0-x86_64-pc-windows-gnu.zip
# bat-v0.23.0-x86_64-pc-windows-msvc.zip
# bat-v0.23.0-x86_64-unknown-linux-gnu.tar.gz
# bat-v0.23.0-x86_64-unknown-linux-musl.tar.gz
# bat_0.23.0_amd64.deb
# bat_0.23.0_arm64.deb
# bat_0.23.0_armhf.deb
# bat_0.23.0_i686.deb

# https://repology.org/project/bat-cat/versions

function setup_util_bat() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=bat; then
		return 0
	fi

	# despite docs, no apk
	local arch options=(
		--cli='bat'
		"$@"
		APT='bat' # UBUNTU
		AUR='bat' # ARCH
		BREW='bat'
		BSD='bat'
		CARGO='bat'
		CHOCO='bat'
		NIX='bat'
		PORT='bat'
		RPM='bat' # FEDORA
		SCOOP='bat'
		XBPS='bat'   # VOID
		ZYPPER='bat' # SUSE
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='sharkdp/bat' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB="*/$2"
		)
	}
	function add_deb_option {
		options+=(
			DEB="$(get_github_asset_url "$1")"
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		add_download_option '-x86_64-apple-darwin.tar.gz' 'bat'
	elif is-linux; then
		if test "$arch" = 'a64'; then
			add_deb_option '_arm64.deb'
			add_download_option '-aarch64-unknown-linux-gnu.tar.gz' 'bat'
		elif test "$arch" = 'a32'; then
			add_deb_option '_armhf.deb'
			add_download_option '-arm-unknown-linux-musl.tar.gz' 'bat'
		elif test "$arch" = 'x64'; then
			add_deb_option '_amd64.deb'
			add_download_option '-x86_64-unknown-linux-musl.tar.gz' 'bat'
		elif test "$arch" = 'x32'; then
			add_deb_option '_i686.deb'
			add_download_option '-i686-unknown-linux-musl.tar.gz' 'bat'
		fi
	elif is-wsl; then
		if test "$arch" = 'x64'; then
			add_download_option '-x86_64-pc-windows-msvc.zip' 'bat.exe'
		elif test "$arch" = 'x32'; then
			add_download_option '-i686-pc-windows-msvc.zip' 'bat.exe'
		fi
	fi
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_bat "$@"
fi
