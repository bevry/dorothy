#!/usr/bin/env bash

function command_working() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Check if a <command> is available and working.
			Working check is done via [<command> --help] and [<command> --version] checks.

			USAGE:
			command-working [...options] [--] ...<command>

			OPTIONS:
			--sudo
			    Test the command with sudo.

			RETURNS:
			[0] if all commands are working
			[1] if any command was not working
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item commands=() option_sudo='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--')
			commands+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) commands+=("$item") ;;
		esac
	done

	# check
	if test "${#commands[@]}" -eq 0; then
		help 'No <command>s provided.'
	fi

	# =====================================
	# Helpers

	# https://github.com/greymd/teip/issues/29
	# https://trunkcommunity.slack.com/archives/C0205B6KK8X/p1661601215325159
	local exceptions=(
		ssh-askpass
		sshd
		teip
		trunk
		rpi-update
	)
	function check_status {
		local cmd=() command_exit_status
		# ensure sbin commands work
		if [[ $* == *sbin* ]] || test "$option_sudo" = 'yes'; then
			cmd+=(
				'sudo-helper'
				'--reason=Your sudo/root/login password is required to verify this command is available and working:'
				'--'
			)
		fi
		# continue with the comand
		cmd+=("$@")
		# run the command hiding the output
		eval_capture --statusvar=command_exit_status --no-output -- "${cmd[@]}"
		# check for correct failure codes
		if test "$command_exit_status" -eq 22 -o "$command_exit_status" -eq 200; then
			return 0
		else
			# otherwise return success or failure code
			return "$command_exit_status"
		fi
	}
	function check_working {
		# check it exists first
		local cmd
		cmd="$(type -P "$1" 2>/dev/null || :)"
		if test -z "$cmd"; then
			# we must at least find it
			return 1
		fi

		# check if presence is enough for this cmd
		local exception
		for exception in "${exceptions[@]}"; do
			if [[ $cmd == */"$exception" ]]; then
				return 0
			fi
		done

		# it does exist, now check its return code
		check_status "$cmd" --version ||
			check_status "$cmd" version ||
			check_status "$cmd" --help ||
			check_status "$cmd" -h
	}

	# =====================================
	# Action

	local command action_exit_status
	for command in "${commands[@]}"; do
		eval_capture --statusvar=action_exit_status -- check_working "$command"
		if test "$action_exit_status" -eq 0; then
			continue
		else
			return 1 # command not working
		fi
	done
	return 0 # all commands are working
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	command_working "$@"
fi
