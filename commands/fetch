#!/usr/bin/env bash

function fetch_() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Fetch the URL, using whichever tool is available on your system.

			USAGE:
			fetch [...options] <url>

			OPTIONS:
			--bearer-token=<token>
			    If provided, include this in a bearer token header.

			--[no-]status[=<yes|no>]
			    If truthy, output only the status code, rather than the entire contents of the fetch URL.

			--[no-]ok[=<yes|no>]
			    If truthy, skip fetching contents and only test if fetching the URL returned a success status code.
			    If falsey, skip fetching contents and only test if fetching the URL returned a non-successful status code.

			QUIRKS:
			If [curl] was required, but not found, it will be installed automatically.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_bearer_token='' option_url='' option_status='no' option_ok=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--bearer-token='*) option_bearer_token="${item#*=}" ;;
		'--no-status'* | '--status'*)
			option_status="$(get-flag-value --affirmative --fallback="$option_status" -- "$item")"
			;;
		'--no-ok'* | '--ok'*)
			option_ok="$(get-flag-value --affirmative --fallback="$option_ok" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$option_url"; then
				option_url="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if test -z "$option_url"; then
		help "No URL was provided"
	fi

	# =====================================
	# Helpers

	function __log_failure {
		local status="$?"
		echo-style --error="Failed to fetch the URL:" ' ' --code="$option_url" >/dev/stderr || return
		return "$status"
	}

	# -I, --head                        Show document info only
	# -m, --max-time <seconds>          Maximum time allowed for the transfer
	# -o, --output <file>               Write to file instead of stdout
	# -s, --silent                      No curl output, only content output.
	# -w, --write-out <format>          Use output FORMAT after completion
	# -L, --location                    Follow redirects
	# -f, --fail                        Fail on server errors.
	# -A, --user-agent <name>           Send User-Agent <name> to server
	# -S, --show-error                  When used with -s, --silent, it makes curl show an error message if it fails.
	function do_curl {
		local options=("$@")
		if test "$option_bearer_token"; then
			options+=(
				'--header'
				"Authorization: Bearer $option_bearer_token"
			)
		fi
		# use echo-wait to fix [curl: (23) Failure writing output to destination] when piping to ripgrep
		curl "${options[@]}" "$option_url" | echo-wait || __log_failure
	}
	function do_wget {
		local options=("$@")
		if test "$option_bearer_token"; then
			options+=(
				"--header=Authorization: Bearer $option_bearer_token"
			)
		fi
		wget "${options[@]}" "$option_url" || __log_failure
	}

	function fetch_status {
		local options=(
			--head                     # only fetch head
			--max-time 3               # wait three seconds
			--output /dev/null         # no content output
			--silent                   # no curl output
			--write-out '%{http_code}' # output the http code
			--location                 # follow redirects
		)
		setup-util-curl --quiet
		do_curl "${options[@]}"
	}

	function fetch_ok {
		# no wget equivalent
		local status
		status="$(fetch_status "$option_url")"
		test "$status" -ge 200 -a "$status" -le 300
	}

	function fetch_contents {
		local options
		if command-exists curl; then
			options=(
				--fail       # -f, --fail        fail fast with no output on HTTP errors
				--silent     # -s, --silent:     only output content
				--show-error # -S, --show-error: show error even when -s is used
				--location   # -L, --location:   follow redirects
			)
			do_curl "${options[@]}"
		elif command-exists wget; then
			options=(
				-quiet # only output content
				-O-    # output to stdout
			)
			do_wget "${options[@]}"
		else
			get-installer --first-success --invoke --quiet -- curl wget
			fetch_contents
		fi
	}

	# =====================================
	# Action

	# perform appropriate action
	if test "$option_status" = 'yes'; then
		fetch_status
	elif test "$option_ok" = 'yes'; then
		fetch_ok
	elif test "$option_ok" = 'no'; then
		local ok_status
		eval_capture --statusvar=ok_status -- fetch_ok
		test "$ok_status" -ne 0
	else
		fetch_contents
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	fetch_ "$@"
fi
