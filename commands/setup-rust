#!/usr/bin/env bash

function setup_rust() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# setup.bash provides:
	local CARGO_INSTALL=()
	local RUST_INSTALL=() # deprecated, use CARGO_INSTALL
	load_dorothy_config 'setup.bash'

	# deprecations
	if test "${#RUST_INSTALL[@]}" -ne 0; then
		CARGO_INSTALL+=("${RUST_INSTALL[@]}")
		dorothy-config 'setup.bash' -- \
			--field='RUST_INSTALL' --replace= \
			--field='CARGO_INSTALL' --array="$(print_lines "${CARGO_INSTALL[@]}" | sort --ignore-case | uniq)"
	fi

	# adjustments
	mapfile -t CARGO_INSTALL < <(dorothy-config --packages-var='CARGO_INSTALL' -- "${CARGO_INSTALL[@]}")

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			setup-rust [--flags]

			FLAGS:
			--optional
			    Only setup if it is needed by packages.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_optional=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-optional'* | '--optional'*)
			option_optional="$(get-flag-value --affirmative --fallback="$option_optional" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# check
	if test "$option_optional" = 'yes' -a "${#CARGO_INSTALL[@]}" -eq 0 && ! confirm --negative --ppid=$$ -- 'Setup Rust?'; then
		return 0
	fi

	# =====================================
	# Start

	echo-segment --h1='Setup Rust'

	# =====================================
	# Install

	setup-util-rust --upgrade --no-quiet

	# =====================================
	# Packages

	setup-util --installer=CARGO -- "${CARGO_INSTALL[@]}"

	# =====================================
	# Finish

	echo-segment --g1='Setup Rust'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_rust "$@"
fi
