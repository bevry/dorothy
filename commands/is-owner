#!/usr/bin/env bash

function is_owner_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	local temp
	temp="$(fs-temp --directory='is-owner' --file='test-file' --touch)"

	eval-tester --name='no args' --status=22 --ignore-stderr \
		-- is-owner --

	eval-tester --name='empty args' --status=22 \
		-- is-owner -- '' ''

	eval-tester --name='missing' --status=2 \
		-- is-owner -- "$DOROTHY/this-does-not-exist"

	eval-tester --name='is owner of its created file' \
		-- is-owner -- "$temp"

	eval-tester --name='invalid uid is not owner' --status=93 \
		-- is-owner --uid=0123456789 -- "$temp"

	eval-tester --name='invalid gid is not owner' --status=93 \
		-- is-owner --gid=0123456789 -- "$temp"

	eval-tester --name='invalid uname is not owner' --status=93 \
		-- is-owner --uname=invalid -- "$temp"

	eval-tester --name='invalid gname is not owner' --status=93 \
		-- is-owner --gname=invalid -- "$temp"

	echo-style --g1="TEST: $0"
	return 0
)
function is_owner() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P sudo-helper)"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Check if all <path>s are present (including that of symlinks, broken or otherwise) and are owned by one of the provided <user-id>s, <user-name>s, <group-id>s, <group-name>s.
			If no <user-id>s, <user-name>s, <group-id>s, <group-name>s are provided, those of the current user will be used.

			USAGE:
			is-owner [...options] [--] ...<path>

			OPTIONS:
			--sudo=<sudo>
			    Defaults to [13], escalating to root if permission would otherwise be denied.
			--user=<user>
			--group=<group>
			    Forwarded to [sudo-helper].

			--uid=<user-id> | --user-id=<user-id>
			--gid=<group-id> | --group-id=<group-id>
			--u=<user-name> | --uname=<user-name> | --user-name=<user-name>
			--g=<group-name> | --gname=<group-name> | --group-name=<group-name>
			    Specific <user-id>s, <user-name>s, <group-id>s, <group-name>s to check against.

			RETURNS:
			[0] if all <path>s were present (file, directory, symlink, broken symlink) and owned by any of the provided <user-id>s, <user-name>s, <group-id>s, <group-name>s.
			[2] if a <path> was not present
			[13] if a <path> was not accessible: unless [--no-sudo] was provided a sudo request will be made to prevent this failure.
			[22] if empty arguments are provided
			[93] if the owner of a <path> does not match any of the provided <user-id>s, <user-name>s, <group-id>s, <group-name>s.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inputs=() option_sudo='13' option_user='' option_group='' option_user_ids=() option_user_names=() option_group_ids=() option_group_names=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback-on-empty --fallback="$option_sudo" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--uid='* | '--user-id='*) option_user_ids+=("${item#*=}") ;;
		'--gid='* | '--group-id='*) option_group_ids+=("${item#*=}") ;;
		'--u='* | '--uname='* | '--user-name='*) option_user_names+=("${item#*=}") ;;
		'--g='* | '--gname='* | '--group-name='*) option_group_names+=("${item#*=}") ;;
		'--')
			option_inputs+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_inputs+=("$item") ;;
		esac
	done

	# verify
	if [[ ${#option_inputs[@]} -eq 0 ]]; then
		help 'No <input>s provided.'
	fi
	if [[ ${#option_user_ids[@]} -eq 0 && ${#option_user_names[@]} -eq 0 && ${#option_group_ids[@]} -eq 0 && ${#option_group_names[@]} -eq 0 ]]; then
		option_user_ids+=("$(id -u)")
		IFS=' ' read -ra option_group_ids < <(id -G)
	fi

	# =====================================
	# Action

	local uid uname gid gname
	if is-mac; then
		function __get_owner {
			IFS=' ' read -r uid uname gid gname < <(stat -Lf '%u %Su %g %Sg' -- "$1")
		}
	else
		function __get_owner {
			IFS=' ' read -r uid uname gid gname < <(stat -Lc '%u %U %g %G' -- "$1")
		}
	fi
	function __is_owner {
		local input item
		if [[ ${1-} == '--' ]]; then
			shift
		fi
		for input in "$@"; do
			is-present.bash -- "$input" || return
			__get_owner "$input"
			if [[ ${#option_user_ids[@]} -ne 0 ]]; then
				for item in "${option_user_ids[@]}"; do
					if [[ $uid == "$item" ]]; then
						return 0
					fi
				done
			fi
			if [[ ${#option_user_names[@]} -ne 0 ]]; then
				for item in "${option_user_names[@]}"; do
					if [[ $uname == "$item" ]]; then
						return 0
					fi
				done
			fi
			if [[ ${#option_group_ids[@]} -ne 0 ]]; then
				for item in "${option_group_ids[@]}"; do
					if [[ $gid == "$item" ]]; then
						return 0
					fi
				done
			fi
			if [[ ${#option_group_names[@]} -ne 0 ]]; then
				for item in "${option_group_names[@]}"; do
					if [[ $gname == "$item" ]]; then
						return 0
					fi
				done
			fi
		done
		return 93 # ENOATTR 93 Attribute not found
	}
	sudo_helper --inherit --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- __is_owner -- "${option_inputs[@]}"
	return
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		is_owner_test
	else
		is_owner "$@"
	fi
fi
