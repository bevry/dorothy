#!/usr/bin/env bash

# @todo
# redo this command to only reset what was necessary, so that this works:
# echo-style --blink '(' --green+bold='Y' '/n)')

function echo_style() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:

			echo-style [...options] [--!style] [--!style+!style] value [--!style=value] [--!style+!style=value]

			OPTIONS:
			--no-trail
			    Disables outputting a trailing newline.

			--color | --colors | --colors=yes
			    Enables styles.

			--no-color | --no-colors | --colors=no
			    Disables styles.

			EXAMPLES:

			echo-style --bold --blue 'this is bold and blue' 'so is this' --yellow ' but this is bold and yellow'
			echo-style --bg-red+hi-white='this is very bad' --green+bold=' while this is good'

			STYLES:

			Colors: black, red, green, yellow, blue, magenta, cyan, white
			Modifiers: background_*, intense_*, background_intense_*
			Modifier aliases: bg-*, hi-*, bg-hi-*
			Modes: reset, bold, dim, underline, blink, invert
			Targets: nocolor, color, stdout, stderr, tty: these must have <value>
			Special: h1, e1, g1, header, error

			QUIRKS:

			Hyphens (-) in style names are converted to underscores (_).

			If [env NO_COLOR=yes] or [env COLOR=no], [--no-color], [--no-colors], [--colors=no] then styles will be omitted.

			Use [--color=<value>] to indicate the value should only be outputted if colors are.

			Use [--nocolor=<value>] to indicate the value should only be outputted if colors are not.

			value="\$(echo-style --bold='first' --nocolor=' ' --color+dim=' → ' --bold='second')"; echo "\$value"
			# outputs with colors: first → second

			value="\$(env NO_COLOR=yes echo-style --bold='first' --nocolor=' ' --color+dim=' → ' --bold='second')"; echo "\$value"
			# outputs without colors: first second

			EXPLANATION:

			[--style=value] will apply the style only to that value.
			[--style value value] will apply the style to all subsequent values, until [--reset] is provided.
			[--blue --bold value] will make value be blue and bold.

			TIPS:

			[-n] at the start to avoid printing the trailing newline
			[--h1=value] for segment headers
			[--e1=value] for segment failure footers
			[--g1=value] for segment success footers
			[--error=value] for unexpected errors
			[--header] for general headers
			[--dim] for quoting

			Remember [\$'\n'] is available to you to place newlines between arguments, e.g.
			echo-style value \$'\n' value
		EOF
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item items=() option_trail='yes' option_debug='no' option_color
	option_color="$(get-terminal-color-support --fallback=yes)" # parse env only, as flags are handled by us to support color and nocolor modifiers
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-debug'* | '--debug'*)
			option_debug="$(get-flag-value --affirmative --fallback="$option_debug" -- "$item")"
			;;
		'--no-trail'* | '--trail'*)
			option_trail="$(get-flag-value --affirmative --fallback="$option_trail" -- "$item")"
			;;
		'--color' | '--colors' | '--colors=yes')
			# ^ don't do wildcard checks, as that messes with --nocolor+... and --color+modifiers
			option_color='yes'
			;;
		'--no-color' | '--no-colors' | '--colors=no')
			# ^ don't do wildcard checks, as that messes with --nocolor+... and --color+modifiers
			option_color='no'
			;;
		--)
			items+=("$@")
			shift $#
			;;
		*)
			items+=("$item" "$@")
			shift $#
			;;
		esac
	done

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# styles.bash provides:
	# all style variables
	load_dorothy_config 'styles.bash'

	# =====================================
	# Action

	# act
	local item flag style generic \
		i current_char_index last_char_index \
		item_target buffer_target='/dev/stdout' terminal_device_file \
		MISSING_STYLES=() \
		ITEM_COLOR buffer_color="$option_color" \
		ITEM_BEGIN \
		item_content \
		ITEM_END \
		buffer_left='' buffer_disable='' buffer_right=''
	function append_style {
		# this should be similar to refresh_style_cache in styles.bash
		local style="$1" var='' found='no'
		if test "$ITEM_COLOR" = 'yes'; then
			# begin
			var="style__color__${style}"
			if __is_var_set "$var"; then
				ITEM_BEGIN+="${!var}"
				found='yes'
			else
				# cache
				var="style__${style}"
				if __is_var_set "$var"; then
					ITEM_BEGIN+="${!var}"
					found='yes'
				else
					var="style__nocolor__${style}"
					if __is_var_set "$var"; then
						found='yes'
					fi
				fi
			fi

			# end
			var="style__color_end__${style}"
			if __is_var_set "$var"; then
				ITEM_END="${!var}${ITEM_END}"
				found='yes'
			else
				# cache
				var="style__end__${style}"
				if __is_var_set "$var"; then
					ITEM_END="${!var}${ITEM_END}"
					found='yes'
				else
					var="style__nocolor_end__${style}"
					if __is_var_set "$var"; then
						found='yes'
					fi
				fi
			fi
		else
			# begin
			var="style__nocolor__${style}"
			if __is_var_set "$var"; then
				ITEM_BEGIN+="${!var}"
				found='yes'
			else
				# cache
				var="style__${style}"
				if __is_var_set "$var"; then
					ITEM_BEGIN+="${!var}"
					found='yes'
				else
					var="style__color__${style}"
					if __is_var_set "$var"; then
						found='yes'
					fi
				fi
			fi

			# end
			var="style__nocolor_end__${style}"
			if __is_var_set "$var"; then
				ITEM_END="${!var}${ITEM_END}"
				found='yes'
			else
				# cache
				var="style__end__${style}"
				if __is_var_set "$var"; then
					ITEM_END="${!var}${ITEM_END}"
					found='yes'
				else
					var="style__color_end__${style}"
					if __is_var_set "$var"; then
						found='yes'
					fi
				fi
			fi
		fi
		# only respect found on versions of bash that can detect accurately detect it, as otherwise empty values will be confused as not found
		if test "$found" = 'no' -a "$IS_BASH_VERSION_OUTDATED" = 'no'; then
			MISSING_STYLES+=("${style}")
		fi
	}
	for item in "${items[@]}"; do
		# check flag status
		if test "${item:0:2}" != '--'; then
			# not a flag, just item content
			buffer_left+="$item"
			continue
		fi
		flag="${item:2}"
		item_content=''
		generic='yes'

		# get the flag and value combo
		for ((i = 0; i < ${#flag}; i++)); do
			if test "${flag:i:1}" = '='; then
				generic='no'
				item_content="${flag:i+1}"
				flag="${flag:0:i}"
				break
			fi
		done

		# handle style+style combinations
		last_char_index=0
		item_target="$buffer_target"
		ITEM_COLOR="$buffer_color"
		ITEM_STYLE=''
		ITEM_BEGIN=''
		ITEM_END=''
		for ((current_char_index = 0; current_char_index <= ${#flag}; current_char_index++)); do
			if test "${flag:current_char_index:1}" = '+' -o "$current_char_index" -eq "${#flag}"; then
				style="${flag:last_char_index:current_char_index-last_char_index}"
				last_char_index="$((current_char_index + 1))"
				style="${style//-/_}" # convert hyphens to underscores

				# handle special cases
				case "$style" in
				black | red | green | yellow | blue | magenta | cyan | white | purple | gray | grey) style="foreground_$style" ;;
				'intense_'*) style="foreground_intense_${style:8}" ;;
				/*) style="slash_${style:1}" ;;
				*/) style="${style:0:-1}_slash" ;;
				status)
					if test "$item_content" -eq 0; then
						style='good3'
					else
						style='error3'
					fi
					item_content="[${item_content}]"
					;;
				color)
					ITEM_COLOR='yes'
					continue
					;;
				nocolor)
					ITEM_COLOR='no'
					continue
					;;
				stdout)
					item_target='/dev/stdout'
					continue
					;;
				stderr)
					item_target='/dev/stderr'
					continue
					;;
				tty)
					if test -z "${terminal_device_file-}"; then
						terminal_device_file="$(get-terminal-device-file)"
					fi
					item_target="$terminal_device_file"
					continue
					;;
				null)
					item_target='/dev/null'
					continue
					;;
				esac

				# get the style
				append_style "$style"
			fi
		done

		#  handle nocolor and color correctly, as in conditional output based on NO_COLOR=true
		# e.g. env COLOR=false echo-style --color=yes --nocolor=no # outputs no
		# e.g. env COLOR=true echo-style --color=yes --nocolor=no # outputs yes
		if test "$option_color" != "$ITEM_COLOR"; then
			continue
		fi

		# if it is generic, add the styles (except disable) to the buffer instead
		if test "$generic" = 'yes'; then
			# flush buffer if necessary
			if test "$item_target" != "$buffer_target"; then
				__print_string "${buffer_left}" >"$buffer_target"
				buffer_left=''
				buffer_target="$item_target"
			fi
			# update buffer
			buffer_left+="${ITEM_BEGIN}${ITEM_STYLE}"
			# if [[ $buffer_disable != *"$ITEM_DISABLE"* ]]; then
			# 	buffer_disable="${ITEM_DISABLE}${buffer_disable}"
			# fi
			buffer_right="${ITEM_END}${buffer_right}"
		else
			# flush buffer if necessary
			if test "$item_target" != "$buffer_target"; then
				__print_string "${buffer_left}" >"$buffer_target"
				buffer_left=''
				__print_string "${ITEM_BEGIN}${item_content}${ITEM_END}" >"$item_target"
			else
				buffer_left+="${ITEM_BEGIN}${item_content}${ITEM_END}"
			fi
		fi
	done

	# close the buffer
	if test "$option_trail" = 'yes'; then
		buffer_right+=$'\n'
	fi
	__print_string "${buffer_left}${buffer_disable}${buffer_right}" >"$buffer_target"
	if test "$option_debug" = 'yes' -a "${#MISSING_STYLES[@]}" -ne 0; then
		__print_lines 'ERROR: MISSING STYLES:' "${MISSING_STYLES[@]}" >/dev/stderr
		return 22 # EINVAL 22 Invalid argument
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_style "$@"
fi
