#!/usr/bin/env bash

function what_is_my_dns() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Outputs your DNS resolver.

			USAGE:
			what-is-my-dns [--] ...<type>

			TYPES:
			system
			    Returns the resolver of your system configuration, be it a local DNS service or an external DNS service.

			exposed
			    Returns the exposed resolver of your system configuration, which if using a local DNS service, will convert internal IP ranges (127...) into protected/public IP ranges (192...).
			    You should use this value for ensuring the DNS service you expose to containers and virtual machines is accessible by them, as local internal ranges of the host will not be.

			authority
			    Returns the remote resolver that intermediate resolvers may have delegated to.
			    You should use this to manually identify if your DNS resolutions are being intercepted, which will be if the value of this differs from your intended DNS provider.
			    If your DNS is being intercepted, you can use [setup-dns] to elect an encrypted DNS service and provider.

			QUIRKS:
			If no <type> is specified, all types will be returned.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_types=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'local') option_types+=('system') ;;
		'remote' | 'network') option_types+=('exposed') ;;
		'ultimate' | 'external' | 'resolver' | 'resolved') option_types+=('authority') ;;
		'--')
			option_types+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_types+=("$item") ;;
		esac
	done

	# ensure types
	if [[ ${#option_types[@]} -eq 0 ]]; then
		option_types=(
			'system'
			'exposed'
			'authority'
		)
	fi

	# =====================================
	# Dependencies

	setup-util-dig --quiet

	# =====================================
	# Helpers

	function get_dns_system {
		if [[ ${1-} == 'yes' ]]; then
			echo-style --no-trail --bold='System: '
		fi
		dig cloudflare.com | echo-regexp -fon --regexp='SERVER: .+?[(]([^)]+)' --replace='$1'
	}

	function get_dns_exposed {
		if [[ ${1-} == 'yes' ]]; then
			echo-style --no-trail --bold='Exposed: '
		fi
		local dnsip links
		dnsip="$(get_dns_system 'no')"
		if [[ $dnsip == '127.0.0.53' ]]; then
			if __command_exists -- resolvectl; then
				# resolvctl local dns server
				links="$(sudo-helper -- resolvectl dns --no-pager)"
				echo-regexp -fon --regexp='Global: (.+)' --replace='$1' -- "$links" || {
					echo-regexp -fon --regexp=': (.+?)( |$)' --replace='$1' -- "$links" || {
						__print_lines '127.0.0.53'
					}
				}
			else
				__print_lines '127.0.0.53'
			fi
		elif [[ $dnsip == '0.0.0.0' || $dnsip == '127.0.0.1' ]]; then
			# local dns server
			what-is-my-ip 'local'
		else
			# remote dns server
			__print_lines "$dnsip"
		fi
	}

	function get_dns_authority {
		# whatismydnsresolver.com is now defunct
		if is-headful; then
			open 'https://dnscheck.tools'
		else
			echo-style 'Open ' --code='dnscheck.tools' ' in your browser to check your DNS authorities/resolvers.' >/dev/stderr
		fi
	}

	# =====================================
	# Act

	local headers='no' type
	if [[ ${#option_types[@]} -ne 1 ]]; then
		headers='yes'
	fi
	for type in "${option_types[@]}"; do
		"get_dns_$type" "$headers"
	done

)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	what_is_my_dns "$@"
fi
