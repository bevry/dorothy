#!/usr/bin/env bash

# NOTES:
# [echo -en] doesn't work with escape codes on bash v3, [printf ...] does
# ["$tty_target"] is used as otherwise "$(confirm ...)" will not output anything to the user, as stdout gets captured in those situations
#    why would anyone use confirm in that way? they don't but confirm within a getter does, such as [select_installer] within [macos-drive]

function confirm_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	# --ignore-stderr otherwise ^[[58;1R is output

	eval-tester --name='positive response was timed out' --ignore-stderr \
		-- confirm --ppid=$$ --positive --timeout=10 -- 'What is your response?'

	eval-tester --name='negative response was timed out' --status=1 --ignore-stderr \
		-- confirm --ppid=$$ --negative --timeout=10 -- 'What is your response?'

	eval-tester --name='neither response was timed out' --status=60 --ignore-stderr \
		-- confirm --ppid=-1 --bool --timeout=10 -- 'What is your response?'

	{
		# press escape key
		sleep 3
		printf $'\x1b'
	} | eval-tester --name='cancel response was entered' --status=125 --ignore-stderr \
		-- confirm --ppid=-1 --bool --timeout=10 -- 'What is your response?'

	echo-segment --g1="TEST: $0"
	return 0
)
function confirm_() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			confirm --ppid=\$\$ [...options] -- <question> ...[detail]

			OPTIONS:
			--bool | --positive | --negative | --confirm || --mode=<bool|positive|negative|confirm>
			    [bool] mode forces a positive or negative confirmation, with no default.
			    [positive] mode defaults to a positive confirmation.
			    [negative] mode defaults to a negative confirmation.
			    [confirm] mode forces a confirmation, with no default; it is the default mode.

			--timeout=<timeout>
			    Specify the timeout in seconds.
			    Under <negative> mode, defaults to 60 seconds (one minute) before defaulting to a negative confirmation.
			    Under <positive> mode, defaults to 60 seconds (one minute) before defaulting to a positive confirmation.
			    Under other modes, defaults to 3600 seconds (one hour) before abortion occurs.

			--yes=<OK>
			    What to display to the user for positive confirmations, defaults to "OK".

			--no=<CANCEL>
			    What to display to the user for negative confirmations, defaults to "CANCEL".

			--abort=<ABORT>
			    What to display to the user for aborted confirmations, defaults to "ABORT".

			--ppid=<ppid>
			    Specifies the parent process ID to also terminate upon abortion.
			    In bourne shells this is specified like so [--ppid=\$\$]
			    This is necessary because the typical usage of [if confirm ...; then ...; else ...; fi]
			    will only catch positive and negative confirmations, but not abortion cases,
			    as such abortions would otherwise be registered as negative cases.
			    Providing the parent process ID allows the abortion to propagate to the parent,
			    allowing the intended abortion behaviour to propagate.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# prepare
	local item option_question=() option_mode='confirm' option_timeout='3600' option_yes='OK' option_no='CANCEL' option_abort='ABORT' option_ppid=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--bool') option_mode='bool' ;;
		'--positive' | '--positive=yes' | '--negative=no' | '--no-negative') option_mode='positive' ;;
		'--negative' | '--negative=yes' | '--positive=no' | '--no-positive') option_mode='negative' ;;
		'--confirm') option_mode='confirm' ;;
		'--mode='*) option_mode="${item#*=}" ;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--yes='*) option_yes="${item#*=}" ;;
		'--no='*) option_no="${item#*=}" ;;
		'--abort='*) option_abort="${item#*=}" ;;
		'--ppid='*) option_ppid="${item#*=}" ;;
		'--')
			option_question+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# mode
	if test "$option_mode" = 'positive' -o "$option_mode" = 'negative'; then
		if test -z "$option_timeout"; then
			option_timeout='60' # one minute
		fi
		if test -z "$option_yes"; then
			option_yes='YES'
		fi
		if test -z "$option_no"; then
			option_no='NO'
		fi
	elif test "$option_mode" = 'bool'; then
		if test -z "$option_yes"; then
			option_yes='YES'
		fi
		if test -z "$option_no"; then
			option_no='NO'
		fi
	fi

	# checks
	if test -z "$option_ppid"; then
		help '<ppid> is necessary'
	fi
	if test -z "${option_question[*]}"; then
		help '<question> is necessary'
	fi

	# =====================================
	# Helpers

	# cache the first part for the finale
	local question="${option_question[0]}"

	# generate the prompt, the body, and body line count
	local prompt body body_lines
	prompt="$question"
	body="$(print_lines "${option_question[@]:1}")"
	body_lines="$(echo-count-lines -- "$body")"
	if test "$option_mode" = 'positive'; then
		prompt+=" $(echo-style --blink='(' --blink+green+bold='Y' --blink='/n)')"
	elif test "$option_mode" = 'negative'; then
		prompt+=" $(echo-style --blink='(y/' --blink+red+bold='N' --blink=')')"
	elif test "$option_mode" = 'bool'; then
		prompt+=" $(echo-style --blink='(y/n)')"
	elif test "$option_mode" = 'confirm'; then
		prompt+=" $(echo-style --blink='(CONFIRM)')"
	else
		help "An invalid <mode> was provided: $option_mode"
	fi

	# fetch the targets
	local tty_target using_tty_stderr_fallback='no'
	tty_target="$(is-tty --fallback)"
	if test "$tty_target" = '/dev/stderr'; then
		# fix [/dev/stderr: Permission denied] errors when reading cursor position on CI
		using_tty_stderr_fallback=yes
	fi

	# used to process the input
	local CURSOR_COLUMN='' # used by do_read and do_question
	function do_read {
		local answer read_status

		# ask and timeout
		eval_capture --statusvar=read_status --stdoutvar=answer -- \
			read-key --timeout="$option_timeout"

		# process
		if test "$option_mode" = 'positive'; then
			# positive
			if test "$read_status" -eq 60; then
				return 0 # timeout
			elif test "$read_status" -ne 0; then
				return "$read_status" # failure
			fi
			eval_capture --statusvar=read_status -- is-affirmative -- "$answer"
			if test "$read_status" -lt 2; then
				return "$read_status"
			elif test "$answer" = 'enter' -o "$answer" = 'space'; then
				return 0
			elif test "$answer" = 'escape' -o "$answer" = 'q'; then
				return 125 # ECANCELED 125 Operation cancelled
			fi

		elif test "$option_mode" = 'negative'; then
			# negative
			if test "$read_status" -eq 60; then
				return 1 # timeout
			elif test "$read_status" -ne 0; then
				return "$read_status" # failure
			fi
			eval_capture --statusvar=read_status -- \
				is-affirmative -- "$answer"
			if test "$read_status" -lt 2; then
				return "$read_status"
			elif test "$answer" = 'enter' -o "$answer" = 'space'; then
				return 1
			elif test "$answer" = 'escape' -o "$answer" = 'q'; then
				return 125 # ECANCELED 125 Operation cancelled
			fi

		elif test "$option_mode" = 'bool'; then
			# bool
			if test "$read_status" -ne 0; then
				return "$read_status" # timeout and failure
			fi
			eval_capture --statusvar=read_status -- \
				is-affirmative -- "$answer"
			if test "$read_status" -lt 2; then
				return "$read_status"
			elif test "$answer" = 'escape' -o "$answer" = 'q'; then
				return 125 # ECANCELED 125 Operation cancelled
			fi

		elif test "$option_mode" = 'confirm'; then
			# confirm
			if test "$read_status" -ne 0; then
				return "$read_status" # timeout and failure
			fi
			eval_capture --statusvar=read_status -- \
				is-affirmative -- "$answer"
			if test "$read_status" -lt 2; then
				return "$read_status"
			elif test "$answer" = 'enter' -o "$answer" = 'space'; then
				return 0
			elif test "$answer" = 'escape' -o "$answer" = 'q'; then
				return 125 # ECANCELED 125 Operation cancelled
			fi

		else
			# unknown
			help "An invalid <mode> was provided: $option_mode"
		fi

		# try reading again, and erase any leaked characters
		if test "$using_tty_stderr_fallback" = 'no'; then
			# set the cursor back to CURSOR_COLUMN and erase everything after it
			if test -n "$CURSOR_COLUMN"; then
				printf '\e[%sG\e[K' "$CURSOR_COLUMN" >"$tty_target"
			fi
		fi
		do_read
	}
	function do_question {
		# if not a tty, just output the question
		if test "$using_tty_stderr_fallback" = 'yes'; then
			print_lines "${option_question[@]}" >"$tty_target"
		else
			# output the prompt, saving the cursor position
			CURSOR_COLUMN=''
			print_string "$prompt " >"$tty_target"
			# send an ansi query to fetch the cursor row and column, returns [^[[24;80R] where 24 is row, 80 is column
			# use _ to discard, the first read var is garbage, the second read var is the row, the final read var is the column
			# use a 2 second timeout, as otherwise [confirm --test] on macos sonoma will wait forever
			# shorter timeouts aren't suitable as slower machines take a while for the response
			# we are already in a TTY, so can usually guarantee an answer, and the read will complete immediately upon a response thanks to [-d R] which completes reading when the R is read, which is the final character of the response query
			local _
			IFS='[;' read -t 2 -srd R -p $'\e[6n' _ _ CURSOR_COLUMN <"$tty_target" || :

			# output the body on a newline if it exists
			if test -n "$body"; then
				print_string $'\n'"$body" >"$tty_target"

				# move these lines up
				if test "$body_lines" -ne 0; then
					printf '\e[%sF' "$body_lines" >"$tty_target"
				fi
			fi

			# move to the CURSOR_COLUMN column
			if test -n "$CURSOR_COLUMN"; then
				printf '\e[%sG' "$CURSOR_COLUMN" >"$tty_target"
			fi
		fi

		# read
		do_read
	}

	# =====================================
	# Action

	# handle termination
	local RESULT=0 finished=no

	function on_confirm_terminate {
		RESULT=$?
		if test -z "$RESULT" -o "$RESULT" -eq 0; then
			RESULT=100 # EPROTO 100 Protocol error
		fi
		on_finish
	}
	function on_finish {
		trap - SIGINT SIGTERM

		# this can run twice if ctrl+c
		if test "$finished" = 'yes'; then
			return "$RESULT"
		fi
		finished=yes

		# erase from start of current row to end of screen, as ctrl+c buggers everything
		printf '\e[G\e[J' >"$tty_target"

		# output the finale
		if test "$RESULT" -eq 0; then
			# positive response
			echo-style "$question " --green+bold="$option_yes" >"$tty_target"
		elif test "$RESULT" -eq 1; then
			# negative response
			echo-style "$question " --red+bold="$option_no" >"$tty_target"
		else
			# crash response
			echo-style "$question " --red+bold="$option_abort" >"$tty_target"
			# kill caller's parent
			if test "$option_ppid" -ge 0; then
				if test "$option_ppid" -ge 1; then
					# kill "-$option_ppid" ...
					# ^ fails because 130 isn't supported
					# kill -n ... ...
					# kill "-$(kill -l "$option_ppid")" ...
					# ^ works but isn't serious enough to cause the termination
					# "$(ps -p $$ -o ppid=)"
					# ^ doesn't work, as is different pid than manual
					kill "$option_ppid"
				fi
				# kill our parent
				kill "$$"
				# kill our subshell
				kill 0
				# kill our shell
				exit "$RESULT"
			fi
		fi
		# kill this
		return "$RESULT"
	}
	trap on_confirm_terminate SIGINT SIGTERM # this is necessary to always show ABORT message

	# read and handle answer
	local result_status
	eval_capture --statusvar=result_status -- do_question
	if test "$result_status" -ne 0; then
		RESULT="$result_status"
	fi
	on_finish
	return "$RESULT"

	# @todo
	# if the above read cursor position issue is a problem (e.g. press a keypress before the cursor position answer is fetched, so keypress goes into the cursor position read), then one could use `print_line question | echo-trim-special --stdin | wc -c` however that is unreliable as doesn't take into account terminal size and wrapping, etc.
	# the better solution would be to just append a newline like this below, with ENTER and ESCAPE and SPACE as the correct outputs:
	# echo-style --blink='Press: ' --blink+green+bold='y ' --blink='for ' --blink+green='YES' --blink=', ' --blink+red+bold='n ' --blink='for ' --blink+red='NO' --blink=', ' --blink+bold='ENTER '  --blink='for ' --blink+red='NO'

	# using \e[s (save) and \e[u (restore) for ctrl+c handling did not work
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		confirm_test
	else
		confirm_ "$@"
	fi
fi
