#!/usr/bin/env bash

# NOTES:
# [echo -en] doesn't work with escape codes on bash v3, [printf ...] does
# ["$tty_target"] is used as otherwise "$(confirm ...)" will not output anything to the user, as stdout gets captured in those situations
#    why would anyone use confirm in that way? they don't but confirm within a getter does, such as [select_installer] within [macos-drive]

function confirm_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	# --ignore-stderr otherwise only \n^[[68;1R is output

	{
		sleep 3
		__print_line
	} | eval-tester --name='receive positive response by enter key' --ignore-stderr \
		-- confirm --ppid=$$ --positive --timeout=5 -- 'What is your response?'

	{
		sleep 3
		__print_line
	} | eval-tester --name='receive negative response by enter key' --status=1 --ignore-stderr \
		-- confirm --ppid=$$ --negative --timeout=5 -- 'What is your response?'

	{
		sleep 3
		__print_lines 'y'
	} | eval-tester --name='receive positive response by y key' --ignore-stderr \
		-- confirm --ppid=-1 --bool --timeout=5 -- 'What is your response?'

	{
		sleep 3
		__print_lines 'n'
	} | eval-tester --name='receive negative response by n key' --status=1 --ignore-stderr \
		-- confirm --ppid=-1 --bool --timeout=5 -- 'What is your response?'

	{
		sleep 3
		__print_line
	} | eval-tester --name='receive timeout response by timeout and enter key rejected by require' --status=60 --ignore-stderr \
		-- confirm --ppid=-1 --bool --timeout=5 -- 'What is your response?'

	eval-tester --name='receive positive response by timeout and no input' --ignore-stderr \
		-- confirm --ppid=$$ --positive --timeout=5 -- 'What is your response?'

	eval-tester --name='receive negative response by timeout and no input' --status=1 --ignore-stderr \
		-- confirm --ppid=$$ --negative --timeout=5 -- 'What is your response?'

	eval-tester --name='receive timeout response by timeout and no input' --status=60 --ignore-stderr \
		-- confirm --ppid=-1 --bool --timeout=5 -- 'What is your response?'

	{
		# press escape key
		sleep 3
		printf $'\x1b'
	} | eval-tester --name='receive abort response by escape key' --status=125 --ignore-stderr \
		-- confirm --ppid=-1 --bool --timeout=5 -- 'What is your response?'

	echo-style --g1="TEST: $0"
	return 0
)
function confirm_() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			confirm --ppid=\$\$ [...options]

			OPTIONS:
			<question> | --question=<question>
			    Display this question in the prompt. If specified multiple times, they will be joined by newline, and only the first will be lingered.

			--bool | --positive | --negative | --confirm
			--mode=<bool|positive|negative|confirm>
			    [bool] mode forces a positive or negative confirmation, with no default.
			    [positive] mode defaults to a positive confirmation.
			    [negative] mode defaults to a negative confirmation.
			    [confirm] mode forces a confirmation, with no default; it is the default mode.

			--yes=<OK>
			    What to display to the user for positive confirmations, defaults to "OK".

			--no=<CANCEL>
			    What to display to the user for negative confirmations, defaults to "CANCEL".

			--abort=<ABORT>
			    What to display to the user for aborted confirmations, defaults to "ABORT".

			--ppid=<ppid>
			    The parent process ID to also terminate upon abortion.
			    In bourne shells this is specified like so [--ppid=\$\$]
			    This is necessary because the typical usage of [if confirm ...; then ...; else ...; fi]
			    will only catch positive and negative confirmations, but not abortion cases, as such abortions would otherwise be registered as negative cases.
			    Providing the parent process ID allows the abortion to propagate to the parent, allowing the intended abortion behaviour to propagate.

			--timeout=<timeout>
			    Timeout in seconds.
			    Under <negative> mode, defaults to 60 seconds (one minute) before defaulting to a negative confirmation.
			    Under <positive> mode, defaults to 60 seconds (one minute) before defaulting to a positive confirmation.
			    Under other modes, defaults to 3600 seconds (one hour) before abortion occurs.

			--[no-]linger=[yes|NO]
			    Whether the prompt should persist afterwards.

		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# prepare
	local item option_question=() option_mode='confirm' option_timeout='3600' option_yes='YES' option_no='NO' option_abort='ABORT' option_ppid='' option_linger='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--question='*) option_question+=("${item#*=}") ;;
		'--bool') option_mode='bool' ;;
		'--positive' | '--positive=yes' | '--negative=no' | '--no-negative') option_mode='positive' ;;
		'--negative' | '--negative=yes' | '--positive=no' | '--no-positive') option_mode='negative' ;;
		'--confirm') option_mode='confirm' ;;
		'--mode='*) option_mode="${item#*=}" ;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--yes='*) option_yes="${item#*=}" ;;
		'--no='*) option_no="${item#*=}" ;;
		'--abort='*) option_abort="${item#*=}" ;;
		'--ppid='*) option_ppid="${item#*=}" ;;
		'--no-linger'* | '--linger'*)
			option_linger="$(get-flag-value --affirmative --fallback="$option_linger" -- "$item")"
			;;
		'--')
			option_question+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_question+=("$item") ;;
		esac
	done

	# mode
	if test "$option_mode" = 'positive' -o "$option_mode" = 'negative'; then
		if test -z "$option_timeout"; then
			option_timeout='60' # one minute
		fi
		if test -z "$option_yes"; then
			option_yes='YES'
		fi
		if test -z "$option_no"; then
			option_no='NO'
		fi
	elif test "$option_mode" = 'bool'; then
		if test -z "$option_yes"; then
			option_yes='YES'
		fi
		if test -z "$option_no"; then
			option_no='NO'
		fi
	fi

	# checks
	if test -z "$option_ppid"; then
		help '<ppid> is necessary'
	fi

	# question
	local question_title question_body
	if test "${#option_question[@]}" -ne 0; then # bash v3 compat
		if test -n "${option_question[0]}"; then
			question_title="${option_question[0]}"
			question_body="$(__print_lines "${option_question[@]:1}")"
		else
			question_title="$(__print_lines "${option_question[@]:1}")"
			question_body=''
		fi
	else
		question_title=''
		question_body=''
	fi

	# ensure question
	if test -z "$question_title"; then
		help 'A <question> is required'
	fi

	# =====================================
	# Styles

	source "$DOROTHY/sources/config.sh"

	# styles.bash provides:
	# all style variables
	load_dorothy_config 'styles.bash'

	# refresh the styles
	refresh_style_cache -- 'question_title_prompt' 'question_title_result' 'question_body' 'input_warning' 'input_error' 'icon_question_positive' 'icon_question_negative' 'icon_question_bool' 'icon_question_confirm' 'result_positive' 'result_negative' 'result_abort'

	# style the question
	local question_title_prompt question_title_result question_body_prompt='' question_body_line_count=0
	question_title_prompt="${style__question_title_prompt}${question_title}${style__end__question_title_prompt}"
	question_title_result="${style__question_title_result}${question_title}${style__end__question_title_result}"
	if test "$option_mode" = 'positive'; then
		question_title_prompt+=" ${style__icon_question_positive}"
	elif test "$option_mode" = 'negative'; then
		question_title_prompt+=" ${style__icon_question_negative}"
	elif test "$option_mode" = 'bool'; then
		question_title_prompt+=" ${style__icon_question_bool}"
	elif test "$option_mode" = 'confirm'; then
		question_title_prompt+=" ${style__icon_question_confirm}"
	else
		help "An invalid <mode> was provided: $option_mode"
	fi
	if test -n "$question_body"; then
		question_body_prompt="${style__question_body}${question_body}${style__end__question_body}"
		question_body_line_count="$(echo-count-lines -- "$question_body")"
	fi

	# =====================================
	# Helpers

	# fetch the targets
	local tty_target using_tty_stderr_fallback='no'
	tty_target="$(is-tty --fallback)"
	if test "$tty_target" = '/dev/stderr'; then
		# fix [/dev/stderr: Permission denied] errors when reading cursor position on CI
		using_tty_stderr_fallback=yes
	fi

	# used to process the input
	local CURSOR_COLUMN='' commentary='' # used by do_read and do_question
	function do_read {
		local answer read_status

		# ask and timeout
		eval_capture --statusvar=read_status --stdoutvar=answer -- \
			read-key --timeout="$option_timeout"

		# process
		if test "$read_status" -eq 60; then
			# timeout
			commentary="${style__input_warning}[timed out: used default]${style__end__input_warning}"
			if test "$option_mode" = 'positive'; then
				return 0
			elif test "$option_mode" = 'negative'; then
				return 1
			else # bool, confirm
				commentary="${style__input_error}[input failure: timed out: required]${style__end__input_error}"
				return "$read_status" # timeout
			fi
		elif test "$read_status" -ne 0; then
			# failure
			commentary="${style__input_error}[input failure: $read_status]${style__end__input_error}"
			return "$read_status"
		elif test "$option_mode" = 'positive'; then
			# positive
			eval_capture --statusvar=read_status -- is-affirmative -- "$answer"
			if test "$read_status" -lt 2; then
				return "$read_status"
			elif test "$answer" = 'enter' -o "$answer" = 'space'; then
				return 0
			elif test "$answer" = 'escape' -o "$answer" = 'q'; then
				return 125 # ECANCELED 125 Operation cancelled
			fi

		elif test "$option_mode" = 'negative'; then
			# negative
			eval_capture --statusvar=read_status -- \
				is-affirmative -- "$answer"
			if test "$read_status" -lt 2; then
				return "$read_status"
			elif test "$answer" = 'enter' -o "$answer" = 'space'; then
				return 1
			elif test "$answer" = 'escape' -o "$answer" = 'q'; then
				return 125 # ECANCELED 125 Operation cancelled
			fi

		elif test "$option_mode" = 'bool'; then
			# bool
			eval_capture --statusvar=read_status -- \
				is-affirmative -- "$answer"
			if test "$read_status" -lt 2; then
				return "$read_status"
			elif test "$answer" = 'escape' -o "$answer" = 'q'; then
				return 125 # ECANCELED 125 Operation cancelled
			fi

		elif test "$option_mode" = 'confirm'; then
			# confirm
			eval_capture --statusvar=read_status -- \
				is-affirmative -- "$answer"
			if test "$read_status" -lt 2; then
				return "$read_status"
			elif test "$answer" = 'enter' -o "$answer" = 'space'; then
				return 0
			elif test "$answer" = 'escape' -o "$answer" = 'q'; then
				return 125 # ECANCELED 125 Operation cancelled
			fi

		else
			# unknown
			help "An invalid <mode> was provided: $option_mode"
		fi

		# try reading again, and erase any leaked characters
		if test "$using_tty_stderr_fallback" = 'no'; then
			# set the cursor back to CURSOR_COLUMN and erase everything after it
			if test -n "$CURSOR_COLUMN"; then
				printf '\e[%sG\e[K' "$CURSOR_COLUMN" >"$tty_target"
			fi
		fi
		do_read
	}
	function do_question {
		# if not a tty, just output the question
		if test "$using_tty_stderr_fallback" = 'yes'; then
			__print_lines "$question_title_prompt" >"$tty_target" # 2todo, it isn't styled
		else
			# output the prompt, saving the cursor position
			CURSOR_COLUMN=''
			__print_string "$question_title_prompt " >"$tty_target"
			# send an ansi query to fetch the cursor row and column, returns [^[[24;80R] where 24 is row, 80 is column
			# use _ to discard, the first read var is garbage, the second read var is the row, the final read var is the column
			# use a 2 second timeout, as otherwise [confirm --test] on macos sonoma will wait forever
			# shorter timeouts aren't suitable as slower machines take a while for the response
			# we are already in a TTY, so can usually guarantee an answer, and the read will complete immediately upon a response thanks to [-d R] which completes reading when the R is read, which is the final character of the response query
			local _
			IFS='[;' read -t 2 -srd R -p $'\e[6n' _ _ CURSOR_COLUMN <"$tty_target" || :
			# @todo insdtead of doing the above, we could count the characters int the title prompt perhaps?

			# output the body on a newline if it exists
			if test -n "$question_body_prompt"; then
				__print_string $'\n'"$question_body_prompt" >"$tty_target"

				# move these lines up
				if test "$question_body_line_count" -ne 0; then
					printf '\e[%sF' "$question_body_line_count" >"$tty_target"
				fi
			fi

			# move to the CURSOR_COLUMN column
			if test -n "$CURSOR_COLUMN"; then
				printf '\e[%sG' "$CURSOR_COLUMN" >"$tty_target"
			fi
		fi

		# read
		do_read
	}

	# =====================================
	# Action

	# handle termination
	local RESULT=0 finished=no

	function on_confirm_terminate {
		RESULT=$?
		if test -z "$RESULT" -o "$RESULT" -eq 0; then
			RESULT=100 # EPROTO 100 Protocol error
		fi
		on_finish
	}
	function on_finish {
		trap - SIGINT SIGTERM

		# this can run twice if ctrl+c
		if test "$finished" = 'yes'; then
			return "$RESULT"
		fi
		finished='yes'

		# erase from start of current row to end of screen, as ctrl+c buggers everything
		printf '\e[G\e[J' >"$tty_target"

		# output the finale
		if test "$RESULT" -eq 0; then
			# positive response
			if test "$option_linger" = 'yes'; then
				__print_lines "$question_title_result ${style__result_positive}${option_yes}${style__end__result_positive} $commentary" >"$tty_target"
			fi
		elif test "$RESULT" -eq 1; then
			# negative response
			if test "$option_linger" = 'yes'; then
				__print_lines "$question_title_result ${style__result_negative}${option_no}${style__end__result_negative} $commentary" >"$tty_target"
			fi
		else
			# crash response
			if test "$option_linger" = 'yes'; then
				__print_lines "$question_title_result ${style__result_abort}${option_abort}${style__end__result_abort} $commentary" >"$tty_target"
			else
				# inform to stderr, consistent with ask, choose, confirm
				__print_lines "$question_title_result ${style__result_abort}${option_abort}${style__end__result_abort} $commentary" >/dev/stderr
			fi
			# kill caller's parent
			if test "$option_ppid" -ge 0; then
				if test "$option_ppid" -ge 1; then
					# kill "-$option_ppid" ...
					# ^ fails because 130 isn't supported
					# kill -n ... ...
					# kill "-$(kill -l "$option_ppid")" ...
					# ^ works but isn't serious enough to cause the termination
					# "$(ps -p $$ -o ppid=)"
					# ^ doesn't work, as is different pid than manual
					kill "$option_ppid"
				fi
				# kill our parent
				kill "$$"
				# kill our subshell
				kill 0
				# kill our shell
				exit "$RESULT"
			fi
		fi
		# kill this
		return "$RESULT"
	}
	trap on_confirm_terminate SIGINT SIGTERM # this is necessary to always show ABORT message

	# read and handle answer
	local result_status
	eval_capture --statusvar=result_status -- do_question
	if test "$result_status" -ne 0; then
		RESULT="$result_status"
	fi
	on_finish
	return "$RESULT"

	# @todo
	# if the above read cursor position issue is a problem (e.g. press a keypress before the cursor position answer is fetched, so keypress goes into the cursor position read), then one could use `__print_line question | echo-trim-special --stdin | wc -c` however that is unreliable as doesn't take into account terminal size and wrapping, etc.
	# the better solution would be to just append a newline like this below, with ENTER and ESCAPE and SPACE as the correct outputs:
	# echo-style --blink='Press: ' --blink+green+bold='y ' --blink='for ' --blink+green='YES' --blink=', ' --blink+red+bold='n ' --blink='for ' --blink+red='NO' --blink=', ' --blink+bold='ENTER '  --blink='for ' --blink+red='NO'

	# using \e[s (save) and \e[u (restore) for ctrl+c handling did not work
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		confirm_test
	else
		confirm_ "$@"
	fi
fi
