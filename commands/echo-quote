#!/usr/bin/env bash

function echo_quote() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			For each <input>, output it as a quoted string.

			USAGE:
			echo-quote [...options] [--] ...<input>
			echo-lines ...<input> | echo-quote [...options]

			OPTIONS:
			$(stdinargs_options_help --)
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# =====================================
	# Action

	# this is not the same as ${var@Q}, which handles single quotes differently
	function on_input {
		local item="$1"
		if [[ $item != *"'"* ]]; then
			# does not contain single quotes
			print_line "'$item'"
		elif [[ $item != *'"'* ]]; then
			# does not contain double quotes
			print_line "\"$item\""
		elif [[ $item != *"\\'"* ]]; then
			# does not contain escaped single quotes
			print_line "'${item//\'/\\\'}'"
		elif [[ $item != *"\\\""* ]]; then
			# does not contain escaped double quotes
			print_line "\"${item//\"/\\\"}\""
		else
			# contains both escaped single and escaped double quotes
			# echo-quote -- "a\\'s\\\"a\\\"a\\'d"
			echo-style --error='echo-quote is unable to handle single and double quotes in the same string:' >/dev/stderr
			print_line "$item" >/dev/stderr
			return 5 # EIO 5 Input/output error
		fi
	}

	stdinargs "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_quote "$@"
fi
