#!/usr/bin/env bash

function setup_mac_brew() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'
	source "$(type -P eval-helper)"

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# environment provides:
	# HOMEBREW_ARCH (macos), HOMEBREW_PREFIX (macos, linux), HOMEBREW_CELLAR (macos)

	# setup.bash provides:
	local HOMEBREW_UNTAPS+=(
		# deprecated with bash v4
		# https://brew.sh/2023/02/16/homebrew-4.0.0/
		'homebrew/core'
		'homebrew/cask'
		# deprecated
		'caskroom/cask'  # replaced by 'homebrew/cask'
		'caskroom/fonts' # replaced by 'homebrew/cask-fonts'
	)
	local HOMEBREW_TAPS=()
	local HOMEBREW_FORMULAS=()
	local HOMEBREW_SLOW_FORMULAS=()
	local HOMEBREW_CASKS=()
	local HOMEBREW_FONTS=()
	local HOMEBREW_UNINSTALL=()        # for casks and formulas
	local HOMEBREW_ENCODING_INSTALL='' # '', 'yes', 'no'
	local HOMEBREW_ENCODING_FORMULAS=(
		# https://github.com/homebrew-ffmpeg/homebrew-ffmpeg#included-libraries
		# only need to the list the ones that need special treatment
		# Warning: No available formula with the name "libflite".
		amiaopensource/amiaos/decklinksdk
		chromaprint
		lescanauxdiscrets/tap/zvbi
	)
	local HOMEBREW_ENCODING_REMOVE_OPTIONS=(
		# Resolved: https://github.com/homebrew-ffmpeg/homebrew-ffmpeg/issues/81#issuecomment-828722622
		# Fails: https://github.com/homebrew-ffmpeg/homebrew-ffmpeg/issues/96#issuecomment-1398315717
		--with-librsvg
		# Fails: https://github.com/homebrew-ffmpeg/homebrew-ffmpeg/issues/92
		--with-decklink
		# Fails: https://github.com/homebrew-ffmpeg/homebrew-ffmpeg/issues/37#issuecomment-958018136
		--with-game-music-emu
		# Fails: Error: An exception occurred within a child process: FormulaUnavailableError: No available formula with the name "zvbi".
		--with-libzvbi
		# Fails: ERROR: libflite not found
		--with-libflite
		# Fails: Unknown option "--enable-openvino".
		--enable-openvino
		--with-openvino
	)
	# Deprecated configurations:
	local SETUP_UTILS=()               # for configuration adjustments
	local HOMEBREW_INSTALL_ENCODING='' # deprecated, replaced by HOMEBREW_ENCODING_INSTALL
	local HOMEBREW_INSTALL=()          # deprecated, replaced by HOMEBREW_FORMULAS
	local HOMEBREW_INSTALL_SLOW=()     # depreacted, replaced by HOMEBREW_SLOW_FORMULAS
	local HOMEBREW_INSTALL_CASK=()     # deprecated, replaced by HOMEBREW_CASKS
	load_dorothy_config 'setup.bash'

	# add essentials
	HOMEBREW_TAPS+=(
		# The fonts tap, is used by HOMEBREW_FONTS
		'homebrew/cask-fonts'

		# the ffmpeg tap includes all the options, and is used later
		# https://github.com/homebrew-ffmpeg/homebrew-ffmpeg
		# https://trac.ffmpeg.org/wiki/CompilationGuide/macOS#Additionaloptions
		'homebrew-ffmpeg/ffmpeg'
	)

	# deprecations
	if test -n "$HOMEBREW_INSTALL_ENCODING"; then
		HOMEBREW_ENCODING_INSTALL="$HOMEBREW_INSTALL_ENCODING"
	fi
	if test "${#HOMEBREW_INSTALL[@]}" -ne 0; then # bash v3 compat
		HOMEBREW_FORMULAS+=("${HOMEBREW_INSTALL[@]}")
	fi
	if test "${#HOMEBREW_INSTALL_SLOW[@]}" -ne 0; then # bash v3 compat
		HOMEBREW_SLOW_FORMULAS+=("${HOMEBREW_INSTALL_SLOW[@]}")
	fi
	if test "${#HOMEBREW_INSTALL_CASK[@]}" -ne 0; then # bash v3 compat
		HOMEBREW_CASKS+=("${HOMEBREW_INSTALL_CASK[@]}")
	fi

	# adjustments, with bash v3 support
	if test "${#HOMEBREW_FORMULAS[@]}" -ne 0; then
		mapfile -t HOMEBREW_FORMULAS < <(dorothy-config --packages-var='HOMEBREW_FORMULAS' -- "${HOMEBREW_FORMULAS[@]}")
	fi
	if test "${#HOMEBREW_CASKS[@]}" -ne 0; then
		mapfile -t HOMEBREW_CASKS < <(dorothy-config --packages-var='HOMEBREW_CASKS' -- "${HOMEBREW_CASKS[@]}")
	fi

	# check if ffmpeg was mentioned, if it was, trim it and enable encoding tools
	local i item
	if test "${#HOMEBREW_FORMULAS[@]}" -ne 0; then
		for i in "${!HOMEBREW_FORMULAS[@]}"; do
			item="${HOMEBREW_FORMULAS[i]}"
			if [[ $item == *'ffmpeg'* ]]; then
				HOMEBREW_FORMULAS[i]=''
				HOMEBREW_ENCODING_INSTALL='yes'
			fi
		done
	fi
	if test "${#HOMEBREW_SLOW_FORMULAS[@]}" -ne 0; then
		for i in "${!HOMEBREW_SLOW_FORMULAS[@]}"; do
			item="${HOMEBREW_SLOW_FORMULAS[i]}"
			if [[ $item == *'ffmpeg'* ]]; then
				HOMEBREW_SLOW_FORMULAS[i]=''
				HOMEBREW_ENCODING_INSTALL='yes'
			fi
		done
	fi

	# Remove problematic dependencies that routinely fail due to their circular nature
	# HOMEBREW_UNINSTALL+=(
	# 	chromaprint
	# 	homebrew-ffmpeg/ffmpeg/ffmpeg
	# 	ffmpeg
	# 	vim
	# 	python
	# 	ruby
	# )
	# fs-rm --quiet --no-confirm --optional -- "/Users/$(whoami)/Library/Python/"* "${HOMEBREW_CELLAR}/python"* "${HOMEBREW_PREFIX}/opt/python"*
	# brew install python # reinstall python now that it has been cleaned

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Setup Homebrew on your macOS machine, with automations for all your preferences.

			USAGE:
			setup-mac-brew [...options] <action> -- [...args]

			OPTIONS:
			--configure
			    When in [install] or [update] mode, reconfigure your Homebrew automations.

			--encoding
			    When in [install] mode, install encoding tools.

			ACTIONS:
			install
			    Installs/updates everything, including prompts for casks.

			update
			    Installs most things, updates everything, excludes prompts for casks.

			clean
			    Cleanup the brew installation, such as removing caches and adjusting permissions.

			uninstall
			    Completely remove Homebrew from the system. This will require a reload of your terminal once completed.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_configure='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-encoding'* | '--encoding'*)
			HOMEBREW_ENCODING_INSTALL="$(get-flag-value --affirmative --fallback="$HOMEBREW_ENCODING_INSTALL" -- "$item")"
			;;
		'--no-configure'* | '--configure'*)
			option_configure="$(get-flag-value --affirmative --fallback="$option_configure" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$action"; then
				action="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# assert compatibility
	if ! is-mac; then
		help 'This command is only purposeful on macOS, which you are not running.'
	fi

	# ensure valid action
	action="$(
		choose-option --required \
			--question='What action to perform?' \
			--filter="$action" -- install update clean uninstall
	)"

	# =====================================
	# Action Helpers

	# clean brew caches
	function clean_brew {
		# environment provides:
		# HOMEBREW_ARCH, HOMEBREW_PREFIX
		echo-segment --h2='Cleanup homebrew'
		if is-brew; then
			# fix common permission errors
			# Error: Could not cleanup old kegs! Fix your permissions on:
			# /usr/local/Cellar/go/1.17.2
			if test -n "${HOMEBREW_CELLAR-}"; then
				if test -d "$HOMEBREW_CELLAR/go"; then
					fs-own --permissions='u+rwx,g+rwx' \
						-- "$HOMEBREW_CELLAR/go"
					# bin, libexec, and many other directories contain executables, so just make it all executable
				fi
			fi
			if test -d "$HOME/Library/Caches/go-build"; then
				fs-own --sudo --permissions='u+rwx,g+rwx' \
					-- "$HOME/Library/Caches/go-build"
				# fix: go: unlinkat /Users/balupton/Library/Caches/go-build/01/0128314b8deff070ae65a398c7404f3988fc31b20cd934f950eee92284d36875-d: permission denied
			fi
			# cleanup
			eval_helper --quiet \
				-- brew cleanup --quiet -s --prune=all
			# cleanup further
			fs-rm --quiet --no-confirm --sudo -- "$(brew --cache)"
		fi
		echo-segment --g2='Cleanup homebrew'
	}

	# update brew
	function update_brew {
		brew upgrade --quiet
	}

	# install encoding tools
	function uninstall_encoding {
		brew_uninstall ffmpeg homebrew-ffmpeg/ffmpeg/ffmpeg || :
	}
	function install_encoding {
		# encoding
		if test "$action" = 'install'; then
			# determine full value for HOMEBREW_ENCODING_INSTALL
			if test -z "$HOMEBREW_ENCODING_INSTALL" -o "$option_configure" = 'yes'; then
				if confirm --negative --ppid=$$ -- 'Do you want to (re-)install encoding tools? This can take a while...'; then
					HOMEBREW_ENCODING_INSTALL='yes'
				else
					HOMEBREW_ENCODING_INSTALL='no'
				fi
				# we don't want to trigger a full configure, when just this is missing
				if test "$option_configure" = 'no'; then
					dorothy-config 'setup.bash' -- \
						--field='HOMEBREW_ENCODING_INSTALL' --value="$HOMEBREW_ENCODING_INSTALL"
				fi
			fi
		fi

		# if yes, then install the linting tools
		if test "$HOMEBREW_ENCODING_INSTALL" = 'yes'; then
			echo-segment --h1="Homebrew encoding tools"
			echo-style --notice="This can take a while... ‚è≤"

			# install dependencies:
			# https://github.com/varenc/homebrew-ffmpeg/issues/28
			# https://trac.ffmpeg.org/wiki/CompilationGuide/macOS
			# @todo perhaps this entire encoding section can become modifiers to the existing operations
			brew_install_fast "${HOMEBREW_ENCODING_FORMULAS[@]}"

			# Installing chromaprint will cause ffmpeg to be installed automatically, as such we need to remove that ffmpeg
			# so that we can install the one with the build options
			# Uninstall is necessary to prevent:
			#     Error: ffmpeg is already installed
			# --ignore-dependencies is necessary to prevent:
			#     Error: Refusing to uninstall because it is required by chromaprint, which is currently installed.
			#     Error: chromaprint not found
			# More details:
			# https://github.com/homebrew-ffmpeg/homebrew-ffmpeg/issues/13#issuecomment-647408007
			uninstall_encoding

			# log
			echo-segment --h2="Install ffmpeg with options"

			# fetch all the build options for ffmpeg
			local ffmpeg_opts bad_option
			ffmpeg_opts="$(brew options homebrew-ffmpeg/ffmpeg/ffmpeg --compact)"
			# remove options that break ffmpeg
			for bad_option in "${HOMEBREW_ENCODING_REMOVE_OPTIONS[@]}"; do
				ffmpeg_opts="${ffmpeg_opts/$bad_option /}"
			done
			# parse the space seperated options into an array
			mapfile -t ffmpeg_opts < <(echo-split ' ' -- "$ffmpeg_opts")

			# install with the build options
			eval_helper --quiet \
				-- brew install homebrew-ffmpeg/ffmpeg/ffmpeg "${ffmpeg_opts[@]}"

			# log
			echo-segment --g2="Install ffmpeg with options"
			echo-segment --g1="Homebrew encoding tools"
		else
			echo-style --notice="Skipped encoding tools installation, due to preference."
		fi
	}

	# install packages with brew
	function brew_install {
		local pkg brew_opts brew_pkgs_bulk brew_pkg_args
		brew_opts=('--quiet')
		brew_pkgs_bulk=()
		brew_pkg_args=()

		# fetch options in a way that works with multi-line values
		while test $# -gt 0; do
			if test "$1" = '--'; then
				shift
				break
			fi
			brew_opts+=("$1")
			shift
		done
		# install
		for pkg in "$@"; do
			if test -z "$pkg"; then
				# ffmpeg argument may be trimmed
				continue
			fi
			mapfile -t brew_pkg_args < <(echo-split ' ' -- "$pkg")
			if test "${#brew_pkg_args[@]}" -eq 1; then
				# it doesn't have arguments, install it in bulk
				brew_pkgs_bulk+=("$pkg")
			else
				# it has arguments, install it right now with the arguments
				eval_helper --quiet \
					-- brew install "${brew_opts[@]}" "${brew_pkg_args[@]}"
			fi
		done
		if test "${#brew_pkgs_bulk[@]}" -ne 0; then
			eval_helper --quiet \
				-- brew install "${brew_opts[@]}" "${brew_pkgs_bulk[@]}"
		fi
	}

	# install packages with brew, that are fast to install
	function brew_install_fast {
		echo-segment --h2="Install $# formulas"
		brew_install --formula -- "$@"
		echo-segment --g2="Install $# formulas"
	}

	# install packages with brew, that are slow to install
	function brew_install_slow {
		# if we are on an official directory, then we are using bottles which are pre-compiled and fast
		if test "$HOMEBREW_PREFIX" = '/usr/local' -o "$HOMEBREW_PREFIX" = '/opt/homebrew'; then
			echo-segment --h2="Install $# extra formulas"
			brew_install --formula -- "$@"
			echo-segment --g2="Install $# extra formulas"
		else
			# otherwise we are on a custom directory, can't use bottles, so have to compile ourselves, which takes forever
			if confirm --bool --ppid=$$ -- "Do you want to install [$*]? These can take hours, so best left overnight..."; then
				echo-segment --h2="Install $# slow formulas"
				echo-style --notice="This can take a while... ‚è≤"
				brew_install --formula -- "$@"
				echo-segment --g2="Install $# slow formulas"
			fi
		fi
	}

	# install fonts with brew
	function brew_install_fonts {
		echo-segment --h2="Install $# fonts"
		if test "$#" -ne 0; then
			eval_capture brew_install --cask -- "$@"
		fi
		echo-segment --g2="Install $# fonts"
	}

	# install casks with brew
	function brew_install_cask {
		local cask_selection=() fodder
		if test "$#" -eq 1 && confirm --negative --ppid=$$ -- "Would you like to install the cask [$1]?"; then
			cask_selection=("$1")
		elif test "$#" -gt 1; then
			fodder="$(
				choose-option --multi \
					--question="Which casks would you like to brew install?" \
					-- "$@"
			)"
			mapfile -t cask_selection <<<"$fodder" # <( destroys stdin
		fi
		echo-segment --h2="Install $# casks"
		if test "${#cask_selection[@]}" -ne 0; then
			brew_install --cask -- "${cask_selection[@]}"
		fi
		echo-segment --g2="Install $# casks"
	}

	# uninstall packages with brew
	function brew_uninstall {
		local pkg
		echo-segment --h2="Uninstall $# formulas"
		if test "$#" -ne 0; then
			echo-style --dim='You can ignore "No available ..." errors.'
			echo-style --dim='You can ignore "No such keg: ..." errors.'
			for pkg in "$@"; do
				brew uninstall --quiet --ignore-dependencies "$pkg" || :
			done
		fi
		echo-segment --g2="Uninstall $# formulas"
	}

	# untap repositories with brew
	function brew_untap {
		local tap
		echo-segment --h2="Untap $# repositories"
		if test "$#" -ne 0; then
			echo-style --dim='You can ignore "Error: No available tap ..." errors.'
			for tap in "$@"; do
				brew untap --quiet "$tap" || :
			done
		fi
		echo-segment --g2="Untap $# repositories"
	}

	# tap repositories with brew
	function brew_tap {
		local tap
		echo-segment --h2="Tap $# repositories"
		for tap in "$@"; do
			eval_helper --quiet --no-wrap \
				--pending="Tap: $tap" \
				--success="Tapped: $tap" \
				-- brew tap --quiet "$tap"
		done
		echo-segment --g2="Tap $# repositories"
	}

	# update A repository with brew
	function brew_update_repo() ( # subshell as cd
		cd "$1"
		if git-helper is-shallow; then
			# https://github.com/Homebrew/brew/pull/9383
			# ^ fix: Error: homebrew-cask is a shallow clone
			# ^ github requested initial clones be shallow, however initial clones cannot be updated
			# ^ as such we have to unshallow the repo
			# ^ however, `git fetch --unshallow` will fail if already not shallow
			# ^ as such, detect accordingly
			# https://stackoverflow.com/a/37533086/130638
			git fetch --unshallow
		else
			git fetch
		fi
	)

	# update repositories with brew
	function brew_repo {
		local repo
		echo-segment --h2="Update $# repositories"
		for repo in "$@"; do
			eval_helper --quiet --no-wrap \
				--pending="Updating: $repo" \
				--success="Updated: $repo" \
				-- brew_update_repo "$repo"
		done
		echo-segment --g2="Update $# repositories"
	}

	# =====================================
	# Actions

	# action: clean then exit
	if test "$action" = 'clean'; then
		clean_brew
		return
	fi

	# action: uninstall then exit
	if test "$action" = 'uninstall'; then
		echo-segment --h1='Uninstall Homebrew'
		setup-util-brew --uninstall --no-quiet
		echo-segment --g1='Uninstall Homebrew'
		echo-style --green+bold='Homebrew uninstalled, ' --red+bold+underline='restart your terminal to avoid errors.'
		return
	fi

	# log
	local title
	title="Setup/$(uppercase_first_letter "$action") Homebrew"
	echo-segment --h1="$title"

	# ensure brew is installed
	if ! is-brew; then
		echo-segment --h2='Install Homebrew'
		setup-util-brew --upgrade --no-quiet
		source "$DOROTHY/sources/environment.sh" # child processes will also inherit these changes
		echo-style --g2='Install Homebrew'
	fi

	# taps
	brew_untap "${HOMEBREW_UNTAPS[@]}"
	brew_tap "${HOMEBREW_TAPS[@]}"

	# repositories
	local repos
	mapfile -t repos < <(echo-subpaths -- "$(dirname "$(brew --repo 'homebrew/cask-fonts')")")
	brew_repo "${repos[@]}"

	# update
	echo-segment --h2="Update Homebrew"
	brew update --quiet
	echo-segment --g2="Update Homebrew"

	# uninstall packages
	brew_uninstall "${HOMEBREW_UNINSTALL[@]}"

	# cleanup
	# used to fix any breaks after the removals
	source "$DOROTHY/sources/environment.sh"
	clean_brew

	# uninstall encoding tools
	# this is necessary before updates, as it could update to a broken update
	# as such, uninstall before updates, so we can reinstall with our workarounds after
	uninstall_encoding

	# update packages
	echo-segment --h2="Upgrade Homebrew"
	update_brew
	echo-segment --g2="Upgrade Homebrew"

	# depedencies
	echo-segment --h2="Install build dependencies"
	eval_helper --quiet \
		-- setup-util-devel
	echo-segment --g2="Install build dependencies"

	# install encoding tools
	install_encoding

	# install (fast/default) formulas
	brew_install_fast "${HOMEBREW_FORMULAS[@]}"

	# install slow formulas
	brew_install_slow "${HOMEBREW_SLOW_FORMULAS[@]}"

	# install casks
	if test "$action" = 'install'; then
		brew_install_cask "${HOMEBREW_CASKS[@]}"
	fi

	# install fonts
	if test "$action" = 'install'; then
		brew_install_fonts "${HOMEBREW_FONTS[@]}"
	fi

	# -------------------------------------
	# Reconfigure?

	if test "$option_configure" != 'yes'; then
		if test "${#HOMEBREW_FORMULAS[@]}" -eq 0; then
			if confirm --positive --ppid=$$ -- "You currently have no formula listed in your user configuration, do you want to update the configuration to reflect what you have installed?"; then
				option_configure='yes'
			fi
		fi
	fi

	if test "$option_configure" = 'yes'; then
		# fetch what was installed by request
		mapfile -t requested_formulas < <(brew-installed --requested --formula)
		mapfile -t requested_cask < <(brew-installed --requested --cask)

		# because installation has completed, we can reset the config vars
		# this will also allow us to put everything in the right place
		HOMEBREW_FORMULAS=()
		HOMEBREW_FONTS=()
		HOMEBREW_CASKS=()
		# do not reset SETUP_UTILS, only add to it, as there isn't installed detection for it

		# update our listings appropriatley
		local item installer
		for item in "${requested_formulas[@]}"; do
			installer="$(get-installer --quiet -- "$item" || :)"
			if test -n "$installer"; then
				if [[ $installer == 'setup-util-'* ]]; then
					SETUP_UTILS+=("${installer#*setup-util-}")
				fi
				continue
			fi
			if is-needle --needle="$item" -- "${HOMEBREW_SLOW_FORMULAS[@]}"; then
				continue
			fi
			if is-needle --needle="$item" -- "${HOMEBREW_ENCODING_FORMULAS[@]}"; then
				continue
			fi
			if [[ $item == *'ffmpeg'* ]]; then
				# this is handled specially by encoding setup, in a special way that includes options
				continue
			fi
			HOMEBREW_FORMULAS+=("$item")
		done
		for item in "${requested_cask[@]}"; do
			installer="$(get-installer --quiet -- "$item" || :)"
			if test -n "$installer"; then
				if [[ $installer == 'setup-util-'* ]]; then
					SETUP_UTILS+=("${installer:11}")
				fi
				continue
			fi
			if [[ $item == 'font-'* ]]; then
				HOMEBREW_FONTS+=("$item")
			else
				HOMEBREW_CASKS+=("$item")
			fi
		done

		# save
		dorothy-config 'setup.bash' -- \
			--field='SETUP_UTILS' --array="$(print_lines "${SETUP_UTILS[@]}" | sort --ignore-case | uniq)" \
			--field='HOMEBREW_ENCODING_INSTALL' --value="$HOMEBREW_ENCODING_INSTALL" \
			--field='HOMEBREW_FORMULAS' --array="$(print_lines "${HOMEBREW_FORMULAS[@]}" | sort --ignore-case)" \
			--field='HOMEBREW_CASKS' --array="$(print_lines "${HOMEBREW_CASKS[@]}" | sort --ignore-case)" \
			--field='HOMEBREW_FONTS' --array="$(print_lines "${HOMEBREW_FONTS[@]}" | sort --ignore-case)"
	fi

	# -------------------------------------
	# Finish

	# log
	echo-segment --g1="$title"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_mac_brew "$@"
fi
