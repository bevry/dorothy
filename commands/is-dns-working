#!/usr/bin/env bash

# fresh macos without brew has no ping
function is_dns_working() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Test if DNS is working.

			USAGE:
			is-dns-working [--quiet] <hostname>
			# returns 0 if DNS is working, 1 if not

			OPTIONS:
			<hostname>
			    The hostname to test if the DNS is working.
				Defaults to: cloudflare.com

			--quiet
				Toggle verbosity by having this empty (the default), enabled (quiet mode), and disabled (verbose mode).
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_url='' option_quiet=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $option_url ]]; then
				option_url="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure url
	if [[ -z $option_url ]]; then
		option_url='cloudflare.com'
	fi

	# =====================================
	# Act

	# `dig -x cloudflare.com` times out for some reason, nslookup works though
	# what-is-listening dns
	# open 'https://www.cloudflare.com/en-au/ssl/encrypted-sni/'
	# open 'https://1.1.1.1/help'

	# prepare
	local cmd=(nslookup "$option_url")

	# run
	eval-helper --quiet="$option_quiet" --wrap \
		--redirect-stdout='(echo-trim-padding --stdin)' \
		--redirect-stderr='(echo-trim-padding --stdin >&2)' \
		--pending="$(
			echo-style --notice2='Checking your DNS connection...'
		)" \
		--success="$(
			echo-style --good2='DNS is connected.'
		)" \
		--failure="$(
			echo-style --error1='DNS is not working.'
		)" -- \
		"${cmd[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	is_dns_working "$@"
fi
