#!/usr/bin/env bash

# https://github.com/dbrgn/tealdeer
# tldr alternative

# https://dbrgn.github.io/tealdeer/installing.html

# https://github.com/dbrgn/tealdeer/releases
# completions_bash
# completions_fish
# completions_zsh
# tealdeer-linux-arm-musleabi
# tealdeer-linux-arm-musleabihf
# tealdeer-linux-armv7-musleabihf
# tealdeer-linux-i686-musl
# tealdeer-linux-x86_64-musl
# tealdeer-macos-x86_64
# tealdeer-windows-x86_64-msvc.exe

function setup_util_tealdeer() (
	source "$DOROTHY/sources/bash.bash"

	# configure
	function do_configure {
		# if installed, configure
		# @todo figure out why this hangs forever on wsl
		if ! is-wsl && command-exists tldr; then
			eval-helper --wrap -- tldr --update
		fi
	}

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=tldr; then
		do_configure
		return 0
	fi

	# apt is marked for removal
	local arch options=(
		--name='tealdeer'
		--cli='tldr'
		"$@"
		AUR='tealdeer-bin' # ARCH
		BREW='tealdeer'
		BSD='sysutils/tealdeer'
		CARGO='tealdeer'
		MACPORTS='tealdeer'
		NIX='tealdeer'
		RPM='rust-tealdeer' # FEDORA
		SCOOP='tealdeer'
		EOPKG='tealdeer'  # SOLUS
		XBPS='tealdeer'   # VOID
		ZYPPER='tealdeer' # SUSE
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='dbrgn/tealdeer' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		add_download_option '-macos-x86_64'
	elif is-linux; then
		if test "$arch" = 'x64'; then
			add_download_option '-linux-x86_64-musl'
		elif test "$arch" = 'x32'; then
			add_download_option '-linux-i686-musl'
		elif test "$arch" = 'a64'; then
			add_download_option '-linux-arm-musleabihf'
		elif test "$arch" = 'a32'; then
			add_download_option '-linux-armv7-musleabihf'
		fi
	elif is-wsl; then
		if test "$arch" = 'x64'; then
			add_download_option '-windows-x86_64-msvc.exe' # uses windows config, rather than wsl config
		fi
	fi
	setup-util "${options[@]}"

	# configure
	do_configure
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_tealdeer "$@"
fi
