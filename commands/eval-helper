#!/usr/bin/env bash

function eval_helper() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/tty.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Helpers for working with commands.

			USAGE:
			eval-helper [...options] -- ...<command>

			OPTIONS:
			--[no-]wrap
			    Wrap the output of the command in the command itself.
			    Enabled by default.

			--[no-]confirm
			    Confirm execution of the command.
			    Disabled by default.

			--[no-]quiet
			    If enabled, only latest message will be kept, and command output will be cleared if successful.
			    If disabled, all messages and command output will be kept.

			--[no-]shapeshifter
			    Workaround for commands that clear themselves.
			    Disabled by default.

			--pending=<pending>
			    Message to display while the command is executing.

			--success=<success>
			    Message to display if the command succeeded.

			--failure=<failure>
			    Message to display if the command failed.

			--title=<title>
			    If provided, uses this as the title inside the wrappers, instead of the escaped command.
			    Intended only for use by [sudo-helper].

			QUIRKS:
			Unless [--quiet=no] is used, then stdout+stderr will be merged into stderr.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_cmd=() option_wrap option_confirm option_quiet option_pending option_success option_failure
	option_wrap='yes'
	option_confirm='no'
	option_quiet="$(echo-quiet-enabled -- "$@")"
	option_shapeshifter='no'
	option_pending=''
	option_success=''
	option_failure=''
	option_title=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet-enabled
		'--pending='*) option_pending="${item#*=}" ;;
		'--success='*) option_success="${item#*=}" ;;
		'--failure='*) option_failure="${item#*=}" ;;
		'--title='*) option_title="${item#*=}" ;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value --affirmative --fallback="$option_confirm" -- "$item")"
			;;
		'--no-shapeshifter'* | '--shapeshifter'*)
			option_shapeshifter="$(get-flag-value --affirmative --fallback="$option_shapeshifter" -- "$item")"
			;;
		'--no-wrap'* | '--wrap'*)
			option_wrap="$(get-flag-value --affirmative --fallback="$option_wrap" -- "$item")"
			;;
		'--')
			option_cmd+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	# prepare
	local element_open tty_target
	if test -z "$option_title"; then
		option_title="$(echo-escape-command -- "${option_cmd[@]}")"
	fi
	if test "$option_wrap" = 'yes'; then
		element_open="$(echo-element --open="$option_title")"
	else
		element_open="$(echo-style --code="$option_title")"
	fi
	tty_target="$(is-tty --fallback)"

	# confirm
	if test "$option_confirm" = 'yes' && ! confirm --positive --ppid=$$ -- 'Confirm execution of the command that is below:' "$element_open"; then
		echo-style --notice='Skipped execution of:' ' ' "$element_open"
		return 0
	fi

	# output everything if already inside a revolving door, or if in verbose mode
	local cmd_status=0
	if test "${INSIDE_REVOLVING_DOOR-}" = 'yes' -o "$option_quiet" = 'no'; then
		# headers
		if test -n "$option_pending"; then
			print_line "$option_pending" >"$tty_target"
		fi
		if test "$option_wrap" = 'yes'; then
			print_line "$element_open" >"$tty_target"
		fi

		# body
		eval_capture --statusvar=cmd_status -- "${option_cmd[@]}"

		# footers
		if test "$option_wrap" = 'yes'; then
			echo-element --close="$option_title" --status="$cmd_status" >"$tty_target"
		fi
		if test "$cmd_status" -eq 0; then
			if test -n "$option_success"; then
				print_line "$option_success" >"$tty_target"
			fi
		else
			if test -n "$option_failure"; then
				print_line "$option_failure" >"$tty_target"
			fi
		fi
	else
		# not inside a revolving door, and not in verbose mode
		local columns headers body footer=''
		# trunk-ignore(shellcheck/SC2015)
		columns="$(is-tty && tput cols || :)"
		headers="$(mktemp)"
		body="$(mktemp)"

		# headers
		if test -n "$option_pending"; then
			print_line "$option_pending" | tee -a "$headers" >"$tty_target"
		fi
		if test "$option_wrap" = 'yes'; then
			print_line "$element_open" | tee -a "$headers" >"$tty_target"
		fi

		# body
		# NOTE |& is bash v4 only, and this script must work on Bash v3
		# https://github.com/bevry/dorothy/discussions/151
		local INSIDE_REVOLVING_DOOR_original="${INSIDE_REVOLVING_DOOR:-"no"}"
		export INSIDE_REVOLVING_DOOR='yes' # use export, as env doesn't work when option_cmd[0] was a function
		if test "$option_shapeshifter" = 'yes'; then
			# this is used if the command writes to TTY
			# in which case echo-revolving-door fails to clear
			tty_start
			cat "$headers" >"$tty_target" # redo headers inside alt tty while its active
			eval_capture --statusvar=cmd_status -- "${option_cmd[@]}" > >(tee -a "$body") 2> >(tee -a "$body" >/dev/stderr)
			tty_finish
		else
			eval_capture --statusvar=cmd_status -- "${option_cmd[@]}" > >(tee -a "$body" | echo-revolving-door --columns="$columns") 2> >(tee -a "$body" | echo-revolving-door --columns="$columns" >/dev/stderr)
			# we cannot detect shapeshifting after the fact, as it occurs in the TTY, not stdout, nor stderr
		fi
		export INSIDE_REVOLVING_DOOR="$INSIDE_REVOLVING_DOOR_original"

		# clear headers, we can re-add them later if needed
		echo-clear-lines --stdin <"$headers" >"$tty_target"

		# generate footer
		if test "$cmd_status" -eq 0; then
			if test -n "$option_success"; then
				footer+="$option_success"$'\n'
			fi
		else
			if test -n "$option_failure"; then
				footer+="$option_failure"$'\n'
			fi
		fi

		# if quiet and successful, dump footer and exit
		if test "$option_quiet" = 'yes' -a "$cmd_status" -eq 0; then
			if test -n "$footer"; then
				print_string "$footer" >"$tty_target"
			fi
			return "$cmd_status"
		fi

		# if it didn't output anything, output self closing wrap, then footer, then exit
		if test -z "$(cat "$body")"; then
			echo-element --openclose="$option_title" --status="$cmd_status" >"$tty_target"
			if test -n "$footer"; then
				print_string "$footer" >"$tty_target"
			fi
			return "$cmd_status"
		fi
		# the command outputted things

		# output wrap header
		if test "$option_wrap" = 'yes'; then
			print_line "$element_open" >"$tty_target"
		fi
		# if verbose, or failure, output body
		if test "$option_quiet" = 'no' -o "$cmd_status" -ne 0; then
			cat "$body" >/dev/stderr
		fi
		# outpout wrap footer
		if test "$option_wrap" = 'yes'; then
			echo-element --close="$option_title" --status="$cmd_status" >"$tty_target"
		fi
		# output footer
		if test -n "$footer"; then
			print_string "$footer" >"$tty_target"
		fi
	fi

	# done
	return "$cmd_status"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	eval_helper "$@"
fi
