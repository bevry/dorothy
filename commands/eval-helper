#!/usr/bin/env bash

function eval_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Helpers for working with commands.

			USAGE:
			eval-helper [...options] -- ...<command>

			OPTIONS:
			--[no-]wrap
			    Wrap the output of the command in the command itself.
			    Enabled by default.

			--[no-]confirm
			    Confirm execution of the command.
			    Disabled by default.

			--[no-]quiet
			    If empty, if successful only the pending message, command status, and success message will be kept. If failure, the pending message, command output and status, and failure message will be kept.
			    If enabled, if successful only the success message will be kept. If failure, the pending message, command output and status, and failure message will be kept.
			    If disabled, the pending message, command output and status, and success or failure message will be kept. The command stdout will also be available to stdout.

			--[no-]shapeshifter
			    Workaround for commands that clear themselves.
			    Disabled by default.

			--[no-]trim
			    Trim output of the command.
			    Disabled by default.

			--pending=<pending>
			    Message to display while the command is executing.

			--success=<success>
			    Message to display if the command succeeded.

			--failure=<failure>
			    Message to display if the command failed.

			--command=<command-string>
			    By default when wrapping the command status and/or output, the escaped <command> is used.
				Providing a <command-string> will use the <command-string> instead of the escaped <command>.
			    Intended only for use by [sudo-helper].

			QUIRKS:
			Unless [--no-quiet] is used, then stdout+stderr will be merged into stderr.
			Messages are output to TTY if available, otherwise stderr.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet option_cmd=() option_wrap='yes' option_trim='no' option_confirm='no' option_shapeshifter='no' option_pending='' option_success='' option_failure='' option_command_string='' option_terminal_device_file=''
	option_quiet="$(get-terminal-quiet-support || :)"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--pending='*) option_pending="${item#*=}" ;;
		'--success='*) option_success="${item#*=}" ;;
		'--failure='*) option_failure="${item#*=}" ;;
		'--command='*) option_command_string="${item#*=}" ;;
		'--terminal-device-file='*) option_terminal_device_file="${item#*=}" ;;
		'--no-trim'* | '--trim'*)
			option_trim="$(get-flag-value --affirmative --fallback="$option_trim" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value --affirmative --fallback="$option_confirm" -- "$item")"
			;;
		'--no-shapeshifter'* | '--shapeshifter'*)
			option_shapeshifter="$(get-flag-value --affirmative --fallback="$option_shapeshifter" -- "$item")"
			;;
		'--no-wrap'* | '--wrap'*)
			option_wrap="$(get-flag-value --affirmative --fallback="$option_wrap" -- "$item")"
			;;
		'--')
			option_cmd+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	# terminal
	local terminal_device_file="$option_terminal_device_file"
	if test -z "$terminal_device_file"; then
		terminal_device_file="$(get-terminal-device-file)"
	fi

	# element
	local element_open=''
	if test -z "$option_command_string"; then
		option_command_string="$(echo-escape-command -- "${option_cmd[@]}")"
	fi
	if test "$option_wrap" = 'yes'; then
		element_open="$(echo-style --element="$option_command_string")"
	else
		element_open="$(echo-style --code="$option_command_string")"
	fi

	# confirm
	if test "$option_confirm" = 'yes' && ! confirm --positive --ppid=$$ -- 'Confirm execution of the command that is below:' "$element_open"; then
		echo-style --notice='Skipped execution of:' ' ' "$element_open"
		return 0
	fi

	# headers
	local header=''
	if test -n "$option_pending"; then
		header+="$option_pending"$'\n'
	fi
	if test "$option_wrap" = 'yes'; then
		header+="$element_open"$'\n'
	fi
	if test -n "$header"; then
		__print_string "$header" >"$terminal_device_file"
	fi

	# output
	local output=''
	function flush_output {
		if test -n "$output"; then
			__print_string "$output" >"$terminal_device_file"
			output=''
		fi
	}

	# output everything if already inside a revolving door, or if in verbose mode
	local cmd_status=0
	if test "${INSIDE_REVOLVING_DOOR-}" = 'yes' || test "$option_quiet" = 'no'; then
		# body
		if test "$option_trim" = 'yes'; then
			eval_capture --statusvar=cmd_status -- "${option_cmd[@]}" \
				> >(echo-trim-padding --stdin) \
				2> >(echo-trim-padding --stdin >/dev/stderr)
		else
			eval_capture --statusvar=cmd_status -- "${option_cmd[@]}"
		fi

		# add close
		if test "$option_wrap" = 'yes'; then
			output+="$(echo-style --/element="$option_command_string" --status="$cmd_status")"$'\n'
		fi

		# add success or failure
		if test "$cmd_status" -eq 0; then
			if test -n "$option_success"; then
				output+="$option_success"$'\n'
			fi
		else
			if test -n "$option_failure"; then
				output+="$option_failure"$'\n'
			fi
		fi

		# output
		flush_output
	else
		# not inside a revolving door, and not in verbose mode
		local terminal_size terminal_columns=0 body_file
		mapfile -t terminal_size < <(get-terminal-lines-and-columns || :)
		if test "${#terminal_size[@]}" -eq 2; then
			terminal_columns="${terminal_size[1]}"
		fi
		body_file="$(mktemp)"

		# body
		# NOTE |& is bash v4 only, and this script must work on Bash v3, which uses 2>&1 |
		# https://github.com/bevry/dorothy/discussions/151
		local INSIDE_REVOLVING_DOOR_original="${INSIDE_REVOLVING_DOOR:-"no"}"
		export INSIDE_REVOLVING_DOOR='yes' # use export, as env doesn't work when option_cmd[0] was a function
		if test "$option_shapeshifter" = 'yes'; then
			# this is used if the command writes to TTY
			# in which case echo-revolving-door fails to clear
			echo-style --no-trail --alternative-screen-buffer --="$header" >"$terminal_device_file" # redo header inside alt tty while its active
			eval_capture --statusvar=cmd_status -- "${option_cmd[@]}" \
				> >(tee -a "$body_file") \
				2> >(tee -a "$body_file" >/dev/stderr)
			echo-style --no-trail --default-screen-buffer >"$terminal_device_file"
		else
			eval_capture --statusvar=cmd_status -- "${option_cmd[@]}" \
				> >(tee -a "$body_file" | echo-revolving-door --columns="$terminal_columns") \
				2> >(tee -a "$body_file" | echo-revolving-door --columns="$terminal_columns" >/dev/stderr)
			# we cannot detect shapeshifting after the fact, as it occurs in the TTY, not stdout, nor stderr
		fi
		export INSIDE_REVOLVING_DOOR="$INSIDE_REVOLVING_DOOR_original"

		# clear header, we can re-add them later if needed
		echo-clear-lines --here-string <<<"$header" >"$terminal_device_file"

		# generate output
		if test "$option_quiet" = 'no' -o "$cmd_status" -ne 0; then
			# pending message, command output and status, and success or failure message

			# add pending
			if test -n "$option_pending"; then
				output+="$option_pending"$'\n'
			fi

			# add body
			local body
			if test -s "$body_file"; then
				if test "$option_trim" = 'yes'; then
					body="$(echo-trim-padding --stdin <"$body_file")"
				else
					body="$(cat "$body_file")"
				fi
			else
				body=''
			fi
			if test "$option_wrap" = 'no'; then
				if test -n "$body"; then
					flush_output
					__print_lines "$body" >/dev/stderr
				fi
			else
				if test -n "$body"; then
					output+="$(echo-style --element="$option_command_string")"$'\n'
					flush_output
					__print_lines "$body" >/dev/stderr
					output+="$(echo-style --/element="$option_command_string" --status="$cmd_status")"$'\n'
				else
					output+="$(echo-style --element="$option_command_string" --/fragment='' --status="$cmd_status")"$'\n'
				fi
			fi

			# add success or failure
			if test "$cmd_status" -eq 0; then
				if test -n "$option_success"; then
					output+="$option_success"$'\n'
				fi
			else
				if test -n "$option_failure"; then
					output+="$option_failure"$'\n'
				fi
			fi

		elif test -z "$option_quiet"; then
			# pending message, command status, and success message

			# add pending
			if test -n "$option_pending"; then
				output+="$option_pending"$'\n'
			fi

			# truncate body if wrapping
			if test "$option_wrap" = 'yes'; then
				local body
				if test -s "$body_file"; then
					if test "$option_trim" = 'yes'; then
						body="$(echo-trim-padding --stdin <"$body_file")"
					else
						body="$(cat "$body_file")"
					fi
				else
					body=''
				fi
				if test -n "$body"; then
					# self close as we are truncating
					output+="$(echo-style --/element="$option_command_string" --status="$cmd_status")"$'\n'
				else
					# close fragment as there is no data
					output+="$(echo-style --element="$option_command_string" --/fragment --status="$cmd_status")"$'\n'
				fi
			fi

			# add success
			if test -n "$option_success"; then
				output+="$option_success"$'\n'
			fi
		elif test "$option_quiet" = 'yes'; then
			# only success message

			# add success
			if test -n "$option_success"; then
				output+="$option_success"$'\n'
			fi
		fi

		# output
		flush_output
	fi

	# done
	return "$cmd_status"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	eval_helper "$@"
fi
