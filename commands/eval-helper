#!/usr/bin/env bash

function eval_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Helpers for working with commands.

			USAGE:
			eval-helper [...options] -- ...<command>

			OPTIONS:
			--[no-]wrap
			    Wrap the output of the command in the command itself.
			    Enabled by default.

			--[no-]confirm
			    Confirm execution of the command.
			    Disabled by default.

			--[no-]quiet
			    If empty, if successful only the pending message, command status, and success message will be kept. If failure, the pending message, command output and status, and failure message will be kept.
			    If enabled, if successful only the success message will be kept. If failure, the pending message, command output and status, and failure message will be kept.
			    If disabled, the pending message, command output and status, and success or failure message will be kept. The command stdout will also be available to stdout.

			--[no-]shapeshifter
			    Workaround for commands that clear themselves.
			    Disabled by default.

			--[no-]trim
			    Trim output of the command.
			    Disabled by default.

			--pending=<pending>
			    Message to display while the command is executing.

			--success=<success>
			    Message to display if the command succeeded.

			--failure=<failure>
			    Message to display if the command failed.

			--command=<command-string>
			    By default when wrapping the command status and/or output, the escaped <command> is used.
				Providing a <command-string> will use the <command-string> instead of the escaped <command>.
			    Intended only for use by [sudo-helper].

			QUIRKS:
			Unless [--no-quiet] is used, then stdout+stderr will be merged into stderr.
			Messages are output to TTY if available, otherwise stderr.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet option_cmd=() option_wrap='yes' option_trim='no' option_confirm='no' option_shapeshifter='' option_pending='' option_success='' option_failure='' option_command_string=''
	option_quiet="$(get-terminal-quiet-support || :)"
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--pending='*) option_pending="${item#*=}" ;;
		'--success='*) option_success="${item#*=}" ;;
		'--failure='*) option_failure="${item#*=}" ;;
		'--command='*) option_command_string="${item#*=}" ;;
		'--terminal-device-file='*) TERMINAL_DEVICE_FILE="${item#*=}" ;;
		'--no-trim'* | '--trim'*)
			option_trim="$(get-flag-value --affirmative --fallback="$option_trim" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value --affirmative --fallback="$option_confirm" -- "$item")"
			;;
		'--no-shapeshifter'* | '--shapeshifter'*)
			option_shapeshifter="$(get-flag-value --affirmative --fallback="$option_shapeshifter" -- "$item")"
			;;
		'--no-wrap'* | '--wrap'*)
			option_wrap="$(get-flag-value --affirmative --fallback="$option_wrap" -- "$item")"
			;;
		'--')
			option_cmd+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# ensure items that write to TTY are cleared correctly
	if [[ -z $option_shapeshifter ]]; then
		if [[ ${option_cmd[0]} == 'sudo-helper' ]]; then
			option_shapeshifter='yes'
		else
			option_shapeshifter='no'
		fi
	fi

	# =====================================
	# Action

	# terminal
	local messages_device_file="$TERMINAL_DEVICE_FILE"

	# element
	local element_open=''
	if [[ -z $option_command_string ]]; then
		option_command_string="$(echo-style --code="$(echo-escape-command -- "${option_cmd[@]}")")"
	fi
	if [[ $option_wrap == 'yes' ]]; then
		element_open="$(echo-style --element="$option_command_string")"
	else
		element_open="$(echo-style --code="$option_command_string")"
	fi

	# confirm
	if [[ $option_confirm == 'yes' ]] && ! confirm --positive --ppid=$$ -- 'Confirm execution of the command that is below:' "$element_open"; then
		echo-style --tty --notice1='Skipped execution of:' --code-notice1="$element_open"
		return 0
	fi

	# messages
	local messages=''
	function flush_messages {
		if [[ -n $messages ]]; then
			__do --redirect-stdout="$messages_device_file" -- __print_string "$messages"
			messages=''
		fi
	}

	# headers
	local header=''
	if [[ -n $option_pending ]]; then
		header+="$option_pending"$'\n'
	fi
	if [[ $option_wrap == 'yes' ]]; then
		header+="$element_open"$'\n'
	fi
	if [[ -n $header ]]; then
		messages+="$header"
		flush_messages
	fi

	# output everything if already inside a revolving door, or if in verbose mode
	local cmd_status=0
	if [[ ${INSIDE_REVOLVING_DOOR-} == 'yes' || $option_quiet == 'no' ]]; then
		# body
		if [[ $option_trim == 'yes' ]]; then
			__do --redirect-status={cmd_status} --redirect-stdout='(echo-trim-padding --stdin)' --redirect-stderr='(echo-trim-padding --stdin >&2)' -- "${option_cmd[@]}"
		else
			__try {cmd_status} -- "${option_cmd[@]}"
		fi

		# add close
		if [[ $option_wrap == 'yes' ]]; then
			messages+="$(echo-style --/element="$option_command_string" --status="$cmd_status")"$'\n'
		fi

		# add success or failure
		if [[ $cmd_status -eq 0 ]]; then
			if [[ -n $option_success ]]; then
				messages+="$option_success"$'\n'
			fi
		else
			if [[ -n $option_failure ]]; then
				messages+="$option_failure"$'\n'
			fi
		fi

		# output
		flush_messages
	else
		# not inside a revolving door, and not in verbose mode
		local terminal_size terminal_columns=0
		mapfile -t terminal_size < <(get-terminal-lines-and-columns || :)
		if [[ ${#terminal_size[@]} -eq 2 ]]; then
			terminal_columns="${terminal_size[1]}"
		fi

		# body
		# NOTE |& is bash v4 only, and this script must work on Bash v3, which uses 2>&1 |
		# https://github.com/bevry/dorothy/discussions/151
		local body
		local INSIDE_REVOLVING_DOOR_original="${INSIDE_REVOLVING_DOOR:-"no"}"
		export INSIDE_REVOLVING_DOOR='yes' # use export, as env doesn't work when option_cmd[0] was a function
		if [[ $option_shapeshifter == 'yes' ]]; then
			# this is used if the command writes to TTY, instead of stdout/stderr, or outputs ANSI escape codes that modify the cursor
			# in which case echo-revolving-door fails to clear
			echo-style --no-trail --tty --alternative-screen-buffer --="$header" # redo header inside alt tty while its active
			__do --redirect-status={cmd_status} --redirect-output=stderr --copy-stderr={body} --redirect-output=tty -- "${option_cmd[@]}"
			echo-style --no-trail --tty --default-screen-buffer
		else
			# direct stdout and stderr to TTY, as they will be truncated and will be outputting clear ansi codes, which will confuse anything that is expecting legit TTY output
			__do --redirect-status={cmd_status} --redirect-output=stderr --copy-stderr={body} --redirect-output="(echo-revolving-door --columns=$terminal_columns)" --redirect-output=tty -- "${option_cmd[@]}"
			# we cannot detect shapeshifting after the fact, as it occurs in the TTY, not stdout, nor stderr
		fi
		export INSIDE_REVOLVING_DOOR="$INSIDE_REVOLVING_DOOR_original"

		# clear header, we can re-add them later if needed
		__do --redirect-stdout=tty -- echo-clear-lines --here-string <<<"$header"

		# generate output
		if [[ $option_quiet == 'no' || $cmd_status -ne 0 ]]; then
			# pending message, command output and status, and success or failure message

			# add pending
			if [[ -n $option_pending ]]; then
				messages+="$option_pending"$'\n'
			fi

			# add body
			if [[ -n $body && $option_trim == 'yes' ]]; then
				body="$(echo-trim-padding -- "$body")"
			fi
			if [[ $option_wrap == 'no' ]]; then
				if [[ -n $body ]]; then
					flush_messages
					__print_lines "$body" >&2
				fi
			else
				if [[ -n $body ]]; then
					messages+="$(echo-style --element="$option_command_string")"$'\n'
					flush_messages
					__print_lines "$body" >&2
					messages+="$(echo-style --/element="$option_command_string" --status="$cmd_status")"$'\n'
				else
					messages+="$(echo-style --element="$option_command_string" --/fragment='' --status="$cmd_status")"$'\n'
				fi
			fi

			# add success or failure
			if [[ $cmd_status -eq 0 ]]; then
				if [[ -n $option_success ]]; then
					messages+="$option_success"$'\n'
				fi
			else
				if [[ -n $option_failure ]]; then
					messages+="$option_failure"$'\n'
				fi
			fi

		elif [[ -z $option_quiet ]]; then
			# pending message, command status, and success message

			# add pending
			if [[ -n $option_pending ]]; then
				messages+="$option_pending"$'\n'
			fi

			# truncate body if wrapping
			if [[ $option_wrap == 'yes' ]]; then
				# trim
				if [[ -n $body && $option_trim == 'yes' ]]; then
					body="$(echo-trim-padding -- "$body")"
				fi
				# check if still has data after trim
				if [[ -n $body ]]; then
					# self close as we are truncating
					messages+="$(echo-style --/element="$option_command_string" --status="$cmd_status")"$'\n'
				else
					# close fragment as there is no data
					messages+="$(echo-style --element="$option_command_string" --/fragment --status="$cmd_status")"$'\n'
				fi
			fi

			# add success
			if [[ -n $option_success ]]; then
				messages+="$option_success"$'\n'
			fi
		elif [[ $option_quiet == 'yes' ]]; then
			# only success message

			# add success
			if [[ -n $option_success ]]; then
				messages+="$option_success"$'\n'
			fi
		fi

		# output
		flush_messages
	fi

	# done
	return "$cmd_status"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	eval_helper "$@"
fi
