#!/usr/bin/env bash

function get_group_id() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Get the group identifier for a group name.

			USAGE:
			get-group-id <group>
			get-group-id --group=<group>
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_group=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--group='*) option_group="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $option_group ]]; then
				option_group="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if [[ -z $option_group ]]; then
		help "No <group> was provided"
		# ^ there is no fallback for this, as a user may be part of several groups, so the question is which one, e.g. [id -g] [id -G] [groups]
		# using [id -g] will result in:
		# sudo: unknown group 1000
		# sudo: error initializing audit plugin sudoers_audit
	fi

	# =====================================
	# Action

	# https://stackoverflow.com/a/10910180
	if __command_exists -- getent; then
		getent group "$option_group" | cut -d: -f3
	elif __command_exists -- dscl; then
		local bin_gawk_or_awk
		bin_gawk_or_awk="$(echo-gnu-command --install -- gawk)"
		dscl . -read "/Groups/$option_group" | "$bin_gawk_or_awk" '($1 == "PrimaryGroupID:") { print $2 }'
		# echo-regexp -on --regexp='PrimaryGroupID: (\d+)' --replace='$1'
	else
		echo-style --stderr --error="$0: Getting the group identifier is unsupported on this platform."
		return 19 # ENODEV 19 Operation not supported by device
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	get_group_id "$@"
fi
