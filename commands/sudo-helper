#!/usr/bin/env bash

# sudo a command helpering environment and path
# https://stackoverflow.com/q/257616/130638

function sudo_helper() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-helper)" # enable eval_helper

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Run a command as root, be it via sudo or doas, or neither if not needed.

			USAGE:
			sudo-helper [...options] -- <command> [...args]
			sudo-helper --local

			OPTIONS:
			--reason=<reason>
			    if a prompt is required for your sudo/root/login password, this reason will be used to explain why sudo was required.

			--user=<user>
			    specify a user to run the command as
			--group=<group>
			    specify a group to run the command as
			--no-sudo | --sudo=no
			    If specified, and no <user> nor <group> is provided, then sudo will not be used, and the command will be run normally.

			--inherit
			    if enabled, inherit environment variables include PATH.

			--wrap
			    if enabled, [eval-helper] will be used to wrap the output of the command
			--quiet
			    if enabled, [eval-helper] will be used to silence the output of the command
			--confirm
			    if enabled, [eval-helper] will be used to confirm the execution of the command

			--local
			    update sudo configuration to enable access to /usr/local paths

		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	# option_quiet='no' is an important default to ensure our call to eval-helper can still be interpolated
	local item option_cmd=() option_quiet='no' option_reason='' option_user='' option_group='' option_sudo='yes' option_confirm='no' option_wrap='no' option_inherit='no' option_local=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--reason='*) option_reason="${item#*=}" ;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--no-inherit'* | '--inherit'*)
			option_inherit="$(get-flag-value --affirmative --fallback="$option_inherit" -- "$item")"
			;;
		'--no-wrap'* | '--wrap'*)
			option_wrap="$(get-flag-value --affirmative --fallback="$option_wrap" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value --affirmative --fallback="$option_confirm" -- "$item")"
			;;
		'--no-local'* | '--local'*)
			option_local="$(get-flag-value --affirmative --fallback="$option_local" -- "$item")"
			;;
		'--')
			option_cmd+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# local
	if [[ -n $option_local ]]; then
		# trim problematic paths
		local system_paths sudoers_line cron_system_line cron_user_line ignore_args=(
			# these are not needed for [dorothy run] to bootstrap itself
			--regexp="$HOME"
			--regexp='/Applications/'
		)
		if [[ -n ${HOMEBREW_PREFIX-} ]]; then
			# these are not needed for [dorothy run] to bootstrap itself
			# and they confuse cron as it thinks they have minutes due to version numbers
			ignore_args+=(
				--regexp="$HOMEBREW_PREFIX/Cellar"
				--regexp="$HOMEBREW_PREFIX/lib"
				--regexp="$HOMEBREW_PREFIX/opt"
			)
		fi
		system_paths="$(echo-split ':' --stdin <<<"$PATH" | grep --invert-match --fixed-strings "${ignore_args[@]}" | echo-join ':' --stdin)"

		sudoers_line="Defaults	secure_path=\"$system_paths\"" # $HOME paths do not make sense for root operation
		cron_system_line="PATH=\"$system_paths\""             # $HOME paths do not make sense for root operation
		cron_user_line="PATH=\"$system_paths\""               # $HOME paths fails to apply

		# sudoers
		config-edit --sudoers --line="$sudoers_line" --needle='secure_path' --add="$option_local"

		# cron
		config-edit --cron-system --line="$cron_system_line" --needle='PATH=' --add="$option_local"
		config-edit --cron-user --line="$cron_user_line" --needle='PATH=' --add="$option_local"

		# done
		return 0
	fi

	# check
	if [[ ${#option_cmd[@]} -eq 0 ]]; then
		help 'No <command> was provided.'
	fi

	# =====================================
	# Action

	# https://man.openbsd.org/doas
	# https://man.archlinux.org/man/doas.1.en

	# sudo
	# https://manpages.ubuntu.com/manpages/xenial/man8/sudo.8.html
	# -E, --preserve-env
	#    preserve user environment when running command
	# -H, --set-home
	#    set HOME variable to target user's home dir
	# -i, --login
	#    Run the shell specified by the target user's password database entry as a login shell.

	local run=() home='' command_style='sudo'
	if [[ $option_sudo == 'no' ]]; then
		command_style=''
		run+=("${option_cmd[@]}")
	elif __command_exists -- sudo; then
		run+=('sudo')

		if [[ -n $option_user ]]; then
			run+=("--user=$option_user")
			# should coincide with setup-environment-commands
			if [[ -d /Users ]]; then
				home="/Users/$option_user"
			elif [[ -d '/home' ]]; then
				home="/home/$option_user"
			elif [[ -d "/$option_user" ]]; then
				HOME="/$option_user"
			fi
		elif [[ -n $HOME ]]; then
			home="$HOME"
		fi

		if [[ -n $option_group ]]; then
			run+=("--group=$option_group")
		fi

		if [[ -n $home ]]; then
			if is-missing -- "$home"; then
				sudo mkdir -p "$home" # don't use __sudo_mkdirp as that will forever recurse
				fs-own --quiet --user="$option_user" --group="$option_group" -- "$home"
			fi
			run+=('--set-home')
		fi

		if [[ $option_inherit == 'yes' ]]; then
			run+=(
				'--preserve-env'
				'env'
				"PATH=$PATH"
			)
		fi

		# check if password is required
		# [sudo --validate] doesn't work on multipass, so just use [true] as a no-op
		if ! sudo --non-interactive true &>/dev/null; then
			# password is required, let the user know what they are being prompted for
			# [--code=*] better than [echo-style --element/="$(echo-escape-command -- "${run[@]}" | echo-join ' ' --stdin)"] as that is too verbose
			# use [--tty] to ensure the prompt is not hidden when otherwise hiding sudo output, such as in [command-working]
			# while it would be nice to clear lines, we cannot know how many lines to clear as they could require multiple attempts to enter the password
			if [[ -n $option_reason ]]; then
				echo-style --tty --notice="$option_reason"
			else
				echo-style --tty --notice='Your sudo/root/login password is required to execute the command:'
			fi
			option_wrap='yes'
		fi

		run+=("${option_cmd[@]}")
	elif __command_exists -- doas; then
		# https://man.archlinux.org/man/doas.1.en
		run+=('doas')
		if [[ -n $option_user ]]; then
			run+=(
				'-u'
				"$option_user"
			)
		fi
		if [[ -n $option_group ]]; then
			help 'doas does not support --group'
		fi
		if [[ $option_inherit == 'yes' ]]; then
			run+=(
				'env'
				"DOROTHY=$DOROTHY"
				"PATH=$PATH"
			)
		fi
		run+=("${option_cmd[@]}")
	else
		# sudo/doas does not exist, probably not needed
		command_style=''
		run+=("${option_cmd[@]}")
	fi

	# execute
	# @note that piping to cat, allows ctrl+c (SIGTERM) to be correctly reported, otherwise exit status 1 is returned
	# the main thing here though, is that any failure should be detected and cancel in the caller
	# perhaps requiring --ppid=$$ to be passed to sudo-helper is the way to go, as we do for [confirm]
	if [[ $option_wrap == 'yes' || $option_confirm == 'yes' || $option_quiet == 'yes' ]]; then
		eval-helper --command="$(echo-style --"$command_style"="$(echo-escape-command -- "${option_cmd[@]}")")" --wrap="$option_wrap" --quiet="$option_quiet" --confirm="$option_confirm" -- "${run[@]}"
	else
		"${run[@]}" # eval
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	sudo_helper "$@"
fi
