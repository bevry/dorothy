#!/usr/bin/env bash

# TODOS:
# - [ ] ctrl n/p for navigating up/down.
# - [ ] `hjkl` vim arrow keys.

function choose_option_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	# timeout response not required
	eval-tester --name='timeout response not required' --status='0' --stderr=$'Read timed out [60], without selection.\nMenu timed out [60], no result, not required.' \
		-- env NO_COLOR=yes choose-option --question='timeout response not required' --timeout=5 -- a b c

	# timeout response is required
	eval-tester --name='timeout response is required' --status='60' --stderr=$'Read timed out [60], without selection.\nMenu timed out [60], no result, is required.' \
		-- env NO_COLOR=yes choose-option --question='timeout response is required' --timeout=5 --required -- a b c

	# default response
	{
		sleep 3
	} | eval-tester --name='default response' --stdout='b' --ignore-stderr \
		-- choose-option --question='default response' --timeout=2 --default=b -- a b c

	# default multi response
	{
		sleep 3
	} | eval-tester --name='default multi response' --stdout=$'b\nc' --ignore-stderr \
		-- choose-option --question='default multi response' --timeout=2 --multi --default=b --default=c -- a b c

	# first selection
	{
		sleep 3
		echo
	} | eval-tester --name='first selection' --stdout='a' \
		-- choose-option --question='first selection' -- a b c

	# second selection
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
		echo
	} | eval-tester --name='second selection' --stdout='b' \
		-- choose-option --question='second selection' -- a b c

	# abort response via escape
	{
		# press escape key
		sleep 3
		printf $'\x1b'
	} | eval-tester --name='abort response via escape' \
		-- choose-option --question='abort response via escape' -- a b c

	echo-segment --g1="TEST: $0"
	return 0
)
function choose_option() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Prompt the user to select a value from a list of values, in a clean and robust way.

			USAGE:
			choose_option
			  [--question=<question>]
			  [--filter=<filter>]
			  [--label[=first]]
			  [--return='\$LABEL']
			  [--visual='\$LABEL [\$VALUE]']
			  [--required]
			  [--multi]
			  [--default=<value>]
			  [--defaults=<newline separated values>]
			  [--confirm]
			  -- ...<value>

			If you wish to show a question above the menu:
			--question=<question> -- ...

			If you wish to filter the value and/or labels, use:
			--filter=<filter> -- ...

			If you wish to prevent using the escape key to provide no selection, use:
			--required -- ...

			If you wish to allow multiple selections:
			--multi -- ...

			If you wish to confirm a possibly arbitary selection, use:
			--confirm -- ...

			If you wish to pass values and labels, use:
			--label -- ...[<value> <label>]

			If you wish to pass label then value, use:
			--label=first -- ...[<label> <value>]

			By default, if the label and value differ, both will be displayed,
			  and if they are the same, then only the value will be displayed.

			If you wish to customise what is displayed:
			--label --visual='\$LABEL [\$VALUE]' -- ...[<value> <label>]
			^ the value is eval'd

			If you wish to return the label use:
			--label --return='\$LABEL' -- ...[<value> <label>]
			^ the value is eval'd

			If you wish to return the visual use:
			--label --return='\$VISUAL' -- ...[<value> <label>]
			^ the value is eval'd
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local items=() values=() labels=() visuals=() defaults=() tmp=()
	local option_question='' option_filter='' option_timeout=''
	# trunk-ignore(shellcheck/SC2016)
	local option_visual='' option_return='$VALUE'
	# label can be 'yes', 'no', and 'first'
	local option_label='no'
	local option_hints='yes' option_multi='no' option_required='no' option_confirm='no' use_colors
	use_colors="$(echo-color-enabled --fallback=yes -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-color'* | '--color'*) ;; # handled by echo-color-enabled
		'--question='*) option_question="${item#*=}" ;;
		'--default='*) defaults+=("${item#*=}") ;;
		'--defaults='*)
			mapfile -t tmp <<<"${item#*=}"
			defaults+=("${tmp[@]}")
			;;
		'--filter='*) option_filter="${item#*=}" ;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--visual='*) option_visual="${item#*=}" ;;
		'--return='*) option_return="${item#*=}" ;;
		'--no-hints'* | '--hints'*)
			option_hints="$(get-flag-value --affirmative --fallback="$option_hints" -- "$item")"
			;;
		'--no-label'* | '--label'*)
			option_label="$(get-flag-value --fallback="$option_label" -- "$item")"
			;;
		'--no-multi'* | '--multi'*)
			option_multi="$(get-flag-value --affirmative --fallback="$option_multi" -- "$item")"
			;;
		'--no-required'* | '--required'*)
			option_required="$(get-flag-value --affirmative --fallback="$option_required" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value --affirmative --fallback="$option_confirm" -- "$item")"
			;;
		'--')
			items+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# calculate item step size
	local items_step=1
	if test "$option_label" != 'no'; then
		items_step=2
	fi

	# check user configuration has no mistakes
	if test "${#items[@]}" -eq 0; then
		help 'No <value>s provided.'
	elif is-array-partial -- "${items[@]}"; then
		help 'Invalid <value>s provided:' $'\n' "$(echo-verbose -- "${items[@]}")"
	fi
	if test "$option_label" != 'no' && is-odd -- "${#items[@]}"; then
		{
			echo-style --colors="$use_colors" --error="The amount of <label>s must match the amount of <value>s. See [$0 --help] for usage."
			echo-style --colors="$use_colors" --bold='Make the below provide an even amount of items, to ensure there is a label for each option.'
			echo-verbose -- "${items[@]}"
		} >/dev/stderr
		return 22 # EINVAL 22 Invalid argument
	fi

	# iterate our items
	# value and label are accessible via the eval
	local index visual VALUE LABEL
	for ((index = 0; index < ${#items[@]}; index = index + items_step)); do
		# order of
		if test "$option_label" = 'no'; then
			VALUE="${items[index]}"
			LABEL="${items[index]}"
		elif test "$option_label" = 'yes'; then
			VALUE="${items[index]}"
			LABEL="${items[index + 1]}"
		elif test "$option_label" = 'first'; then
			VALUE="${items[index + 1]}"
			LABEL="${items[index]}"
		else
			echo-style --colors="$use_colors" --error="bad configuration: the --label value is invalid: [$option_label]" >/dev/stderr
			sleep 5
			return 1
		fi

		# check both exist
		if test -z "$LABEL" -o -z "$VALUE"; then
			echo-style --colors="$use_colors" --error="bad configuration: both label [$LABEL] and value [$VALUE] must exist" >/dev/stderr
			sleep 5
			return 1
		fi

		# add to the list
		if test -n "$option_visual"; then
			eval "visual=\"$option_visual\""
		else
			visual="$LABEL"
		fi

		# add to the list
		visuals+=("$visual")
		labels+=("$LABEL")
		values+=("$VALUE")
	done

	# sanity checks
	if test "${#labels[@]}" -ne "${#values[@]}" -o "${#values[@]}" -ne "${#visuals[@]}"; then
		{
			echo-style --colors="$use_colors" --error='bad state: there must be the same amount of values, labels, and visuals:'
			echo-style --colors="$use_colors" --warning="labels:"
			echo-verbose -- "${labels[@]}"
			echo-style --colors="$use_colors" --warning="values:"
			echo-verbose -- "${values[@]}"
			echo-style --colors="$use_colors" --warning="visuals:"
			echo-verbose -- "${visuals[@]}"
		} >/dev/stderr
		sleep 5
		return 1
	fi
	if is-array-empty-or-partial -- "${labels[@]}"; then
		{
			echo-style --colors="$use_colors" --error='bad configuration: empty labels were provided:'
			echo-verbose -- "${labels[@]}"
		} >/dev/stderr
		sleep 5
		return 1
	fi
	if is-array-empty-or-partial -- "${values[@]}"; then
		{
			echo-style --colors="$use_colors" --error='bad configuration: empty values were provided:'
			echo-verbose -- "${values[@]}"
		} >/dev/stderr
		sleep 5
		return 1
	fi
	if is-array-empty-or-partial -- "${visuals[@]}"; then
		{
			echo-style --colors="$use_colors" --error='bad configuration: empty visuals were provided:'
			echo-verbose -- "${values[@]}"
		} >/dev/stderr
		sleep 5
		return 1
	fi

	# helpers
	local saved_results=() saved_visuals=()
	function save_result {
		local VALUE="$1" LABEL="$2" VISUAL="$3"
		local result=''
		eval "result=\"$option_return\""
		saved_visuals+=("$VISUAL")
		saved_results+=("$result")
	}
	function reset_results {
		saved_visuals=()
		saved_results=()
	}
	function save_defaults {
		local i value label visual default
		if test "${#defaults[@]}" -ne 0; then
			for i in "${!values[@]}"; do
				value="${values[i]}"
				label="${labels[i]}"
				visual="${visuals[i]}"
				for default in "${defaults[@]}"; do
					if test "$default" = "$value"; then
						save_result "$value" "$label" "$visual"
						break
					fi
				done
			done
		fi
	}
	function act {
		local i option_status menu_status value label visual results confirm_visual
		local filtered_values=()
		local filtered_labels=()
		local filtered_visuals=()
		local exact_values=()
		local exact_labels=()
		local exact_visuals=()
		local unfiltered_index=''
		local action='' # send, confirm, select
		local menu_options menu_item
		reset_results
		save_defaults

		# filter if necessary
		if test -z "$option_filter"; then
			# select from everything and continue
			filtered_values=("${values[@]}")
			filtered_labels=("${labels[@]}")
			filtered_visuals=("${visuals[@]}")
		else
			for i in "${!values[@]}"; do
				value="${values[i]}"
				label="${labels[i]}"
				visual="${visuals[i]}"
				# compare their lowercase forms
				if [[ "$(lowercase_string "$label")" == *"$(lowercase_string "$option_filter")"* ]] || [[ "$(lowercase_string "$value")" == *"$(lowercase_string "$option_filter")"* ]]; then
					# there was a partial match, add it
					filtered_values+=("$value")
					filtered_labels+=("$label")
					filtered_visuals+=("$visual")
					# check if it was also a complete match
					if test "$label" = "$option_filter" -o "$value" = "$option_filter"; then
						exact_values+=("$value")
						exact_labels+=("$label")
						exact_visuals+=("$visual")
					fi
				fi
				# else no match, so do not add
			done
		fi

		# if we have only one exact match, use it, unless requested confirmation
		if test "${#exact_values[@]}" -eq 1; then
			reset_results
			save_result "${exact_values[0]}" "${exact_labels[0]}" "${exact_visuals[0]}"
			if test "${#values[@]}" -eq 1 -a "$option_confirm" = 'no'; then
				# no alternatives, the exact match is the only option
				action='send'
			elif test "$option_confirm" = 'yes'; then
				# there are alternatives, and confirmation was requested
				action='confirm'
			else
				# there are alternatives, and confirmation was not requested
				action='send'
			fi
		# if we have multiple exact matches, require selection of them
		elif test "${#exact_values[@]}" -gt 1; then
			if test "$option_multi" = 'yes'; then
				# allow multiple selections, in which case confirm exact matches
				reset_results
				save_result "${exact_values[$i]}" "${exact_labels[$i]}" "${exact_visuals[$i]}"
				action='confirm'
				option_filter=''
			else
				# only allow a single selection, yet there were many exact matches
				# so select which one to use
				filtered_values=("${exact_values[@]}")
				filtered_labels=("${exact_labels[@]}")
				filtered_visuals=("${exact_visuals[@]}")
				action='select'
				option_filter=''
			fi
		# if we have only one partial match, require confirmation
		elif test "${#filtered_values[@]}" -eq 1; then
			reset_results
			save_result "${filtered_values[0]}" "${filtered_labels[0]}" "${filtered_visuals[0]}"
			if test "${#values[@]}" -eq 1 -a "$option_confirm" = 'no'; then # confirm check is necessary for [get-devices --select], [btrfs-helper add]
				# no alternatives, the partial match is the only option
				action='send'
			else
				# there are alternatives
				action='confirm'
			fi
		# if we have multiple partial matches, require selection
		elif test "${#filtered_values[@]}" -gt 1; then
			action='select'
		else
			# no filtered results were provided
			if test -n "$option_filter"; then
				# if there was meant to be results, then prompt a notice
				echo-style --colors="$use_colors" --notice="Filter [$option_filter] returned no results, providing you all the results to select from..." >/dev/stderr
				sleep 5
			fi
			# select from everything and continue
			filtered_values=("${values[@]}")
			filtered_labels=("${labels[@]}")
			filtered_visuals=("${visuals[@]}")
			action='select'
			option_filter=''
		fi

		# action: confirm saved results
		if test "$action" = 'confirm'; then
			# timeout of one minute for confirms of existing values
			confirm_visual="$(print_string "${saved_visuals[@]}")"
			eval_capture --statusvar=option_status --stdoutvar=confirmed -- \
				choose-menu \
				--timeout=60 \
				--required="$option_required" \
				--question="$option_question" \
				--no-hints -- \
				"Use: $confirm_visual" \
				"Select something else."

			# check
			if test "$option_status" -ne 0; then
				echo-style --colors="$use_colors" --notice="Timed out, using fallback: $confirm_visual" >/dev/stderr
				sleep 5
			fi

			# results
			if test "$confirmed" = '1'; then
				# select from everything and continue
				filtered_values=("${values[@]}")
				filtered_labels=("${labels[@]}")
				filtered_visuals=("${visuals[@]}")
				action='select'
				option_filter=''
			else
				action='send'
			fi
		fi

		# action: select from filtered results
		if test "$action" = 'select'; then
			if test "${#filtered_visuals[@]}" -ne "${#visuals[@]}"; then
				unfiltered_index="${#filtered_visuals[@]}"
				filtered_visuals+=("Select this to see the $(("${#visuals[@]}" - "${#filtered_visuals[@]}")) unfiltered options.")
			fi

			# trigger the menu, and add each default individually, supporting multi-line visuals
			menu_options=(
				--hints="$option_hints"
				--colors="$use_colors"
				--question="$option_question"
				--multi="$option_multi"
				--required="$option_required"
				--timeout="$option_timeout"
			)
			if test "${#saved_visuals[@]}" -ne 0; then # bash v3 compat
				for menu_item in "${saved_visuals[@]}"; do
					menu_options+=("--default=$menu_item")
				done
			fi
			eval_capture --statusvar=menu_status --stdoutvar=results -- \
				choose-menu "${menu_options[@]}" -- "${filtered_visuals[@]}"

			# check timeout
			if test "$menu_status" -eq 60; then
				if test -z "$results"; then
					if test "$option_required" = 'no'; then
						echo-style --colors="$use_colors" --notice="Menu timed out [$menu_status], no result, not required." >/dev/stderr
						return 0
					else
						echo-style --colors="$use_colors" --warning="Menu timed out [$menu_status], no result, is required." >/dev/stderr
						sleep 3
						return "$menu_status"
					fi
				fi
			# check failure
			elif test "$menu_status" -ne 0; then
				echo-style --colors="$use_colors" --error="Menu failed [$menu_status]." >/dev/stderr
				sleep 5
				return "$menu_status"
			# check empty
			elif test -z "$results"; then
				# check if empty is permissable
				if test "$option_required" = 'no'; then
					return 0
				else
					# option was required, fail
					echo-style --colors="$use_colors" --error='No result, is required.' >/dev/stderr
					sleep 3
					return 5 # EIO 5 Input/output error
				fi
			fi

			# results
			local unfilter='no'
			reset_results
			mapfile -t results <<<"$results"
			if test "${#results[@]}" -ne 0; then # bash v3 compat
				for i in "${results[@]}"; do
					if test -n "$unfiltered_index" -a "$i" = "$unfiltered_index"; then
						unfilter='yes'
						continue
					else
						save_result "${filtered_values[i]}" "${filtered_labels[i]}" "${filtered_visuals[i]}"
					fi
				done
			fi
			if test "$unfilter" = 'yes'; then
				option_filter=''
				act
				return
			else
				action='send'
			fi
		fi

		# send the saved results
		if test "$action" = 'send'; then
			print_lines "${saved_results[@]}"
		else
			echo-style --colors="$use_colors" --error="Invalid action at this stage: $action" >/dev/stderr
			return 1
		fi
	}

	# do the action
	act
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		choose_option_test
	else
		choose_option "$@"
	fi
fi
