#!/usr/bin/env bash

# NOTES
# Do not do .insteadof changes, as it messages with our git-helper commands
# https://hub.github.com/hub.1.html
# https://stackoverflow.com/a/22027731/130638

# TODO
# Update for these:
# https://unix.stackexchange.com/a/177310/50703
# https://unix.stackexchange.com/a/552708/50703
# https://security.stackexchange.com/a/129477/110805
# https://security.stackexchange.com/a/243798/110805
# Note that edit-key and delete require no-tty to be removed from gpg.conf

function setup_git() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Configures git, gpg, and ssh for your preferences and for the system capabilities.

			USAGE:
			setup-git [...options]

			OPTIONS:
			--configure
			    Configuration guide.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_configure='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-configure'* | '--configure'*)
			option_configure="$(get-flag-value --affirmative --fallback="$option_configure" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Prepare

	echo-segment --h1='Setup Git'

	# dependencies
	echo-segment --h2='Install Git'
	setup-util-git
	echo-segment --g2='Install Git'

	# vars
	local protocol_options=(
		ssh
		https
	)
	local tool_options=()
	if command-exists meld; then
		tool_options+=(meld)
	fi
	if command-exists delta; then
		tool_options+=(delta)
	fi
	if command-exists opendiff; then
		tool_options+=(opendiff)
	fi
	if command-exists diff; then
		tool_options+=(diff)
	fi

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# git.bash provides:
	local GIT_DEFAULT_BRANCH='main'
	local GIT_PROTOCOL='' # 'https', or 'ssh'
	local GIT_NAME=''
	local GIT_EMAIL=''
	local MERGE_TOOL=''
	local GITHUB_USERNAME=''
	local GITLAB_USERNAME=''
	local GPG_SIGNING_KEY='' # use 'krypton' for Krypt.co
	local KRYPTON_GPG=''     # deprecated, use GPG_SIGNING_KEY=krypton
	local HUB_PROTOCOL=''    # deprecated, replaced by GIT_PROTOCOL
	load_dorothy_config 'git.bash'

	# handle deprecations
	if test "$KRYPTON_GPG" = 'yes'; then
		GPG_SIGNING_KEY='krypton'
		dorothy-config 'git.bash' -- \
			--field='KRYPTON_GPG' --replace= \
			--field='GPG_SIGNING_KEY' --value='krypton'
	fi
	if test -z "$GIT_PROTOCOL" -a -n "$HUB_PROTOCOL"; then
		GIT_PROTOCOL="$HUB_PROTOCOL"
		dorothy-config 'git.bash' -- \
			--field='HUB_PROTOCOL' --replace= \
			--field='GIT_PROTOCOL' --value="$HUB_PROTOCOL"
	fi

	# =====================================
	# Reconfiguration

	# optional:
	# GITHUB_USERNAME
	# GITLAB_USERNAME

	# required
	if test -z "$GIT_NAME" -o -z "$GIT_EMAIL" -o -z "$GIT_DEFAULT_BRANCH"; then
		option_configure='yes'
	fi
	if ! is-needle --needle="$GIT_PROTOCOL" -- "${protocol_options[@]}"; then
		option_configure='yes'
	fi
	if ! is-needle --needle="$MERGE_TOOL" -- "${tool_options[@]}"; then
		option_configure='yes'
	fi

	# configure
	if test "$option_configure" = 'yes'; then
		# required
		GIT_NAME="$(
			ask --required --confirm \
				--question="What is the name that you want to configure git with?" \
				--default="${GIT_NAME:-"$(get-profile name -- git ... || :)"}"
		)"
		GIT_EMAIL="$(
			ask --required --confirm \
				--question="What is the email that you want to configure git with?" \
				--default="${GIT_EMAIL:-"$(get-profile email -- git ... || :)"}"
		)"
		# optional
		GITHUB_USERNAME="$(
			ask --confirm \
				--question="What is the GitHub username that you want to configure git with?" \
				--default="${GITHUB_USERNAME:-"$(get-profile username -- git ... || :)"}"
		)"
		GITLAB_USERNAME="$(
			ask --confirm \
				--question="What is the GitLab username that you want to configure git with?" \
				--default="${GITLAB_USERNAME:-"$(get-profile username -- git ... || :)"}"
		)"
		# required
		GIT_PROTOCOL="$(
			choose-option --required --confirm \
				--question='Which git protocol to prefer?' \
				--filter="$GIT_PROTOCOL" -- "${protocol_options[@]}"
		)"
		MERGE_TOOL="$(
			choose-option --required --confirm \
				--question='Which merge/diff tool to prefer?' \
				--filter="$MERGE_TOOL" -- "${tool_options[@]}"
		)"
		GIT_DEFAULT_BRANCH="$(
			ask --required --confirm \
				--question='Which branch to use as the default for new repositories?' \
				--default="$GIT_DEFAULT_BRANCH"
		)"

		# prefer 1password
		if command-exists op-ssh-sign; then
			if test "$GPG_SIGNING_KEY" != 'op'; then
				if confirm --positive --ppid=$$ -- '1Password SSH Signing Agent is available for GPG, use it?'; then
					GPG_SIGNING_KEY='op'
				fi
			fi
		else
			if test "$GPG_SIGNING_KEY" = 'op'; then
				cat <<-EOF >/dev/stderr
					$(echo-style --e2="Git Configuration: Signing: 1Password")
					GPG using 1Password was desired, however 1Password does not appear to be installed on this system. Install it first via:
					$(echo-style --code_notice='setup-util-1password')
					$(echo-style --code_notice='setup-util-1password-cli')
					Will continue without this.
				EOF
				GPG_SIGNING_KEY=''
			fi
		fi
		if command-exists krgpg; then
			if test "$GPG_SIGNING_KEY" != 'krypton'; then
				if confirm --positive --ppid=$$ -- 'Krypton is available for GPG, use it?'; then
					GPG_SIGNING_KEY='krypton'
				fi
			fi
		else
			if test "$GPG_SIGNING_KEY" = 'krypton'; then
				cat <<-EOF >/dev/stderr
					$(echo-style --e2="Git Configuration: Signing: Krypton")
					GPG using Krypton was desired, however Krypton does not appear to be installed on this system. Install it first. Will continue without this.
				EOF
				GPG_SIGNING_KEY=''
			fi
		fi
		if test "$GPG_SIGNING_KEY" != 'op' && "$GPG_SIGNING_KEY" != 'krypton'; then
			# 2>/dev/null || : in case there are no gpg keys
			GPG_SIGNING_KEY="$(gpg-helper get private 2>/dev/null || :)"
		fi

		# save
		dorothy-config 'git.bash' --prefer=local -- \
			--field='GIT_DEFAULT_BRANCH' --value="$GIT_DEFAULT_BRANCH" \
			--field='GIT_EMAIL' --value="$GIT_EMAIL" \
			--field='GIT_NAME' --value="$GIT_NAME" \
			--field='GIT_PROTOCOL' --value="$GIT_PROTOCOL" \
			--field='GITHUB_USERNAME' --value="$GITHUB_USERNAME" \
			--field='GITLAB_USERNAME' --value="$GITLAB_USERNAME" \
			--field='GPG_SIGNING_KEY' --value="$GPG_SIGNING_KEY" \
			--field='MERGE_TOOL' --value="$MERGE_TOOL"
	fi

	# =====================================
	# Apply Configuration

	# General
	echo-style --h2='Git Configuration: General'
	git config --global core.excludesfile "$HOME/.gitignore_global"
	git config --global push.default simple
	git config --global mergetool.keepBackup false
	git config --global color.ui auto
	if test -n "$GIT_DEFAULT_BRANCH"; then
		git config --global init.defaultBranch "$GIT_DEFAULT_BRANCH"
	fi

	# Profile
	echo-style --h2='Git Configuration: Profile'
	git config --global user.name "$GIT_NAME"
	git config --global user.email "$GIT_EMAIL"
	git config --global git.protocol "$GIT_PROTOCOL"

	# Authorizations
	echo-style --h2='Git Configuration: Auth'
	if test -n "$GITHUB_USERNAME"; then
		git config --global github.user "$GITHUB_USERNAME"
	else
		git config --global --unset github.user || : # will fail if already unset
	fi
	if test -n "$GITLAB_USERNAME"; then
		git config --global gitlab.user "$GITLAB_USERNAME"
	else
		git config --global --unset gitlab.user || : # will fail if already unset
	fi

	# Merge Tool
	echo-style --h2="Git Configuration: Merge/Diff Tool: $MERGE_TOOL"
	git config --global diff.tool "$MERGE_TOOL"
	git config --global merge.tool "$MERGE_TOOL"

	# Editor
	local editor
	editor="$(edit --dry --wait || :)"
	if test -n "$editor"; then
		echo-style --h2="Git Configuration: Editor: $editor"
		git config --global core.editor "$editor"
	fi

	# Authentication
	# Use MacOS Credential Helper if available, otherwise default to time cache
	if is-mac; then
		echo-style --h2="Git Configuration: MacOS Credentials"
		git config --global credential.helper osxkeychain
		git config --global difftool.prompt false
	else
		echo-style --h2="Git Configuration: Linux Credentials"
		git config --global credential.helper 'cache --timeout=86400'
	fi

	# =====================================
	# GPG

	# https://gist.github.com/troyfontaine/18c9146295168ee9ca2b30c00bd1b41e

	function sign_enable {
		# Enable Signing for Git
		git config --global tag.gpgsign true
		git config --global commit.gpgsign true

		# git config --global push.gpgsign true
		# ^ github doesnâ€™t support this with:
		#   fatal: receiving end does not support --signed push
		#   fatal: the receiving end does not support --signed push

		# done
		echo-style --h2="Git Configuration: Signing: Enabled"
	}
	function sign_check_key {
		# Check we have a key
		if test -z "$key"; then
			cat <<-EOF >/dev/stderr
				$(echo-style --e2="Git Configuration: Signing:")
				Signing was desired, however there was no key specified.
				$(echo-style --notice='Run the' ' ' --code_notice='setup-git --configure' ' ' --notice='to configure.')
			EOF
			return 29 # ESPIPE 29 Illegal seek
		fi

		# Check the key exists
		if test ! -f "$key"; then
			cat <<-EOF >/dev/stderr
				$(echo-style --e2="Git Configuration: Signing:")
				Signing was desired, however the key does not exist: $key
				$(echo-style --notice='Run the' ' ' --code_notice='setup-git --configure' ' ' --notice='to configure.')
			EOF
			return 29 # ESPIPE 29 Illegal seek
		fi
	}
	function sign_disable {
		# Disable Signing for Git
		git config --global --unset gpg.format || :
		git config --global --unset gpg.program || :
		git config --global --unset gpg.ssh.program || :
		git config --global --unset tag.gpgsign || :
		git config --global --unset commit.gpgsign || :
		git config --global --unset user.signingkey || :
		echo-style --h2="Git Configuration: Signing: Disabled"
	}
	function sign_krypton {
		# Use Krypton for Signing
		setup-util-krypton
		kr pair # krgpg and kr are both installed above
		# configure git for krypton
		git config --global gpg.program "$(type -P krgpg)"
		git config --global --unset user.signingkey || :
		echo-style --h2="Git Configuration: Kypton: Enabled"
	}
	function sign_gnu {
		# Use GnuPG (GPG) Key for Signing
		local key="${1-}"
		sign_check_key "$key"

		# key
		echo-style --h2="Git Configuration: Signing: GPG Key: $key"
		git config --using GnuPGlobal gpg.program "$(type -P gpg)"
		git config --global user.signingkey "$key"

		# configure
		gpg-helper configure
	}
	function sign_ssh {
		# Use SSH Key for Signing
		local key="${1-}"
		sign_check_key "$key"

		# key
		echo-style --h2="Git Configuration: Signing: SSH Key: $key"
		git config --global gpg.format ssh
		git config --global user.signingkey "$key"
	}
	function sign_op {
		# Use 1Password SSH Signing for GPG
		local op_pub=''
		op_pub="$(ssh-helper export --raw || :)"
		if command-exists op-ssh-sign; then
			if test -n "$op_pub"; then
				git config --global gpg.format ssh
				git config --global user.signingkey "$op_pub"
				git config --global gpg.ssh.program "$(type -P op-ssh-sign)"
				cat <<-EOF
					$(echo-style --h2="Git Configuration: Signing: 1Password")
					Make sure you add the following public key as your SSH signing key on:
					https://github.com/settings/ssh/new

					$(echo-style --code="$op_pub")
				EOF
			else
				cat <<-EOF >/dev/stderr
					$(echo-style --e2="Git Configuration: Signing: 1Password")
					GPG using 1Password was desired, however was unable to find a public key.
				EOF
				return 1
			fi
		else
			cat <<-EOF >/dev/stderr
				$(echo-style --e2="Git Configuration: Signing: 1Password")
				GPG using 1Password was desired, however 1Password does not appear to be installed on this system. Install it first via:

					$(echo-style --code="setup-util-1password")
					$(echo-style --code="setup-util-1password-cli")

			EOF
			return 1
		fi
	}
	function sign_setup {
		echo-style --h2="Git Configuration: Signing"

		# adjust
		if test "$GPG_SIGNING_KEY" = 'op'; then
			sign_op
		elif test "$GPG_SIGNING_KEY" = 'krypton'; then
			sign_krypton
		elif [[ $GPG_SIGNING_KEY == *".ssh"* ]]; then
			sign_ssh "$GPG_SIGNING_KEY"
		else
			sign_gnu "$GPG_SIGNING_KEY"
		fi
	}
	function sign_setup_and_enable {
		local setup_status enable_status
		eval_capture --statusvar=setup_status -- sign_setup
		if test "$setup_status" -eq 0; then
			eval_capture --statusvar=enable_status -- sign_enable
			return "$enable_status"
		else
			return "$setup_status"
		fi
	}

	# act
	local setup_and_enable_status
	if command-exists gpg; then
		eval_capture --statusvar=setup_and_enable_status -- sign_setup_and_enable
		if test "$setup_and_enable_status" -ne 0; then
			sign_disable
		fi
	fi

	# =====================================
	# Security

	echo-style --h2="Git Configuration: Permissions"
	ssh-helper permissions
	gpg-helper permissions

	# =====================================
	# SSH

	ssh-helper configure

	# =====================================
	# Authenticate with CLIs

	# Must be done here, as they depend on git and ssh being correctly configured
	if test -n "$GITHUB_USERNAME"; then
		setup-util-gh --optional
	fi

	# =====================================
	# Configure protocols now that ssh is setup

	echo-style --h2="Git Configuration: Protocol: $GIT_PROTOCOL"
	if test "$GIT_PROTOCOL" = 'ssh' && ! ssh-helper test; then
		echo-style --notice="SSH failed, temporarily configuring for HTTPS"
		GIT_PROTOCOL='https'
	fi
	git config --global git.protocol "$GIT_PROTOCOL"
	if command-exists hub; then
		git config --global hub.protocol "$GIT_PROTOCOL"
	else
		git config --global --unset hub.protocol || :
	fi
	if command-exists gh; then
		gh config set git_protocol "$GIT_PROTOCOL" || : # can fail
	fi

	# if test -n "$GITLAB_USERNAME"; then
	# glab writes to stderr, grep needed as return status is not indicative
	# wrap in `! (` is to catch failures in the grep, and in the glab call
	# setup-util-glab--optional # only install if gitlab is configured
	# if ! (glab auth status |& grep --quiet --fixed-strings --regexp='Logged in to '); then
	# 	glab auth login
	# fi
	# ^ currently broken
	# > glab auth login
	# failed to read configuration:  open /home/ubuntu/.config/glab-cli/.config.yml2800055398: permission denied
	# fi

	# =====================================
	# Done

	echo-segment --g1='Setup Git'
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_git "$@"
fi
