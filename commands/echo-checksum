#!/usr/bin/env bash

function echo_checksum() (
	source "$DOROTHY/sources/stdinargs.bash"

	function do_md5 {
		if command-exists md5sum; then
			md5sum | cut -f1 -d ' '
		elif command-exists md5; then
			md5 -q
		elif get-installer --first-success --invoke --quiet -- md5 md5sum; then
			do_md5
		else
			echo-error 'Unable to find a suitable tool for md5 algorithm.'
			return 1
		fi
	}
	function do_blake2b512 {
		if command-exists b2sum; then
			b2sum | cut -f1 -d ' '
		elif get-installer --first-success --invoke --quiet -- b2sum; then
			do_blake2b512
		else
			echo-error 'Unable to find a suitable tool for blake2b512 algorithm.'
			return 1
		fi
	}
	function do_sha160 {
		if command-exists shasum; then
			shasum --algorithm 1 | cut -f1 -d ' '
		elif command-exists sha1sum; then
			sha1sum | cut -f1 -d ' '
		elif get-installer --first-success --invoke --quiet -- shasum sha1sum; then
			do_sha160
		else
			echo-error 'Unable to find a suitable tool for sha160 algorithm.'
			return 1
		fi
	}
	function do_sha224 {
		if command-exists shasum; then
			shasum --algorithm 224 | cut -f1 -d ' '
		elif command-exists sha224sum; then
			sha224sum | cut -f1 -d ' '
		elif get-installer --first-success --invoke --quiet -- shasum sha224; then
			do_sha224
		else
			echo-error 'Unable to find a suitable tool for sha224 algorithm.'
			return 1
		fi
	}
	function do_sha256 {
		if command-exists shasum; then
			shasum --algorithm 256 | cut -f1 -d ' '
		elif command-exists sha256sum; then
			sha256sum | cut -f1 -d ' '
		elif get-installer --first-success --invoke --quiet -- shasum sha256; then
			do_sha256
		else
			echo-error 'Unable to find a suitable tool for sha256 algorithm.'
			return 1
		fi
	}
	function do_sha384 {
		if command-exists shasum; then
			shasum --algorithm 384 | cut -f1 -d ' '
		elif command-exists sha384sum; then
			sha384sum | cut -f1 -d ' '
		elif get-installer --first-success --invoke --quiet -- shasum sha384; then
			do_sha384
		else
			echo-error 'Unable to find a suitable tool for sha384 algorithm.'
			return 1
		fi
	}
	function do_sha512 {
		if command-exists shasum; then
			shasum --algorithm 512 | cut -f1 -d ' '
		elif command-exists sha512sum; then
			sha512sum | cut -f1 -d ' '
		elif get-installer --first-success --invoke --quiet -- shasum sha512; then
			do_sha512
		else
			echo-error 'Unable to find a suitable tool for sha512 algorithm.'
			return 1
		fi
	}
	function do_sha512224 {
		if command-exists shasum; then
			shasum --algorithm 512224 | cut -f1 -d ' '
		elif get-installer --first-success --invoke --quiet -- shasum; then
			do_sha512224
		else
			echo-error 'Unable to find a suitable tool for sha512224 algorithm.'
			return 1
		fi
	}
	function do_sha512256 {
		if command-exists shasum; then
			shasum --algorithm 512256 | cut -f1 -d ' '
		elif get-installer --first-success --invoke --quiet -- shasum; then
			do_sha512256
		else
			echo-error 'Unable to find a suitable tool for sha512256 algorithm.'
			return 1
		fi
	}
	local algorithms=(
		md5
		blake2b512
		sha160
		sha224
		sha256
		sha384
		sha512
		sha512224
		sha512256
	)

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checksum each <input> string.
			To checksum files or directories, use [checksum] instead.

			USAGE:
			echo-checksum [...options] [--] ...<input>
			echo-lines ...<input> | echo-checksum [...options]

			OPTIONS:
			--algorithm=<algorithm>
			    Forces a specific algorithm to be used.

			$(stdinargs_options_help --)

			ALGORITHMS:
			Algorithms that you can use:
			$(echo-lines --indent='    ' -- "${algorithms[@]}")

			EXAMPLE:

			echo-checksum -- 'hello' 'world'

				b1946ac92492d2347c6235b4d2611184
				591785b794601e212b260e25925636fd
				# exit status: 0

			echo-lines -- 'hello' 'world' | echo-checksum --stdin

				5891b5b522d5df086d0ff0b110fbd9d21bb4fc7163af34d08286a2e846f6be03
				e258d248fda94c63753607f7c4494ee0fcbe92f1a76bfdac795c9d84101eb317
				# exit status: 0
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_algorithm='' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--algorithm='*) option_algorithm="${item#*=}" ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*) option_args+=("$item") ;;
		esac
	done

	# ensure algorithm
	if test -z "$option_algorithm"; then
		# ensure default
		option_algorithm="${algorithms[0]}"
	else
		# ensure valid algorithm
		option_algorithm="$(
			choose-option --required \
				--question='Which checksum algorithm do you wish to use?' \
				--filter="$option_algorithm" -- "${algorithms[@]}"
		)"
	fi

	# confirm algorithm
	if test "$(type -t "do_$option_algorithm")" != 'function'; then
		help "Unrecognised tool: $tool"
	fi

	# =====================================
	# Action

	# alpine md5sum does not support stdin:
	# Usage: md5sum [-c[sw]] [FILE]...
	# Print or check MD5 checksums
	# 	-c	Check sums against list in FILEs
	# 	-s	Don't output anything, status code shows success
	# 	-w	Warn about improperly formatted checksum lines

	function on_line {
		"do_$option_algorithm" <<<"$1"
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_checksum "$@"
fi
