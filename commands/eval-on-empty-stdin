#!/usr/bin/env bash

function eval_on_empty_stdin() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Execute the <command> if stdin is empty; stdin content will continue to be directed to stdout.
			Companion to [eval-on-not-empty-stdin].

			USAGE:
			eval-on-empty-stdin [--] ...<command>
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_cmd=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_cmd+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			option_cmd+=("$item" "$@")
			shift $#
			break
			;;
		esac
	done

	# checks
	if [[ ${#option_cmd[@]} -eq 0 ]]; then
		help "No <command> was provided."
	fi

	# =====================================
	# Action

	# test cases:
	# echo sup | ( eval-on-empty-stdin echo no )
	# true | ( eval-on-empty-stdin echo no )
	# true | ( eval-on-empty-stdin cat )

	# doesn't work: read -r
	# doesn't work: [[ -t 0 ]]
	# doesn't work: read -t 0 -N 0

	# works:
	if __command_exists -- ifne; then
		ifne -n "${option_cmd[@]}"
		return
	else
		# grep is essential for dorothy, so this is a safe fallback
		if ! grep --regexp='^'; then
			"${option_cmd[@]}" # eval
			return
		fi
		return 0
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	eval_on_empty_stdin "$@"
fi
