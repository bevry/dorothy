#!/usr/bin/env bash

function fs_rm() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Remove the paths from the file system, with some safety checks in place.

			USAGE:
			fs-rm [...options] [--] ...<path>

			OPTIONS:
			--quiet
			    If specified, only output errors or when user intervention is required.

			--optional
			    If specified, doesn't fail if no <path>s were provided.

			--no-confirm
			    If specified, skip confirms.

			--sudo
			    If specified, use sudo when removing the files.

			--trash
			    If specified, move the file to trash instead of deleting it immediately.

			--user=<user>
			--group=<group>
			    If specified run the removal commands as this <user> and <group>.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='no' option_paths=() option_optional='no' option_confirm='yes' option_sudo='no' option_trash='no' option_user='' option_group=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-optional'* | '--optional'*)
			option_optional="$(get-flag-value --affirmative --fallback="$option_optional" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value --affirmative --fallback="$option_confirm" -- "$item")"
			;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--no-trash'* | '--trash'*)
			option_trash="$(get-flag-value --affirmative --fallback="$option_trash" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		if [[ $option_optional == 'yes' ]]; then
			return 0
		else
			help 'No <path>s provided.'
		fi
	fi

	# =====================================
	# Dependencies

	if [[ $option_trash == 'yes' ]]; then
		setup-util-trash --quiet --optional --no-fallback
		if __command_missing -- trash; then
			echo-style --dim='Moving to trash is not available, falling back to immediate deletion for: ' --code="${option_paths[*]}" >/dev/stderr
			option_trash='no'
		fi
	fi

	# =====================================
	# Action

	function eval_wrapper {
		while [[ $1 == '--' ]]; do
			shift
		done
		if [[ $option_sudo == 'yes' || -n $option_user || -n $option_group ]]; then
			sudo-helper --no-wrap="$option_quiet" --quiet="$option_quiet" --inherit --user="$option_user" --group="$option_group" \
				-- "$@"
		else
			eval-helper --no-wrap="$option_quiet" --quiet="$option_quiet" \
				-- "$@"
		fi
	}

	function do_confirm_trim {
		local path="$1"

		# if not a directory, we don't want to trim
		if is-not-directory --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
			return 200 # ECUSTOM 200 Not applicable
		fi

		# if preconfirmed, skip the prompt
		if [[ $option_confirm == 'no' ]]; then
			return 0
		fi

		# if it is purely empty, skip the prompt
		if is-empty-ls --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
			return 0
		fi

		# note its structure and size
		eval_wrapper -- ls -la "$path"

		# confirm removal
		confirm --positive --ppid=$$ -- "$(
			echo-style --notice='Trim empty directories?' --bold=" $path " --notice="?"
		)"
	}
	function do_confirm_removal {
		local path="$1"

		# if preconfirmed, skip the prompt
		if [[ $option_confirm == 'no' ]]; then
			return 0
		fi

		# we want to prompt
		eval_wrapper -- ls -la "$path"

		# is a directory, so output extra information
		if [[ -d $path ]]; then
			if __command_exists -- dust; then
				eval_wrapper -- dust --no-percent-bars "$path"
				eval_wrapper -- dust --no-percent-bars --filecount "$path"
			elif __command_exists -- du; then
				eval_wrapper -- du -ahd1 "$path"
			fi
		fi

		# confirm removal
		confirm --positive --ppid=$$ -- "$(
			echo-style --warning='Confirm removal of non-empty' --bold=" $path " --warning="?"
		)"
	}

	local CONCLUSION=''
	function do_rm {
		local path="$1" confirm_trim_status confirm_removal_status

		# is the path missing
		if is-missing --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
			CONCLUSION="$(
				echo-style --green="was previously removed."
			)"
			return 0
		fi
		# path exists

		# delete empty directories
		eval_capture --statusvar=confirm_trim_status -- do_confirm_trim "$path"
		if [[ $confirm_trim_status -eq 0 ]]; then
			# ignore stderr and do not wrap to prevent illogical cannot restore directory errors
			eval_capture --ignore-stderr -- eval_wrapper -- find "$path" -empty -type d -delete
			if is-missing --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
				CONCLUSION="$(
					echo-style --green="was only empty directories, it has been removed."
				)"
				return 0
			fi
		fi
		# there are leftovers

		# confirm and remove, or no confirm and remove
		eval_capture --statusvar=confirm_removal_status -- do_confirm_removal "$path"
		if [[ $confirm_removal_status -eq 0 ]]; then
			if [[ $option_trash == 'yes' ]]; then
				eval_capture -- eval_wrapper -- trash "$path"
			elif [[ $option_quiet == 'yes' ]]; then
				eval_capture -- eval_wrapper -- rm -rf "$path"
			else
				eval_capture -- eval_wrapper -- rm -rfv "$path"
			fi
		fi

		# detect successful removal
		if is-present --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
			CONCLUSION="$(
				echo-style --red="is non-empty, it has been kept."
			)"
			return 66 # ENOTEMPTY 66 Directory not empty
		fi

		# success if removed
		CONCLUSION="$(
			echo-style --green="was non-empty, it was manually removed."
		)"
	}

	function act {
		local path="$1" title rm_status
		if is-present --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
			path="$(fs-absolute --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path")"
		fi
		if [[ $option_quiet == 'yes' ]]; then
			do_rm "$path"
			return
		else
			title='fs-rm'
			if [[ $option_trash == 'yes' ]]; then
				title+=' --trash'
			fi
			if [[ $option_sudo == 'yes' ]]; then
				title+=' --sudo'
			fi
			if [[ $option_user == 'yes' ]]; then
				title+=" --user=$option_user"
			fi
			if [[ $option_group == 'yes' ]]; then
				title+=" --group=$option_group"
			fi
			title+=" $path"
			echo-style --h2="$title"
			eval_capture --statusvar=rm_status -- do_rm "$path"
			if [[ $rm_status -eq 0 ]]; then
				echo-style --g2="$title" " $CONCLUSION"
			else
				echo-style --e2="$title" " $CONCLUSION"
				return "$rm_status"
			fi
		fi
	}

	local path
	for path in "${option_paths[@]}"; do
		act "$path"
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	fs_rm "$@"
fi
