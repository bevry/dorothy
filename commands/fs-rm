#!/usr/bin/env bash

function fs_rm() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Remove the paths from the file system, with some safety checks in place.

			USAGE:
			fs-rm [...options] [--] ...<path>

			OPTIONS:
			--quiet
			    If specified, only output errors or when user intervention is required.

			--optional
			    If specified, doesn't fail if no <path>s were provided.

			--no-confirm
			    If specified, skip confirms.

			--sudo
			    If specified, use sudo when removing the files.

			--trash
			    If specified, move the file to trash instead of deleting it immediately.

			--user=<user>
			--group=<group>
			    If specified run the removal commands as this <user> and <group>.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='no' option_paths=() option_optional='no' option_confirm='yes' option_sudo='no' option_trash='' option_user='' option_group=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-optional'* | '--optional'*)
			option_optional="$(get-flag-value --affirmative --fallback="$option_optional" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value --affirmative --fallback="$option_confirm" -- "$item")"
			;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--no-trash'* | '--trash'*)
			option_trash="$(get-flag-value --affirmative --fallback="$option_trash" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		if [[ $option_optional == 'yes' ]]; then
			return 0
		else
			help 'No <path>s provided.'
		fi
	fi

	# =====================================
	# Dependencies

	local trash_and_delete_options=() trash_or_delete_default
	if [[ $option_sudo == 'yes' || -n $option_user || -n $option_group ]]; then
		if [[ $option_trash == 'yes' ]]; then
			echo-style --dim='Moving to trash is not supported for sudo, falling back to immediate deletion for: ' --code="${option_paths[*]}" >/dev/stderr
		fi
		option_trash='no'
	fi
	if [[ $option_trash != 'no' ]]; then
		setup-util-trash --quiet --optional --no-fallback
	fi
	if __command_missing -- trash; then
		if [[ $option_trash == 'yes' ]]; then
			echo-style --dim='Moving to trash is not available, falling back to immediate deletion for: ' --code="${option_paths[*]}" >/dev/stderr
		fi
		option_trash='no'
	fi
	if [[ $option_trash == 'no' ]]; then
		trash_or_delete_default='delete'
		trash_and_delete_options+=(
			delete 'Delete it'
		)
	else
		trash_and_delete_options+=(
			trash 'Move it to trash'
			delete 'Delete it'
		)
		if [[ $option_trash == 'yes' ]]; then
			trash_or_delete_default='trash'
		else
			trash_or_delete_default=$'trash\ndelete'
		fi
	fi

	# =====================================
	# Action

	function __wrap {
		sudo-helper --no-wrap="$option_quiet" --quiet="$option_quiet" --inherit --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$@"
	}
	function __rm {
		if [[ $option_trash == 'yes' ]]; then
			__wrap trash "$path" || :
		else
			__wrap rm -rf "$path" || :
		fi
	}

	local CONCLUSION
	function do_rm {
		local path="$1" title='' body choice

		# is the path already removed?
		if is-missing --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
			CONCLUSION="$(
				echo-style --green='was previously removed.'
			)"
			return 0
		fi

		# it is remaining, so prompt on what to do
		choice='trim'
		while :; do
			# is the path is empty or a broken symlink, skip any confirm and remove it
			if is-not-symlink --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
				if is-empty-file --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path" || is-empty-directory --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
					__rm "$path"
					if is-present --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
						CONCLUSION="$(
							echo-style --red='is empty, however it failed to remove.'
						)"
						return 66 # ENOTEMPTY 66 Directory not empty
					fi
					CONCLUSION="$(
						echo-style --green='was empty, it was removed.'
					)"
					return 0
				fi
			elif is-broken-symlink --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
				__rm "$path"
				if is-present --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
					CONCLUSION="$(
						echo-style --red='is a broken-symlink, however it failed to remove.'
					)"
					return 66 # ENOTEMPTY 66 Directory not empty
				fi
				CONCLUSION="$(
					echo-style --green='was a broken-symlink, it was removed.'
				)"
				return 0
			fi

			# construct body
			if [[ -z $title ]]; then
				title="$(
					echo-style --notice1='The path is non-empty and queued for removal, what should be done?' --newline \
						--code-notice1="$path"
				)"
			fi

			# refresh body
			body="$(echo-style --reset)$(fs-structure --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path")"

			# confirm
			choice="$(
				choose "$title" "$body" --truncate-body --confirm-default="$option_confirm" --defaults-exact="$choice" --label -- \
					trim 'Trim its redundant content and re-evaluate' \
					"${trash_and_delete_options[@]}" \
					abort 'Keep it, and abort the requested removal'
			)"

			# handle
			if [[ $choice == 'trim' ]]; then
				fs-trim --confirm="$option_confirm" --no-all="$option_confirm" --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"
				if is-missing --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
					CONCLUSION="$(
						echo-style --green='was removed by trimming.'
					)"
					return 0
				fi
				choice="$trash_or_delete_default"
			elif [[ $choice == 'abort' || -z $choice ]]; then
				CONCLUSION="$(
					echo-style --yellow='was kept.'
				)"
				return 66 # ENOTEMPTY 66 Directory not empty
			elif [[ $choice == 'trash' ]]; then
				__wrap trash "$path" || :
				break
			elif [[ $choice == 'delete' ]]; then
				__wrap rm -rf "$path" || :
				break
			fi
		done

		# check after trash/delete
		if is-present --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
			CONCLUSION="$(
				echo-style --red='is non-empty, it failed to remove.'
			)"
			return 66 # ENOTEMPTY 66 Directory not empty
		fi
		CONCLUSION="$(
			echo-style --green='was non-empty, it was manually removed.'
		)"
		return 0
	}

	function act {
		local path="$1" title rm_status
		path="$(fs-absolute -- "$path")"
		CONCLUSION=''
		if [[ $option_quiet == 'yes' ]]; then
			do_rm "$path"
			return
		else
			title='fs-rm'
			if [[ $option_trash == 'yes' ]]; then
				title+=' --trash'
			fi
			if [[ $option_sudo == 'yes' ]]; then
				title+=' --sudo'
			fi
			if [[ -n $option_user ]]; then
				title+=" --user=$option_user"
			fi
			if [[ -n $option_group ]]; then
				title+=" --group=$option_group"
			fi
			title+=" $(echo-escape-command -- "$path")"
			echo-style --h2="$title"
			eval_capture --statusvar=rm_status -- do_rm "$path"
			if [[ $rm_status -eq 0 ]]; then
				echo-style --g2="$title" " $CONCLUSION"
			else
				echo-style --e2="$title" " $CONCLUSION"
				return "$rm_status"
			fi
		fi
	}

	local path
	for path in "${option_paths[@]}"; do
		act "$path"
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	fs_rm "$@"
fi
