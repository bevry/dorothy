#!/usr/bin/env bash

# @todo write tests, use fs-trim and is-readable for reference, make sure to test unreadable dirs, files, and unreadable nested contents of a readable dir

function fs_rm() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Remove the paths from the file system, with some safety checks in place.

			USAGE:
			fs-rm [...options] [--] ...<path>

			OPTIONS:
			--reason=<reason>
			    The reason for the removal.

			--quiet
			    If specified, only output errors or when user intervention is required.

			--no-confirm
			    If specified, skip confirmations.

			--no-confirm-if-empty
			    If specified, skip confirmations if the file or directory is empty.

			--optional
			    If specified, doesn't fail if no <path>s were provided.

			--sudo=<sudo>
			--user=<user>
			--group=<group>
			    Forwarded to [sudo-helper].

			--readable
			    Make the <path> and its content readable.

			--trim
			    Trim redundant content and re-evaluate.
			    Requires <path> to be readable.

			--trash
			    Remove the <path> by moving it to trash, if the system supports it.
			    Does not require the <path> and its content to be readable.
			    Cannot be used with --sudo, --user=<user>, --group=<group>.

			--delete
			    Remove the <path> by deleting it immediately, without recovery.
			    If the <path> is a directory, then the <path> and its content must be readable.

			QUIRKS:
			If --no-confirm is not provided, or if an error or complication is encountered, the user will be prompted for which action to take.
			Delete will fail if it encounters a directory that is unreadable.
			Removing a parent directory is forbidden, a the shell would crash.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='no' option_inputs=() option_reason='' option_optional='no' option_confirm='' option_confirm_if_empty='' option_sudo='' option_user='' option_group='' option_readable='' option_trim='' option_trash='' option_delete='' option_preferences=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-optional'* | '--optional'*)
			option_optional="$(get-flag-value --affirmative --fallback="$option_optional" -- "$item")"
			;;
		'--no-confirm-if-empty'* | '--confirm-if-empty'*) # must be before --no-confirm as otherwise --no-confirm* will match it
			option_confirm_if_empty="$(get-flag-value --affirmative --fallback="$option_confirm_if_empty" -- "$item")"
			;;
		'--no-confirm'* | '--confirm'*)
			option_confirm="$(get-flag-value --affirmative --fallback="$option_confirm" -- "$item")"
			;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--no-readable'* | '--readable'*)
			option_readable="$(get-flag-value --affirmative --fallback="$option_readable" -- "$item")"
			if [[ $option_readable == 'yes' ]]; then
				option_preferences+=('readable')
			fi
			;;
		'--no-trim'* | '--trim'*)
			option_trim="$(get-flag-value --affirmative --fallback="$option_trim" -- "$item")"
			if [[ $option_trim == 'yes' ]]; then
				option_preferences+=('trim')
			fi
			;;
		'--no-trash'* | '--trash'*)
			option_trash="$(get-flag-value --affirmative --fallback="$option_trash" -- "$item")"
			if [[ $option_trash == 'yes' ]]; then
				option_preferences+=('trash')
			fi
			;;
		'--no-delete'* | '--delete'*)
			option_delete="$(get-flag-value --affirmative --fallback="$option_delete" -- "$item")"
			if [[ $option_delete == 'yes' ]]; then
				option_preferences+=('delete')
			fi
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--path='*) option_inputs+=("${item#*=}") ;;
		'--reason='*) option_reason="${item#*=}" ;;
		'--')
			option_inputs+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_inputs+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_inputs[@]} -eq 0 ]]; then
		if [[ $option_optional == 'yes' ]]; then
			return 0
		else
			help 'No <path>s provided.'
		fi
	fi

	# adjust reason
	local styled_reason=''
	if [[ -n $option_reason ]]; then
		styled_reason="$(
			echo-style --notice1="$option_reason"
		)"$'\n'
	fi

	# =====================================
	# Dependencies

	# prep menu
	local \
		readable_options=('readable' 'Make contents readable, then reevaluate') \
		trim_options=('trim' 'Trim redundant contents, then reevaluate') \
		trash_options=('trash' 'Move to trash') \
		delete_options=('delete' 'Delete immediately, without recovery') \
		again_options=('again' "I've done manual changes, reevaluate") \
		abort_options=('abort' 'Keep it, and abort the requested removal')

	# adjust options with warnings
	if [[ $option_sudo == 'yes' || -n $option_user || -n $option_group ]]; then
		if [[ $option_trash == 'yes' ]]; then
			echo-style --dim='Moving to trash is not supported for sudo, falling back to immediate deletion for: ' --code="${option_inputs[*]}" >/dev/stderr
			option_trash='no'
		fi
	fi

	# handle macos trash support, which is only properly supported with the builtin trash command in macOS 14.0 and up
	# adjust options with warnings, and feature detection
	local trash_bin
	if [[ $option_trash != 'no' ]]; then
		if [[ -z $option_trash && $option_delete != 'yes' ]]; then
			# no trash/delete preference set, so provide it
			setup-util-trash --quiet --optional --no-fallback
		fi
		if is-mac; then
			if [[ -x '/usr/bin/trash' ]]; then
				trash_bin='/usr/bin/trash'
			else
				trash_bin=''
			fi
		elif is-linux; then
			trash_bin="$(type -P 'trash-put' 2>/dev/null || :)"
		fi
		if [[ -z $trash_bin ]]; then
			if [[ $option_trash == 'yes' ]]; then
				echo-style --dim='Moving to trash is not available, falling back to immediate deletion for: ' --code="${option_inputs[*]}" >/dev/stderr
			fi
			option_trash='no'
		fi
	fi

	# prep defaults if none
	# do not do readable or trash or trim, as if we don't have permissions, we want to fail to let the user aware
	# do not do trim, as it is redundant if we are empty
	if [[ ${#option_preferences[@]} -eq 0 ]]; then
		option_preferences=('delete')
	fi

	# =====================================
	# Action

	function __wrap {
		sudo-helper --no-wrap="$option_quiet" --quiet="$option_quiet" --inherit --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$@"
	}

	local CONCLUSION selves
	mapfile -t selves < <(fs-parents --self --root -- .)
	function do_rm {
		local input="$1" path title='' body choices choice is defaults default_args preferences=("${option_preferences[@]}") temp had_failure='' is_readable is_empty can_readable can_trim can_trash can_delete default_for_noconfirm

		# is the input already removed?
		if is-missing --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$input"; then
			CONCLUSION="$(
				echo-style --success='previously removed.'
			)"
			return 0
		fi

		# prevent deleting ourself which causes: shell-init: error retrieving current directory: getcwd: cannot access parent directories: No such file or directory
		path="$(fs-absolute --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$input")"
		if is-needle --needle="$path" -- "${selves[@]}"; then
			CONCLUSION="$(
				echo-style --error='contains the CWD, denied.'
			)"
			echo-style --error1='Denied removing a lineage of the current working directory, change the working directory to elsewhere and try again: ' --code-error1="$path" >/dev/stderr
			return 1
		fi

		# it is remaining, so prompt on what to do
		while :; do
			CONCLUSION=''
			is=''
			choices=()
			defaults=()
			default_args=()
			is_readable=''
			is_directory=''
			is_empty=''
			can_readable=''
			can_trim=''
			can_trash=''
			can_delete=''
			default_for_noconfirm=''

			# if not quiet, dump the progress
			if [[ -n $CONCLUSION && $option_quiet == 'no' ]]; then
				echo-style --code="$path" " $CONCLUSION" >/dev/stderr
			fi

			# if readable, then we can detect emptiness
			if ! is-readable --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
				is_readable='no'
				is='non-readable'
			else
				is_readable='yes'
				if is-broken-symlink --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
					is_directory='no'
					is='broken symlink'
				elif is-not-symlink --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
					if is-empty-file --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
						is_empty='yes'
						is_directory='no'
						is='empty file'
					elif is-empty-directory --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
						is_empty='yes'
						is_directory='yes'
						is='empty directory'
					else
						is='non-empty'
					fi
				else
					is='symlink'
				fi
			fi
			if [[ -z $is_directory ]]; then
				if is-directory --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
					is_directory='yes'
					if [[ -z $is ]]; then
						is='directory'
					else
						is+=' directory'
					fi
				else
					is_directory='no'
					# don't bother with commentary on files
				fi
			fi

			# adjust options
			if [[ $is_readable == 'no' ]]; then
				can_readable='yes'
				# no trim
				# can trash
				if [[ $option_trash != 'no' ]]; then
					can_trash='yes'
				fi
				# no delete if directory
				if ! [[ $option_delete == 'no' || $is_directory == 'yes' ]]; then
					can_delete='yes'
				fi
			else
				if [[ $option_readable == 'yes' || $had_failure == 'yes' ]]; then
					can_readable='yes'
				fi
				if [[ $option_trim != 'no' ]]; then
					can_trim='yes'
				fi
				if [[ $option_trash != 'no' ]]; then
					can_trash='yes'
				fi
				if [[ $option_delete != 'no' ]]; then
					can_delete='yes'
				fi
			fi

			# adjust menu choices and defaults
			if [[ $can_readable == 'yes' ]]; then
				choices+=("${readable_options[@]}")
			fi
			if [[ $can_delete == 'yes' ]]; then
				choices+=("${delete_options[@]}")
			fi
			if [[ $can_trash == 'yes' ]]; then
				choices+=("${trash_options[@]}")
			fi
			if [[ $can_trim == 'yes' ]]; then
				choices+=("${trim_options[@]}")
			fi
			choices+=(
				"${again_options[@]}"
				"${abort_options[@]}"
			)
			if [[ ${#preferences[@]} -ne 0 ]]; then
				for item in "${preferences[@]}"; do
					case "$item" in
					'readable')
						if [[ $can_readable == 'yes' ]]; then
							defaults+=('readable')
						fi
						;;
					'trim')
						if [[ $can_trim == 'yes' && $had_failure != 'yes' ]]; then
							defaults+=('trim')
						fi
						;;
					'trash')
						if [[ $can_trash == 'yes' && $had_failure != 'yes' ]]; then
							defaults+=('trash')
						fi
						;;
					'delete')
						if [[ $can_delete == 'yes' && $had_failure != 'yes' ]]; then
							defaults+=('delete')
						fi
						;;
					esac
				done
			fi
			if [[ ${#defaults[@]} -eq 0 ]]; then
				if [[ $option_confirm != 'no' && $had_failure == 'yes' ]]; then
					defaults+=('readable' 'trash')
				fi
			fi
			if [[ ${#defaults[@]} -ne 0 ]]; then
				if [[ $option_confirm == 'no' ]]; then
					default_for_noconfirm="${defaults[0]}"
				elif [[ $is_empty == 'yes' && $option_confirm_if_empty == 'no' ]]; then
					default_for_noconfirm='delete'
				fi
				for item in "${defaults[@]}"; do
					default_args+=("--default-exact=$item")
				done
			fi
			# else allow the prompt

			# prompt
			if [[ -n $default_for_noconfirm ]]; then
				choice="$default_for_noconfirm"
			else
				if [[ -n $is ]]; then
					title="$(
						echo-style --="$styled_reason" --notice1="How to remove $is " --code-notice1="$path"
					)"
				else
					title="$(
						echo-style --="$styled_reason" --notice1='How to remove ' --code-notice1="$path"
					)"
				fi
				if [[ $is_readable == 'no' && $is_directory == 'yes' ]]; then
					# cannot ls/eza if directory is unreadable
					body=''
				else
					body="$(echo-style --reset)$(fs-structure --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path")"
				fi
				choice="$(
					choose --required "$title" "$body" --truncate-body "${default_args[@]}" --label -- "${choices[@]}"
				)"
			fi

			# remove the predetermined choice from the preferences from next times defaults
			# this is complicated as readable may have been provided to solve a nested readable issue, but not available yet due to is-readable showing it is readable, which is then changed to maybe on failure, allowing readable to become available for the default: this only applies to --confirm
			if [[ ${#defaults[@]} -ne 0 && $choice == "${defaults[0]}" ]]; then
				temp=()
				for item in "${preferences[@]}"; do
					if [[ $item != "$choice" ]]; then
						temp+=("$item")
					fi
				done
				preferences=("${temp[@]}")
			fi

			# handle
			# @todo maybe at one point store the output of the failures to show them in the next menu
			# however, the ideal would be to have --inline for choose
			had_failure=''
			case "$choice" in
			'delete')
				__wrap rm -rf -- "$path" || {
					had_failure='yes'
				}
				;;
			'trash')
				__wrap "$trash_bin" "$path" || {
					had_failure='yes'
				}
				;;
			'trim')
				fs-trim --quiet="$option_quiet" --confirm="$option_confirm" --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path" || {
					had_failure='yes'
				}
				;;
			'readable')
				fs-own --quiet="$option_quiet" --permissions='+r' --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"
				;;
			'abort')
				if [[ -n $is ]]; then
					CONCLUSION="$is "
				fi
				CONCLUSION+="$(
					echo-style --error='failed to remove'
				)"
				echo-style --code="$path" " $CONCLUSION" >/dev/stderr
				return 66 # ENOTEMPTY 66 Directory not empty
				;;
			'again' | '' | *)
				continue
				;;
			esac

			# check after trash/delete
			if is-missing --sudo="$option_sudo" --user="$option_user" --group="$option_group" -- "$path"; then
				if [[ -n $is ]]; then
					CONCLUSION="$is "
				fi
				CONCLUSION+="$(
					echo-style --success='removed'
				)"
				break
			fi
		done
		return 0
	}

	function act {
		local input="$1" title rm_status
		if [[ $option_quiet == 'yes' ]]; then
			do_rm "$input"
			return
		else
			title='fs-rm'
			if [[ $option_trim == 'yes' ]]; then
				title+=' --trim'
			fi
			if [[ $option_trash == 'yes' ]]; then
				title+=' --trash'
			fi
			if [[ $option_sudo == 'yes' ]]; then
				title+=' --sudo'
			fi
			if [[ -n $option_user ]]; then
				title+=" --user=$option_user"
			fi
			if [[ -n $option_group ]]; then
				title+=" --group=$option_group"
			fi
			title+=" $(echo-escape-command -- "$input")"
			echo-style --h2="$title" >/dev/stderr
			eval_capture --statusvar=rm_status -- do_rm "$input"
			if [[ $rm_status -eq 0 ]]; then
				echo-style --g2="$title" " $CONCLUSION" >/dev/stderr
			else
				echo-style --e2="$title" " $CONCLUSION" >/dev/stderr
				return "$rm_status"
			fi
		fi
	}

	local input
	for input in "${option_inputs[@]}"; do
		act "$input"
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	fs_rm "$@"
fi
