#!/usr/bin/env bash

function rm_junk() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Removes .DS_Store files. Does not remove empty directories unless specified, as that causes issues with Syncthing, backups, etc.

			USAGE:
			rm-junk [...options] [--] <path>

			OPTIONS:
			--path=<path> | <path>
			    Provide <path> to specify which paths should have their junk files removed.
			    If <path> was not provided then the current working directory will be used.

			--empty
			    If provided, remove empty directories as well.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# options
	local item option_paths=() option_empty='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--no-empty'* | '--empty'*)
			option_empty="$(get-flag-value --affirmative --fallback="$option_empty" -- "$item")"
			;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# adjust path
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		option_paths+=("$(pwd)")
	fi

	# =====================================
	# Action

	# prepare the variables we will use
	local path find_args=() action_args=()
	local ds_store_args=(
		'(' -name '.DS_Store' -or -name '._.DS_Store' ')'
	)
	local empty_args=(
		'(' -type d -empty ')'
	)

	# add DS_Store args, and empty args if desired
	find_args+=("${ds_store_args[@]}")
	if [[ $option_empty == 'yes' ]]; then
		find_args+=(
			-or
			"${empty_args[@]}"
		)
	fi

	# wrap the find args, and add the actions
	action_args+=(
		'(' "${find_args[@]}" ')' -delete -print
	)

	# perform the find action on each path
	for path in "${option_paths[@]}"; do
		find "$path" "${action_args[@]}"
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	rm_junk "$@"
fi
