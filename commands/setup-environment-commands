#!/usr/bin/env bash
# shellcheck disable=SC1091

# notes:
# don't use `is-admin` here, as sudo does not necessarily load this
# so sudo should inherit standard config

# load the env difference echo handling
# shellcheck disable=SC2034
shell="${1-}"
source "$DOROTHY/sources/env.bash"

# load our other sources
source "$DOROTHY/sources/strict.bash"
source "$DOROTHY/sources/splitlines.bash"
source "$DOROTHY/sources/config.sh"

# reset
export PATH="$DOROTHY/commands:/usr/sbin:/usr/bin:/sbin:/bin"
export MANPATH='' CLASSPATH='' INFOPATH='' LDFLAGS='' CPPFLAGS='' PKG_CONFIG_PATH=''
# ^ right to left is preference

# helpers
function rubygems {
	export GEM_HOME="$HOME/.gem"
	if test -x "$1"; then
		rubydirs="$("$1" environment gempath | tr ':' '\n')"
		for i in $rubydirs; do
			PATH="$i/bin:$PATH"
		done
	fi
}

# user
function before_dorothy_paths {
	return
}
function after_dorothy_paths {
	return
}
function after_everything {
	return
}
load_dorothy_config 'environment.bash'

# xdg
# https://wiki.archlinux.org/title/XDG_Base_Directory
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-"$HOME/.config"}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-"$HOME/.cache"}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-"$HOME/.local/share"}"
export XDG_STATE_HOME="${XDG_STATE_HOME:-"$HOME/.local/state"}"
export XDG_DATA_DIRS="${XDG_DATA_DIRS:-"$XDG_DATA_HOME:/usr/local/share:/usr/share"}"
export XDG_CONFIG_DIRS="${XDG_CONFIG_DIRS:-"$XDG_CONFIG_HOME:/etc/xdg"}"

# Xcode
if test -d "/Applications/Xcode.app/Contents/Developer/usr/bin"; then
	PATH="/Applications/Xcode.app/Contents/Developer/usr/bin:$PATH"
fi

# Snap
if test -d "/snap/bin"; then
	PATH="/snap/bin:$PATH"
fi

# Homebrew, UNIX
if test -d "/usr/local/bin"; then
	PATH="/usr/local/bin:$PATH"
fi
if test -d "/usr/local/sbin"; then
	PATH="/usr/local/sbin:$PATH"
fi
if test -d "/usr/local/man"; then
	export MANPATH="/usr/local/man:$MANPATH"
fi

# Homebrew
if is-mac; then
	export HOMEBREW_ARCH HOMEBREW_PREFIX HOMEBREW_CELLAR HOMEBREW_REPOSITORY HOMEBREW_SHELLENV_PREFIX
	if test -z "${HOMEBREW_ARCH-}"; then
		if test "$(uname -p)" = 'arm' -o "$(uname -m)" = 'arm64'; then
			HOMEBREW_ARCH='arm64e'
		else
			HOMEBREW_ARCH='x86_64'
		fi
	fi
	if test -z "${HOMEBREW_PREFIX-}"; then
		if test "$HOMEBREW_ARCH" = 'arm64e'; then
			HOMEBREW_PREFIX='/opt/homebrew'
		else
			HOMEBREW_PREFIX='/usr/local'
		fi
	fi
	if test -z "${HOMEBREW_CELLAR-}"; then
		if test -x "${HOMEBREW_PREFIX}/bin/brew"; then
			HOMEBREW_CELLAR="$("${HOMEBREW_PREFIX}/bin/brew" --cellar)"
		else
			HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
		fi
	fi
	if test -z "${HOMEBREW_REPOSITORY-}"; then
		if test -x "${HOMEBREW_PREFIX}/bin/brew"; then
			HOMEBREW_REPOSITORY="$("${HOMEBREW_PREFIX}/bin/brew" --repo)"
		else
			HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX"
		fi
	fi
	if test -z "${HOMEBREW_SHELLENV_PREFIX-}"; then
		HOMEBREW_SHELLENV_PREFIX="$HOMEBREW_PREFIX"
	fi
fi

# if homebrew is installed, then add its paths
if test -x "${HOMEBREW_PREFIX-}/bin/brew"; then
	# linux
	export HOMEBREW_PREFIX="${HOMEBREW_PREFIX:-"/usr/local"}"

	# /usr/local already added to PATH, so only add these if different
	if test "$HOMEBREW_PREFIX" != '/usr/local'; then
		if test -d "$HOMEBREW_PREFIX/bin"; then
			PATH="$HOMEBREW_PREFIX/bin:$PATH"
		fi
		if test -d "$HOMEBREW_PREFIX/sbin"; then
			PATH="$HOMEBREW_PREFIX/sbin:$PATH"
		fi
	fi

	# add the rest
	if test -d "$HOMEBREW_PREFIX/share/man"; then
		export MANPATH="$HOMEBREW_PREFIX/share/man:$MANPATH"
	fi
	if test -d "$HOMEBREW_PREFIX/share/info"; then
		export INFOPATH="$HOMEBREW_PREFIX/share/info:$INFOPATH"
	fi

	# for compilers to find homebrew
	if test -d "$HOMEBREW_PREFIX/lib"; then
		export LDFLAGS="-L$HOMEBREW_PREFIX/lib:$LDFLAGS"
	fi
	if test -d "$HOMEBREW_PREFIX/include"; then
		export CPPFLAGS="-I$HOMEBREW_PREFIX/include:$CPPFLAGS"
	fi
	if test -d "$HOMEBREW_PREFIX/lib/pkgconfig"; then
		export PKG_CONFIG_PATH="$HOMEBREW_PREFIX/lib/pkgconfig:$PKG_CONFIG_PATH"
	fi

	# llvm
	if test -d "$HOMEBREW_PREFIX/opt/llvm/bin"; then
		p="$HOMEBREW_PREFIX/opt/llvm"
		PATH="$p/bin:$PATH"
		rubygems "$p/bin/gem"
		# for compilers to find llvm
		if test -d "$p/lib"; then
			export LDFLAGS="-L$p/lib:$LDFLAGS"
		fi
		if test -d "$p/include"; then
			export CPPFLAGS="-I$p/include:$CPPFLAGS"
		fi
	fi

	# SQLite (dependency of python)
	if test -d "$HOMEBREW_PREFIX/opt/sqlite/bin"; then
		p="$HOMEBREW_PREFIX/opt/sqlite"
		PATH="$p/bin:$PATH"
		# for compilers to find sqlite
		if test -d "$p/lib"; then
			export LDFLAGS="-L$p/lib:$LDFLAGS"
		fi
		if test -d "$p/include"; then
			export CPPFLAGS="-I$p/include:$CPPFLAGS"
		fi
		# for pkg-config to find sqlite
		if test -d "$p/lib/pkgconfig"; then
			export PKG_CONFIG_PATH="$p/lib/pkgconfig:$PKG_CONFIG_PATH"
		fi
	fi

	# guile (dependency of something)
	if test -d "$HOMEBREW_PREFIX/share/guile"; then
		export GUILE_LOAD_PATH="$HOMEBREW_PREFIX/share/guile/site/3.0"
		export GUILE_LOAD_COMPILED_PATH="$HOMEBREW_PREFIX/lib/guile/3.0/site-ccache"
		export GUILE_SYSTEM_EXTENSIONS_PATH="$HOMEBREW_PREFIX/lib/guile/3.0/extensions"
	fi

	# icu4c (dependency of heroku)
	if test -d "$HOMEBREW_PREFIX/opt/icu4c/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/icu4c/bin:$PATH"
	fi
	if test -d "$HOMEBREW_PREFIX/opt/icu4c/sbin"; then
		PATH="$HOMEBREW_PREFIX/opt/icu4c/sbin:$PATH"
	fi

	# Sphinx (dependency of ruby)
	if test -d "$HOMEBREW_PREFIX/opt/sphinx-doc/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/sphinx-doc/bin:$PATH"
	fi

	# GetText (dependency of gpg)
	if test -d "$HOMEBREW_PREFIX/opt/gettext/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/gettext/bin:$PATH"
	fi

	# Ruby
	if test -n "${RUBY_VERSION-}" && test -d "$HOMEBREW_PREFIX/opt/ruby@$RUBY_VERSION/bin"; then
		p="$HOMEBREW_PREFIX/opt/ruby@$RUBY_VERSION"
		PATH="$p/bin:$PATH"
		rubygems "$p/bin/gem"
	elif test -d "$HOMEBREW_PREFIX/opt/ruby/bin"; then
		p="$HOMEBREW_PREFIX/opt/ruby"
		PATH="$p/bin:$PATH"
		rubygems "$p/bin/gem"
		# for compilers to find ruby
		if test -d "$p/lib"; then
			export LDFLAGS="-L$p/lib:$LDFLAGS"
		fi
		if test -d "$p/include"; then
			export CPPFLAGS="-I$p/include:$CPPFLAGS"
		fi
		# for pkg-config to find ruby
		if test -d "$p/lib/pkgconfig"; then
			export PKG_CONFIG_PATH="$p/lib/pkgconfig:$PKG_CONFIG_PATH"
		fi
	else
		rubydirs="$(expand-path "$HOMEBREW_PREFIX/opt/ruby*/bin")"
		for rubydir in $rubydirs; do
			PATH="$rubydir:$PATH"
			rubygems "$rubydir/gem"
		done
	fi

	# Node
	nodedirs="$(expand-path "$HOMEBREW_CELLAR/node/*/bin")"
	for nodedir in $nodedirs; do
		PATH="$nodedir:$PATH"
	done

	# Python
	if test -d "$HOMEBREW_PREFIX/opt/python/libexec/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/python/libexec/bin:$PATH"
	fi

	# Python: Pip
	pipdirs="$(expand-path "$HOME/Library/Python/*/bin")"
	for pipdir in $pipdirs; do
		PATH="$pipdir:$PATH"
	done

	# OpenSSL (dependency of python, gpg, and node)
	# openssl is a symlink to whatever directory has the latest version
	if test -d "$HOMEBREW_PREFIX/opt/openssl/bin"; then
		p="$HOMEBREW_PREFIX/opt/openssl"
		PATH="$p/bin:$PATH"
		if test -d "$p/lib"; then
			export LDFLAGS="-L$p/lib:$LDFLAGS"
		fi
		if test -d "$p/include"; then
			export CPPFLAGS="-I$p/include:$CPPFLAGS"
		fi
		if test -d "$p/lib/pkgconfig"; then
			export PKG_CONFIG_PATH="$p/lib/pkgconfig:$PKG_CONFIG_PATH"
		fi
		# ^^ setup-util-gocryptfs needs this on macos big sur
		# ```
		# Package libcrypto was not found in the pkg-config search path.
		# Perhaps you should add the directory containing `libcrypto.pc'
		# to the PKG_CONFIG_PATH environment variable
		# No package 'libcrypto' found
		# pkg-config: exit status 1
		# ```
		# and
		# ```
		# ld: library not found for -lcrypto
		# clang: error: linker command failed with exit code 1 (use -v to see invocation)
		# ````
	fi

	# NSS
	if test -d "$HOMEBREW_PREFIX/opt/nss/bin"; then
		PATH="$HOMEBREW_PREFIX/opt/nss/bin:$PATH"
	fi

	# Anaconda
	if test -d "$HOMEBREW_PREFIX/anaconda3/bin"; then
		PATH="$HOMEBREW_PREFIX/anaconda3/bin:$PATH"
	fi

	# Heroku
	if test -d "$HOMEBREW_PREFIX/heroku/bin"; then
		PATH="$HOMEBREW_PREFIX/heroku/bin:$PATH"
	fi

else
	rubygems "$(which gem)"
fi

# NVM
if test -z "${NVM_DIR-}" -a -d "$HOME/.nvm"; then
	export NVM_DIR="$HOME/.nvm"
fi

# Python: pyenv
if test -z "${PYENV_ROOT-}" -a -d "$HOME/.pyenv"; then
	export PYENV_ROOT="$HOME/.pyenv"
fi
if test -n "${PYENV_ROOT-}"; then
	PATH="$PYENV_ROOT/bin:$PATH"
	PATH="$PYENV_ROOT/shims:$PATH"
fi

# Rust: rustup
if test -z "${RUSTUP_HOME-}" -a -d "$HOME/.rustup"; then
	export RUSTUP_HOME="$HOME/.rustup"
fi

# Rust: cargo
if test -z "${CARGO_HOME-}" -a -d "$HOME/.cargo"; then
	export CARGO_HOME="$HOME/.cargo"
fi
if test -n "${CARGO_HOME-}"; then
	mkdir -p "$CARGO_HOME"
	PATH="$CARGO_HOME/bin:$PATH"

	# Rust: cargo target
	# workaround for ubuntu server, which /tmp may often be read-only
	# https://doc.rust-lang.org/stable/cargo/guide/build-cache.html
	if test -z "${CARGO_TARGET_DIR-}" -a -d "$CARGO_HOME/target"; then
		export CARGO_TARGET_DIR="$CARGO_HOME/target"
	fi
	if test -n "${CARGO_TARGET_DIR-}"; then
		mkdir -p "$CARGO_TARGET_DIR"
	fi
fi

# Go
go=''
if test -z "${go-}"; then
	if test -n "${HOMEBREW_PREFIX-}" -a -x "${HOMEBREW_PREFIX-}/bin/go"; then
		go="$HOMEBREW_PREFIX/bin/go"
	else
		go="$(echo-if-executable /usr/local/bin/go /bin/go | echo-first)"
	fi
fi
if test -n "${go-}" -a -x "${go-}"; then
	export GOPATH GOBIN GOROOT
	if test -z "${GOPATH-}" -o -z "${GOROOT-}" -o "${GOBIN-}"; then
		gobins="$(expand-path "$HOMEBREW_CELLAR/go/*/bin")"
		for gobin in $gobins; do
			p="$(fs-parent "$gobin")"
			if test -z "${GOPATH-}"; then
				export GOPATH="$p"
			fi
			if test -z "${GOROOT-}"; then
				mkdir -p "$p/libexec"
				export GOROOT="$p/libexec"
			fi
			if test -z "${GOBIN-}"; then
				export GOBIN="$p/bin"
				PATH="$gobin:$PATH"
			fi
			break # only add the first
		done
	fi
fi

# Clojurescript
if test -d "$HOME/.clojure/clojure-1.8"; then
	PATH="$HOME/.clojure/clojure-1.8.0:$PATH"
	export CLASSPATH="$HOME/.clojure/clojure-1.8.0:$CLASSPATH"
fi

# Yarn
yarn=''
if test -z "${yarn-}"; then
	if test -n "${HOMEBREW_PREFIX-}" -a -x "${HOMEBREW_PREFIX-}/bin/yarn"; then
		yarn="$HOMEBREW_PREFIX/bin/yarn"
	else
		yarn="$(echo-if-executable /usr/local/bin/yarn /bin/yarn | echo-first)"
	fi
fi
if test -n "${yarn-}" -a -x "${yarn-}"; then
	PATH="$(yarn global bin):$PATH"
fi

# Flossbank
if test -d "$HOME/.flossbank/bin"; then
	PATH="$HOME/.flossbank/bin:$PATH"
fi

# Generics: pip, pipx
# python get-pip.py --user
if test -d "$HOME/.local/bin"; then
	PATH="$HOME/.local/bin:$PATH"
fi

# Geneics: Java
export CLASSPATH=".:$CLASSPATH"

# Scripts
before_dorothy_paths
PATH="$DOROTHY/commands:$PATH"
PATH="$DOROTHY_USER_HOME/commands:$PATH"
PATH="$DOROTHY_USER_HOME/commands.local:$PATH"
after_dorothy_paths

# Local
if test -d "$HOME/.bin"; then
	PATH="$HOME/.bin:$PATH"
fi
if test -d "$HOME/bin"; then
	PATH="$HOME/bin:$PATH"
fi

# Done
after_everything
