#!/usr/bin/env bash
export DOROTHY
if [[ -z ${DOROTHY-} ]]; then
	self="${BASH_SOURCE:-"$0"}"
	DOROTHY="${self%/commands/setup-environment-commands*}"
fi

source "$DOROTHY/sources/bash.bash"

# =====================================
# Notes

# This is an internal command, no need for help handling.

# Don't use `is-admin` here, as sudo does not necessarily load this
# so sudo should inherit standard config.

# Right to left is the preference for paths.

# Always use terminal editor for prompts as GUI editors are too slow.

# =====================================
# Helpers

function rubygems {
	local gem="$1" gemdirs_string gemdirs_array gemdir
	export GEM_HOME="$HOME/.gem"
	if [[ -x $gem ]]; then
		# fetch gempaths and replace colons with newlines
		gemdirs_string="$("$gem" environment gempath)"
		gemdirs_string="${gemdirs_string//:/$'\n'}"
		mapfile -t gemdirs_array <<<"$gemdirs_string" # <("$gem" environment gempath | tr ':' '\n')
		for gemdir in "${gemdirs_array[@]}"; do
			PATH="$gemdir/bin:$PATH"
		done
	fi
}

# =====================================
# Configuration

source "$DOROTHY/sources/config.sh"

# arguments provides:
export shell="${1-}"

# testing
if [[ $* == *'--refresh'* ]]; then
	env -i DOROTHY="$DOROTHY" "$DOROTHY/commands/setup-environment-commands" "$shell"
	exit
fi

# environment provides:
# DOROTHY

# environment.bash provides:
# NVM_DIR, HOMEBREW_ARCH, PYENV_VERSION, RUBY_VERSION
# and other overrides

# load env.bash now, so that
# any exported variables changed from now on are echo'd at finish
source "$DOROTHY/sources/env.bash"

# =====================================
# Prepare

# PATH vars contain multiple paths
# _DIR vars contain a single universal path
# _HOME vars contain a single user path

# ensure editor vars are exported
export LANG LC_ALL EDITOR

# Essentials, required for these environments
# crontab
# env -i "$(type -P bash)" -l -- $(type -P 'dorothy-command')
# Fresh install of Dorothy on Ubuntu 21.04 on a Raspberry Pi 400
if [[ -z ${USER-} ]]; then
	export USER
	USER="$(whoami 2>/dev/null || users 2>/dev/null || __print_lines 'unknown')"
fi
if [[ -z ${HOME-} ]]; then
	export HOME
	# should coincide with sudo-helper
	if [[ -d /Users ]]; then
		HOME="/Users/$USER"
	elif [[ -d "/home/$USER" ]]; then
		HOME="/home/$USER"
	elif [[ -d "/$USER" ]]; then
		HOME="/$USER"
	else
		HOME="$(mktemp -d)"
	fi
fi

# Local directories
# https://refspecs.linuxfoundation.org/FHS_3.0/fhs/ch04s09.html
export BIN_DIR CONF_DIR DATA_DIR LIB_DIR STATE_DIR SERVICE_DIR LOGS_DIR
BIN_DIR='/usr/local/bin'
CONF_DIR='/usr/local/etc'
DATA_DIR='/usr/local/share'
LIB_DIR='/usr/local/lib'
STATE_DIR='/var/local/state'

# XDG
# https://wiki.archlinux.org/title/XDG_Base_Directory
# https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
# XDG_RUNTIME_DIR is a special directory and variable created by the system
export XDG_PREFIX="${XDG_PREFIX:-"$HOME/.local"}"
export XDG_CONFIG_HOME="${XDG_CONFIG_HOME:-"$HOME/.config"}"
export XDG_CACHE_HOME="${XDG_CACHE_HOME:-"$HOME/.cache"}"
export XDG_BIN_HOME="${XDG_BIN_HOME:-"$XDG_PREFIX/bin"}"
export XDG_DATA_HOME="${XDG_DATA_HOME:-"$XDG_PREFIX/share"}"
export XDG_STATE_HOME="${XDG_STATE_HOME:-"$XDG_PREFIX/state"}"
# ^ if these are already defined, not to worry, `env.bash` will tidy up duplicates
__mkdirp "$XDG_CONFIG_HOME" "$XDG_CACHE_HOME" "$XDG_BIN_HOME" "$XDG_DATA_HOME" "$XDG_STATE_HOME"

# Appimage
export APPIMAGE_HOME="${APPIMAGE_HOME:-"$HOME/Applications"}"

# reset paths and flags
# $PATH last to make sure we inherit operating-system specific paths, such as WSL paths, and let the deduplicator later trim out duplicates in preferred order
export PATH="$DOROTHY/commands:$XDG_BIN_HOME:/usr/sbin:/usr/bin:/sbin:/bin:$PATH"

export MANPATH="${MANPATH-}" INFOPATH="${INFOPATH-}" CLASSPATH="${CLASSPATH-}" PKG_CONFIG_PATH="${PKG_CONFIG_PATH-}" LDFLAGS="${LDFLAGS-}" CPPFLAGS="${CPPFLAGS-}" CC CXX LIBRARY_PATH="${LIBRARY_PATH-}"

# local vars
p=''

# =====================================
# Helpers

# PATH, LDFLAGS, CPPFLAGS, PKG_CONFIG_PATH
function add_prefix_dir {
	local p="$1"
	if [[ -n $p && -d $p ]]; then
		# for invokers to discover it
		if [[ -d "$p/bin" ]]; then
			PATH="$p/bin:$PATH"
		fi
		# for invokers under root to discover it
		if [[ $USER == 'root' && -d "$p/sbin" ]]; then
			PATH="$p/sbin:$PATH"
		fi
		# for compilers to discover it
		if [[ -d "$p/lib" ]]; then
			LDFLAGS="-L$p/lib $LDFLAGS"
			# for pkg-config to discover it
			if [[ -d "$p/lib/pkgconfig" ]]; then
				PKG_CONFIG_PATH="$p/lib/pkgconfig:$PKG_CONFIG_PATH"
			fi
		fi
		if [[ -d "$p/include" ]]; then
			CPPFLAGS="-I$p/include $CPPFLAGS"
		fi
		# man and share/man
		if [[ -d "$p/man" ]]; then
			MANPATH="$p/man:$MANPATH"
		fi
		if [[ -d "$p/share" ]]; then
			if [[ -d "$p/share/man" ]]; then
				MANPATH="$p/share/man:$MANPATH"
			fi
			if [[ -d "$p/share/info" ]]; then
				INFOPATH="$p/share/info:$INFOPATH"
			fi
		fi
	fi
}

# =====================================
# Configuration

# prepare hooks, and load user overrides
function before_dorothy_paths {
	return 0
}
function after_dorothy_paths {
	return 0
}
function after_everything {
	return 0
}
load_dorothy_config 'environment.bash'

# =====================================
# Environment

# Should we prefer XDG?
export PREFER_XDG
if [[ $DOROTHY == "$HOME/.dorothy" ]]; then
	PREFER_XDG='no'
else
	PREFER_XDG='yes'
fi

# XDG compiled properties
export XDG_DATA_DIRS="${XDG_DATA_DIRS:-"$XDG_DATA_HOME:/usr/local/share:/usr/share"}"
export XDG_CONFIG_DIRS="${XDG_CONFIG_DIRS:-"$XDG_CONFIG_HOME:/etc/xdg"}"

# Flatpak adjustments
if [[ -d '/var/lib/flatpak/exports/share' ]]; then
	XDG_DATA_DIRS="/var/lib/flatpak/exports/share:$XDG_DATA_DIRS"
fi
if [[ -d "$XDG_DATA_HOME/flatpak/exports/share" ]]; then
	XDG_DATA_DIRS="$XDG_DATA_HOME/flatpak/exports/share:$XDG_DATA_DIRS"
fi

# Homebrew, UNIX
add_prefix_dir /usr
add_prefix_dir /usr/local

# Zsh
# https://zsh.sourceforge.io/Intro/intro_3.html
export ZDOTDIR
if [[ -z ${ZDOTDIR-} ]]; then
	if [[ $PREFER_XDG == 'yes' ]]; then
		ZDOTDIR="$XDG_CONFIG_HOME/zsh"
	elif [[ $PREFER_XDG == 'no' ]]; then
		ZDOTDIR="$HOME"
	fi
fi

# GnuPG
export GNUPGHOME
if [[ -z ${GNUPGHOME-} ]]; then
	# check for existing
	if [[ -d "$XDG_DATA_HOME/gnupg" ]]; then
		GNUPGHOME="$XDG_DATA_HOME/gnupg"
	elif [[ -d "$HOME/.gnupg" ]]; then
		GNUPGHOME="$HOME/.gnupg"
	else
		# none existing, seed preference
		if [[ $PREFER_XDG == 'yes' ]]; then
			GNUPGHOME="$XDG_DATA_HOME/gnupg"
		else
			GNUPGHOME="$HOME/.gnupg"
		fi
	fi
fi

# Xcode
# if [[ -x '/usr/bin/xcode-select' && -x '/usr/bin/xcrun' ]]; then
if __command_exists -- 'xcode-select' 'xcrun'; then
	# Apple Command Line Tools
	add_prefix_dir '/Library/Developer/CommandLineTools/usr'

	# Xcode Command Line Tools
	#p='/Applications/Xcode.app/Contents/Developer'
	p="$(xcode-select --print-path 2>/dev/null || :)"
	add_prefix_dir "$p/usr"

	# Xcode Toolchain
	p="$p/Toolchains/XcodeDefault.xctoolchain"
	add_prefix_dir "$p/usr"
	if [[ -d "$p/usr/bin" ]]; then
		#CC="$p/usr/bin/clang"
		#CXX="$p/usr/bin/clang++"
		CC="$(xcrun --find clang 2>/dev/null || :)"
		CXX="$(xcrun --find clang++ 2>/dev/null || :)"
	fi

	# Xcode LLVM
	# /Library/Developer/CommandLineTools/SDKs/MacOSX.sdk => $p/Platforms/MacOSX.platform/Developer/SDKs/MacOSX.sdk => xcrun --sdk macosx --show-sdk-path
	#p='/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk'
	p="$(xcrun --sdk macosx --show-sdk-path 2>/dev/null || :)"
	add_prefix_dir "$p/usr"
	if [[ -d "$p/usr/lib" ]]; then
		LIBRARY_PATH="$p/usr/lib:$LIBRARY_PATH"
	fi
	if [[ -d "$p/System/Library/Frameworks" ]]; then
		# https://stackoverflow.com/a/68766210
		LDFLAGS="-F$p/System/Library/Frameworks/ $LDFLAGS"
	fi
fi

# Snap
if [[ -d '/snap/bin' ]]; then
	PATH="/snap/bin:$PATH"
fi

# Windows WSL
# Most of these are handled by inheriting PATH, however VSCode integrated terminal does not inherit WSL's PATH:
# /usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/usr/games:/usr/local/games:/usr/lib/wsl/lib:/mnt/c/Program Files (x86)/Intel/iCLS Client/:/mnt/c/Program Files/Intel/iCLS Client/:/mnt/c/Windows/system32:/mnt/c/Windows:/mnt/c/Windows/System32/Wbem:/mnt/c/Windows/System32/WindowsPowerShell/v1.0/:/mnt/c/Windows/System32/OpenSSH/:/mnt/c/Program Files/Cloudflare/Cloudflare WARP/:/mnt/c/Users/balup/scoop/shims:/mnt/c/Users/balup/AppData/Local/Microsoft/WindowsApps:/mnt/c/Users/balup/AppData/Local/Programs/Microsoft VS Code/bin:/snap/bin
if is-wsl; then
	wsl_dirs=()
	for wsl_mount in /mnt/*/; do
		# skip mounts that aren't single space [/mnt/c/ = 7], skip mounts already in path
		if [[ ${#wsl_mount} -ne 7 || $PATH == *"$wsl_mount"* ]]; then
			continue
		fi
		for wsl_user in "${wsl_mount}Users/"*/; do
			wsl_dirs+=(
				"${wsl_user}AppData/LocalPrograms/Microsoft VS Code/bin"
				"${wsl_user}AppData/Local/Microsoft/WindowsApps"
				"${wsl_user}scoop/shims" # where [scoop] is installed to, and where the .exe's of scoop packages are installed to
			)
		done
		wsl_dirs+=(
			"${wsl_mount}Windows/System32/OpenSSH/"
			"${wsl_mount}Windows/System32/WindowsPowerShell/v1.0/"
			"${wsl_mount}Windows/System32/Wbem"
			"${wsl_mount}Windows"
			"${wsl_mount}Windows/system32"
		)
	done
	for wsl_dir in "${wsl_dirs[@]}"; do
		if [[ -d $wsl_dir ]]; then
			PATH="$(echo-escape-spaces -- "$wsl_dir"):$PATH"
		fi
	done
fi

# Homebrew, UNIX
add_prefix_dir /user/local

# macOS
if is-mac; then
	SERVICE_DIR='/Library/LaunchDaemons'
	LOGS_DIR='/var/log'
	# Homebrew
	export HOMEBREW_ARCH HOMEBREW_PREFIX HOMEBREW_CELLAR HOMEBREW_REPOSITORY HOMEBREW_SHELLENV_PREFIX HOMEBREW_NO_AUTO_UPDATE=1 HOMEBREW_NO_ENV_HINTS=1
	if [[ -z ${HOMEBREW_ARCH-} ]]; then
		if [[ "$(uname -p)" == 'arm' || "$(uname -m)" == 'arm64' ]]; then
			HOMEBREW_ARCH='arm64e'
		else
			HOMEBREW_ARCH='x86_64'
		fi
	fi
	if [[ -z ${HOMEBREW_PREFIX-} ]]; then
		if [[ $HOMEBREW_ARCH == 'arm64e' ]]; then
			HOMEBREW_PREFIX='/opt/homebrew'
		else
			HOMEBREW_PREFIX='/usr/local'
		fi
	fi
	if [[ -z ${HOMEBREW_CELLAR-} ]]; then
		if [[ -x "${HOMEBREW_PREFIX}/bin/brew" ]]; then
			HOMEBREW_CELLAR="$("${HOMEBREW_PREFIX}/bin/brew" --cellar)"
		else
			HOMEBREW_CELLAR="$HOMEBREW_PREFIX/Cellar"
		fi
	fi
	if [[ -z ${HOMEBREW_REPOSITORY-} ]]; then
		if [[ -x "${HOMEBREW_PREFIX}/bin/brew" ]]; then
			HOMEBREW_REPOSITORY="$("${HOMEBREW_PREFIX}/bin/brew" --repo)"
		else
			HOMEBREW_REPOSITORY="$HOMEBREW_PREFIX"
		fi
	fi
	if [[ -z ${HOMEBREW_SHELLENV_PREFIX-} ]]; then
		HOMEBREW_SHELLENV_PREFIX="$HOMEBREW_PREFIX"
	fi
elif is-linux; then
	# Linux
	SERVICE_DIR='/etc/systemd/system'
	LOGS_DIR='/var/log'
	# Homebrew
	# https://docs.brew.sh/Homebrew-on-Linux
	export HOMEBREW_PREFIX="${HOMEBREW_PREFIX:-"$HOME/.linuxbrew"}" HOMEBREW_NO_ENV_HINTS=1
fi

# if homebrew is installed, then add its paths
if [[ -n ${HOMEBREW_PREFIX-} && -x "${HOMEBREW_PREFIX-}/bin/brew" ]]; then
	# /usr/local already added to PATH, so only add these if different
	if [[ $HOMEBREW_PREFIX != '/usr/local' ]]; then
		if [[ -d "$HOMEBREW_PREFIX/bin" ]]; then
			PATH="$HOMEBREW_PREFIX/bin:$PATH"
		fi
		if [[ -d "$HOMEBREW_PREFIX/sbin" ]]; then
			PATH="$HOMEBREW_PREFIX/sbin:$PATH"
		fi
	fi

	# add the rest
	if [[ -d "$HOMEBREW_PREFIX/share/man" ]]; then
		MANPATH="$HOMEBREW_PREFIX/share/man:$MANPATH"
	fi
	if [[ -d "$HOMEBREW_PREFIX/share/info" ]]; then
		INFOPATH="$HOMEBREW_PREFIX/share/info:$INFOPATH"
	fi

	# for compilers to find llvm
	if [[ $HOMEBREW_PREFIX != '/user/local' ]]; then
		add_prefix_dir "$HOMEBREW_PREFIX"
	fi

	# llvm
	add_prefix_dir "$HOMEBREW_PREFIX/opt/llvm"

	# SQLite (dependency of python)
	add_prefix_dir "$HOMEBREW_PREFIX/opt/sqlite"

	# guile (dependency of something)
	if [[ -d "$HOMEBREW_PREFIX/share/guile" ]]; then
		export GUILE_LOAD_PATH="$HOMEBREW_PREFIX/share/guile/site/3.0"
		export GUILE_LOAD_COMPILED_PATH="$HOMEBREW_PREFIX/lib/guile/3.0/site-ccache"
		export GUILE_SYSTEM_EXTENSIONS_PATH="$HOMEBREW_PREFIX/lib/guile/3.0/extensions"
	fi

	# icu4c (dependency of heroku)
	if [[ -d "$HOMEBREW_PREFIX/opt/icu4c/bin" ]]; then
		PATH="$HOMEBREW_PREFIX/opt/icu4c/bin:$PATH"
	fi
	if [[ -d "$HOMEBREW_PREFIX/opt/icu4c/sbin" ]]; then
		PATH="$HOMEBREW_PREFIX/opt/icu4c/sbin:$PATH"
	fi

	# Sphinx (dependency of ruby)
	if [[ -d "$HOMEBREW_PREFIX/opt/sphinx-doc/bin" ]]; then
		PATH="$HOMEBREW_PREFIX/opt/sphinx-doc/bin:$PATH"
	fi

	# GetText (dependency of gpg)
	if [[ -d "$HOMEBREW_PREFIX/opt/gettext/bin" ]]; then
		PATH="$HOMEBREW_PREFIX/opt/gettext/bin:$PATH"
	fi

	# trash-cli: don't uncomment this, as trash-cli doesn't support macos, and macos has its own trash bin now
	# if [[ -d "$HOMEBREW_PREFIX/opt/trash-cli/bin" ]]; then
	# 	PATH="$HOMEBREW_PREFIX/opt/trash-cli/bin:$PATH"
	# fi

	# Ruby
	if [[ -n ${HOMEBREW_RUBY_VERSION-} ]]; then
		p=''
		if [[ $HOMEBREW_RUBY_VERSION == 'default' ]]; then
			p="$HOMEBREW_PREFIX/opt/ruby"
			if [[ ! -d $p ]]; then
				p=''
			fi
		else
			p="$HOMEBREW_PREFIX/opt/ruby@$HOMEBREW_RUBY_VERSION"
			if [[ ! -d $p ]]; then
				__print_lines "# specified [HOMEBREW_RUBY_VERSION = $HOMEBREW_RUBY_VERSION] was not found at $p" >/dev/stderr
				p=''
			fi
		fi
		if [[ -n $p ]]; then
			add_prefix_dir "$p"
		fi
	else
		# add them all, excluding special paths
		rubydirs=("$HOMEBREW_PREFIX/opt/ruby"*'/bin')
		for rubydir in "${rubydirs[@]}"; do
			PATH="$rubydir:$PATH"
			rubygems "$rubydir/gem"
		done
	fi

	# Node
	nodedirs=("$HOMEBREW_CELLAR/node/"*'/bin')
	for nodedir in "${nodedirs[@]}"; do
		PATH="$nodedir:$PATH"
	done

	# Python
	# https://docs.brew.sh/Homebrew-and-Python
	if [[ -d "$HOMEBREW_PREFIX/opt/python/libexec/bin" ]]; then
		PATH="$HOMEBREW_PREFIX/opt/python/libexec/bin:$PATH"
	fi

	# Python: Pip
	pipdirs=("$HOME/Library/Python/"*'/bin')
	for pipdir in "${pipdirs[@]}"; do
		PATH="$pipdir:$PATH"
	done

	# OpenSSL (dependency of python, gpg, and node)
	# openssl is a symlink to whatever directory has the latest version
	add_prefix_dir "$HOMEBREW_PREFIX/opt/openssl"
	# ^^ setup-util-gocryptfs needs this on macos big sur
	# ```
	# Package libcrypto was not found in the pkg-config search path.
	# Perhaps you should add the directory containing `libcrypto.pc'
	# to the PKG_CONFIG_PATH environment variable
	# No package 'libcrypto' found
	# pkg-config: exit status 1
	# ```
	# and
	# ```
	# ld: library not found for -lcrypto
	# clang: error: linker command failed with exit code 1 (use -v to see invocation)
	# ````

	# NSS
	if [[ -d "$HOMEBREW_PREFIX/opt/nss/bin" ]]; then
		PATH="$HOMEBREW_PREFIX/opt/nss/bin:$PATH"
	fi

	# Anaconda
	if [[ -d "$HOMEBREW_PREFIX/anaconda3/bin" ]]; then
		PATH="$HOMEBREW_PREFIX/anaconda3/bin:$PATH"
	fi

	# Heroku
	if [[ -d "$HOMEBREW_PREFIX/heroku/bin" ]]; then
		PATH="$HOMEBREW_PREFIX/heroku/bin:$PATH"
	fi

	# Package Config
	# This was not recommended anywhere, but it seems logical as a way to have pkg-config bootstrapped with its default paths, of which it includes a lot more available configs than manually doing everything as we have done above
	if [[ -x "$HOMEBREW_PREFIX/bin/pkg-config" ]]; then
		PKG_CONFIG_PATH="$(pkg-config --variable pc_path pkg-config):$PKG_CONFIG_PATH"
	fi
else

	# linux
	# don't use [which] as we haven't finished setting up paths
	# and [which] writes its errors to stdout!

	# Ruby
	rubygems /usr/bin/gem
fi

# Deno for official yet stupid deno_install script, commented out as [setup-util-deno] is superior
# if [[ -z "${DENO_INSTALL-}" && -d "$HOME/.deno" ]]; then
# 	export DENO_INSTALL="$HOME/.deno"
# fi
# if [[ -n "${DENO_INSTALL-}" ]]; then
# 	PATH="$DENO_INSTALL/bin:$PATH"
# fi

# NVM
if [[ -z ${NVM_DIR-} && -d "$HOME/.nvm" ]]; then
	export NVM_DIR="$HOME/.nvm"
fi

# Python: pyenv
if [[ -z ${PYENV_ROOT-} && -d "$HOME/.pyenv" ]]; then
	export PYENV_ROOT="$HOME/.pyenv"
fi
if [[ -n ${PYENV_ROOT-} ]]; then
	PATH="$PYENV_ROOT/bin:$PATH"
	PATH="$PYENV_ROOT/shims:$PATH"
fi

# Rust: rustup
if [[ -z ${RUSTUP_HOME-} && -d "$HOME/.rustup" ]]; then
	export RUSTUP_HOME="$HOME/.rustup"
fi

# Rust: cargo
if [[ -z ${CARGO_HOME-} && -d "$HOME/.cargo" ]]; then
	export CARGO_HOME="$HOME/.cargo"
fi
if [[ -n ${CARGO_HOME-} ]]; then
	__mkdirp "$CARGO_HOME"
	PATH="$CARGO_HOME/bin:$PATH"

	# Rust: cargo target
	# workaround for ubuntu server, which /tmp may often be read-only
	# https://doc.rust-lang.org/stable/cargo/guide/build-cache.html
	export CARGO_TARGET_DIR
	__mkdirp "${CARGO_TARGET_DIR:="$CARGO_HOME/target"}"
fi

# Go
# https://pkg.go.dev/cmd/go#hdr-Environment_variables
# only define GOPATH, defining GOROOT and GOBIN cause too many errors on linux
# such as incorrect "is not in GOROOT" errors
# NOTE that go path is not where go is located, but where go packages will be installed
if __command_exists -- go; then
	export GOPATH
	# detect GOPATH if not defined
	if [[ -z ${GOPATH-} ]]; then
		# fetch the go bin paths
		if [[ -n ${HOMEBREW_CELLAR-} ]]; then
			# mac
			gopaths=("$HOMEBREW_CELLAR/go/"*)
			for gopath in "${gopaths[@]}"; do
				GOPATH="$gopath"
				break # only do the first
			done
		elif [[ $PREFER_XDG == 'yes' ]]; then
			# linux
			# prefer xdg, but support not xdg if it is there
			if [[ -d "$XDG_DATA_HOME/go" ]]; then
				GOPATH="$XDG_DATA_HOME/go"
			elif [[ -d "$HOME/go" ]]; then
				GOPATH="$HOME/go"
			else
				GOPATH="$XDG_DATA_HOME/go"
			fi
		else
			# linux
			# prefer not xdg, but support xdg if it is there
			if [[ -d "$HOME/go" ]]; then
				GOPATH="$HOME/go"
			elif [[ -d "$XDG_DATA_HOME/go" ]]; then
				GOPATH="$XDG_DATA_HOME/go"
			else
				GOPATH="$HOME/go"
			fi
		fi
	fi
	# if we were able to find one
	if [[ -n ${GOPATH-} ]]; then
		# then create its parts and add it to PATH
		__mkdirp "$GOPATH/bin" "$GOPATH/libexec"
		PATH="$GOPATH/bin:$PATH"
	fi
fi

# Clojurescript
if [[ -d "$HOME/.clojure/clojure-1.8" ]]; then
	PATH="$HOME/.clojure/clojure-1.8.0:$PATH"
	CLASSPATH="$HOME/.clojure/clojure-1.8.0:$CLASSPATH"
fi

# Yarn
if __command_exists -- yarn; then
	# on CI, yarn exists, yet this can return nothing
	p="$(yarn global bin 2>/dev/null || :)"
	if [[ -n $p ]]; then
		PATH="$p:$PATH"
	fi
fi

# Flossbank
if [[ -d "$HOME/.flossbank/bin" ]]; then
	PATH="$HOME/.flossbank/bin:$PATH"
fi

# 1Password, exposes op-ssh-sign
if [[ -d '/Applications/1Password.app/Contents/MacOS/' ]]; then
	PATH="/Applications/1Password.app/Contents/MacOS/:$PATH"
fi

# Generics: Java
CLASSPATH=".:$CLASSPATH"

# Generics: pre-XDG user bin paths (note the user should be preferring XDG_BIN_HOME)
if [[ -d "$HOME/.bin" ]]; then
	PATH="$HOME/.bin:$PATH"
fi
if [[ -d "$HOME/bin" ]]; then
	PATH="$HOME/bin:$PATH"
fi

# Generics: when XDG_BIN_HOME is customised, ensure the default XDG_BIN_HOME is still added, for anything that expects it
if [[ $XDG_BIN_HOME != "$HOME/.local/bin" ]]; then
	PATH="$HOME/.local/bin:$PATH"
fi
# Generics: XDG, always add, even if not existent, in case it is created later
PATH="$XDG_BIN_HOME:$PATH"
add_prefix_dir "$XDG_PREFIX" # only adds directories that exist

# GO LLVM
# https://stackoverflow.com/a/58488820
if [[ -n ${GOPATH-} ]]; then
	export CGO_CPPFLAGS CGO_LDFLAGS
	CGO_CPPFLAGS="$CPPFLAGS -O2 -g -Wno-nullability-completeness"
	CGO_LDFLAGS="$LDFLAGS -O2 -g"
fi

# Scripts
before_dorothy_paths
PATH="$DOROTHY/commands:$PATH"
PATH="$DOROTHY/commands.beta:$PATH"
PATH="$DOROTHY/commands.deprecated:$PATH"
PATH="$DOROTHY/user/commands:$PATH"
PATH="$DOROTHY/user/commands.local:$PATH"
after_dorothy_paths

# =====================================
# Finish

# Load the last user hook, to complete the environment configuration
after_everything

# =====================================
# Editor

# Now that the environment is configured, we can now configure the editor, as it is possible to be detected now that paths are setup.

# C = default locale, necessary for CI
# LC_ALL (LC_ALL also implies LC_COLLATE, LC_CTYPE, LC_MONETARY, LC_NUMERIC, LC_TIME)
if [[ -z ${LANG-} ]]; then
	LANG='C'
fi
if [[ -z ${LC_ALL-} ]]; then
	# fix on ssh into macos: warning: setlocale: LC_ALL: cannot change locale (C.UTF-8): No such file or directory
	# https://stackoverflow.com/questions/49778200/bash-warning-setlocale-lc-all-cannot-change-locale-en-us-utf-8#comment132342818_51361013
	if __command_missing -- locale || locale -a | grep --quiet --fixed-strings --regexp="$LANG"; then
		LC_ALL="$LANG"
	fi
fi

# EDITOR, SUDO_EDITOR doesn't do anything so ignore
if [[ -z ${EDITOR-} ]]; then
	EDITOR="$(edit --dry --no-prompt --terminal || :)"
fi

# =====================================
# Finale

# trunk-ignore(shellcheck/SC2034)
DOROTHY_ENVIRONMENT='yes'
