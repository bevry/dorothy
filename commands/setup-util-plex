#!/usr/bin/env bash

function setup_util_plex() (
	source "$DOROTHY/sources/bash.bash"

	# dependencies
	source "$DOROTHY/sources/ripgrep.bash"

	# =====================================
	# Preparation

	local service_title='Plex Media Server'
	local service_ids=(
		'plexmediaserver'
	)
	local service_uninstall_paths=(
		# user config and data
		'/var/lib/plexmediaserver/'

		# app data
		'/usr/lib/plexmediaserver/'
	)

	# =====================================
	# Setup Utility

	# https://forums.plex.tv/t/809529?u=balupton
	# fetch 'https://plex.tv/pms/downloads/1.json?channel=plexpass' | jq -r '.computer | (.Windows, .MacOS, .Linux) | .releases[].url'

	# apt doesn't seem to work correctly
	# APT_KEY='https://downloads.plex.tv/plex-keys/PlexSign.key' \
	# APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://downloads.plex.tv/repo/deb public main' \
	# APT='plexmediaserver' \

	# setup
	local arch options=(
		--cli='plex-media-server'
		--app='Plex Media Server'
		"$@"
		CASK='plex-media-server'
	)
	function get_json {
		fetch 'https://plex.tv/pms/downloads/1.json?channel=plexpass'
	}
	function get_platform_urls {
		if is-mac; then
			get_json | jq -r '.computer.MacOS.releases[].url'
		elif is-linux; then
			get_json | jq -r '.computer.Linux.releases[].url'
		elif is-windows; then
			get_json | jq -r '.computer.Windows.releases[].url'
		else
			get_json | jq -r '.computer | (.Windows, .MacOS, .Linux) | .releases[].url'
		fi
	}
	arch="$(get-arch)"
	if is-mac; then
		options+=(
			DOWNLOAD="$(get_platform_urls | rg --regexp='-universal.zip$')"
			DOWNLOAD_FILENAME='Plex Media Server.app' # maco
			DOWNLOAD_UNZIP_FORMAT='zip'
		)
	elif is-ubuntu; then
		if test "$arch" = 'x64'; then
			options+=("DEB=$(get_platform_urls | rg --regexp='_amd64.deb$')")
		elif test "$arch" = 'x32'; then
			options+=("DEB=$(get_platform_urls | rg --regexp='_i386.deb$')")
		elif test "$arch" = 'a64'; then
			options+=("DEB=$(get_platform_urls | rg --regexp='_arm64.deb$')")
		elif test "$arch" = 'a32'; then
			options+=("DEB=$(get_platform_urls | rg --regexp='_armhf.deb$')")
		fi
	elif command-exists rpm; then
		if test "$arch" = 'x64'; then
			options+=("RPM=$(get_platform_urls | rg --regexp='.x86_64.rpm$')")
		elif test "$arch" = 'x32'; then
			options+=("RPM=$(get_platform_urls | rg --regexp='.i686.rpm$')")
		fi
	fi
	setup-util "${options[@]}"

	# if missing, complete uninstall and exit
	if command-missing plex-media-server && ! get-app --quiet -- 'Plex Media Server'; then
		# remove services
		service-helper --remove -- \
			-- "${service_ids[@]}"

		# remove paths
		fs-rm --confirm --sudo --optional \
			-- "${service_uninstall_paths[@]}"

		# remove user
		if is-user -- plex; then
			sudo-helper -- userdel plex
		fi

		# remove group
		if is-group -- plex; then
			sudo-helper -- groupdel --force plex
		fi

		# all done for uninstall
		return 0
	fi

	# if installed, configure service if supported
	if service-helper --supported; then
		# verify the service was initialised
		if ! service-helper --exists -- "${service_ids[@]}"; then
			echo-error "$service_title was installed, however the service was not."
			return 1
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_plex "$@"
fi
