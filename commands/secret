#!/usr/bin/env bash
source "$DOROTHY/sources/essentials.sh"
source "$DOROTHY/sources/edit.sh"
source "$DOROTHY/sources/strict.bash"
# source "$DOROTHY/sources/debug.bash"
# @NOTE do not use the `ok` command instead of `|| :` â€” this file uses functions, and the `ok` command only works with commands

# Location
if test -z "${SECRETS-}"; then
	SECRETS="$DOROTHY/user/secrets"
fi
mkdir -p "$SECRETS"

# Check requirements exists
if ! command-exists jq; then
	brew install jq
fi
if ! command-exists op; then
	brew install --cask 1password-cli
fi

# Make this global to this script
export OP_SESSION
export OP_SUBDOMAIN
export database="$SECRETS/secrets.json"

function secret_resolve() {
	# many
	if test "${#@}" -gt '1'; then
		for var in "$@"; do
			value="$(secret_resolve "$var")"
			echo "$var=$value"
		done
		exit
	fi

	# singular
	key="$1"
	result="$(secret_read "$key" || :)"
	if is-string "$result"; then
		echo -n "$result"
	elif is-empty-string "$result"; then
		if ! sudo test -f "$database"; then
			stderr echo -en "ERROR: secret requires [$database] to exist, in the format of:\\n{\\n  \"SECRET\": [\"vault\", \"item\", \"field\"]\\n}"
			return 1
		fi
		vault="$(sudo jq -r ".${key}[0]" "$database")"
		item="$(sudo jq -r ".${key}[1]" "$database")"
		field="$(sudo jq -r ".${key}[2]" "$database")"
		if is-string "$vault" && is-string "$item" && is-string "$field"; then
			value="$(secret_fetch "$vault" "$item" "$field")"
		else
			stderr echo "ERROR: [$database] had an entry that did not have all three parts: [$vault] [$item] [$field]"
			return 1
		fi
		if is-empty-string "$value"; then
			stderr echo "ERROR: resolve returned nothing for: $key"
			return 1
		fi
		secret_write "$key" "$value"
		echo -n "$value"
	else
		echo "ERROR: could not fetch the secret: $key"
		return 1
	fi
}

function secret_write() {
	key="$1"
	value="$2"
	secret_delete "$key"
	if is-string "$value"; then
		echo -n "$value" >"$SECRETS/$key"
		sudo chown root: "$SECRETS/$key"
		sudo chmod 600 "$SECRETS/$key"
	else
		stderr echo "ERROR: wanted to write empty secret: $key"
		return 1
	fi
}

function secret_clear() {
	t="$(mktemp)"
	mv "$database" "$t"
	sudo rm -Rf "$SECRETS/*"
	mv "$t" "$database"
}

function secret_exists() {
	for key in "$@"; do
		sudo test -f "$SECRETS/$key"
	done
}

function secret_delete() {
	for key in "$@"; do
		sudo rm -f "$SECRETS/$key"
	done
}

function secret_read() {
	key="$1"
	if secret_exists "$key"; then
		value="$(sudo cat "$SECRETS/$key" | tr -d '\n')"
		if is-string "$value"; then
			echo -n "$value"
		else
			stderr echo "ERROR: cached secret was empty: $key"
			secret_delete "$key"
			return 1
		fi
	else
		stderr echo "ERROR: cached secret was missing: $key"
		return 1
	fi
}

function secret_signout() {
	if is-empty-string "${OP_SESSION-}"; then
		if secret_exists "OP_SESSION"; then
			OP_SESSION="$(secret_read OP_SESSION)"
			ok op signout --session="$OP_SESSION"
		fi
	else
		ok op signout --session="$OP_SESSION"
	fi
	secret_delete "OP_SESSION"
	secret_delete "OP_SUBDOMAIN"
}

function secret_signin() {
	# session
	if is-empty-string "${OP_SESSION-}"; then
		OP_SESSION="$(secret_read OP_SESSION || :)"
		if is-empty-string "$OP_SESSION"; then
			# subdomain
			if is-empty-string "${OP_SUBDOMAIN-}"; then
				OP_SUBDOMAIN="$(secret_read OP_SUBDOMAIN || :)"
				if is-empty-string "${OP_SUBDOMAIN-}"; then
					OP_SUBDOMAIN="$(ask 'What is your 1password subdomain?')"
					secret_write "OP_SUBDOMAIN" "$OP_SUBDOMAIN"
				fi
			fi
			# email
			email="$(ask 'What is your 1password email? This is not stored.')"
			# secret
			key="$(ask 'What is your 1password account key? This is not stored.')"
			# signin
			OP_SESSION="$(op signin "$OP_SUBDOMAIN" "$email" "$key" --output=raw)"
			secret_write "OP_SESSION" "$OP_SESSION"
		fi
	fi
}

function secret_grab() {
	vault="$1"
	item="$2"
	secret_signin
	result="$(ok op get item "$item" --vault="$vault" --session="$OP_SESSION")"
	if is-empty-string "$result"; then
		stderr echo "ERROR: Failed to fetch item ${item} from vault ${vault}. Nothing was returned."
		return 1
	elif [[ "$result" = *'signed in'* ]]; then
		stderr echo "ERROR: Failed to fetch item ${item} from vault ${vault}. Session expired. Run: secret signin"
		return 1
	elif [[ "$result" = *'ERROR'* ]]; then
		stderr echo "ERROR: Failed to fetch item ${item} from vault ${vault}. ${result}"
		return 1
	else
		echo -n "$result"
	fi
}

function secret_fetch() {
	vault="$1"
	item="$2"
	field="$3"
	if test "$field" = "username"; then
		secret_grab "$vault" "$item" | jq -r ".details.fields[] | select(.designation==\"username\").value"
	elif test "$field" = "password"; then
		secret_grab "$vault" "$item" | jq -r ".details.fields[] | select(.designation==\"password\").value"
	elif is-string "$field"; then
		secret_grab "$vault" "$item" | jq -r ".details.sections[] | select(.fields).fields[] | select(.t==\"$field\").v"
	fi
}

function secret_env() {
	before=()
	after=()
	found='no'

	for arg in "$@"; do
		if test "$arg" = '--'; then
			found='yes'
			continue
		fi
		if test "$found" = 'yes'; then
			after+=("$arg")
		else
			before+=("$arg")
		fi
	done

	if test "$found" = 'yes' -a "${#before[@]}" -ne '0' -a "${#after[@]}" -ne '0'; then
		vars=("${before[@]}")
		args=("${after[@]}")
	else
		stderr echo 'ERROR: -- was not found. Refer to usage.'
		return 1
		# vars=()
		# args=("${before[@]}")
	fi

	# load secrets
	envSecrets=()
	for var in "${vars[@]}"; do
		value="$(secret_resolve "$var")"
		envSecrets+=("$var=$value")
	done

	# replace secrets in args
	envArgs=()
	for arg in "${args[@]}"; do
		envArg="$arg"
		for var in "${vars[@]}"; do
			value="$(secret_resolve "$var")"
			envArg="${envArg//\$$var/$value}"
		done
		envArgs+=("$envArg")
	done

	# echo "loaded secrets:  ${vars[*]}"
	# echo "running command: ${args[*]}"
	# echo ''

	env "${envSecrets[@]}" "${envArgs[@]}"
}

if test -n "${1-}"; then
	if test "$1" = "env"; then
		secret_env "${@:2}"
	elif test "$1" = "clear" -o "$1" = "delete"; then
		if is-string "$2"; then
			secret_delete "${@:2}"
		else
			secret_clear
		fi
	elif test "$1" = "edit"; then
		edit "$database"
	elif test "$1" = "signin" -o "$1" = "login"; then
		secret_signout
		secret_signin
	elif test "$1" = "signout" -o "$1" = "logout"; then
		secret_signout
	elif test "$1" = "refresh"; then
		if is-string "$2"; then
			secret_delete "${@:2}"
			secret_resolve "${@:2}"
		else
			stderr echo 'ERROR: <name> was not found. Refer to usage.'
			exit 1
		fi
	elif test "$1" = "get"; then
		if is-string "$2"; then
			secret_resolve "${@:2}"
		else
			stderr echo 'ERROR: <name> was not found. Refer to usage.'
			exit 1
		fi
	elif test "$1" = "upgrade"; then
		# https://app-updates.agilebits.com/product_history/CLI
		brew install --cask 1password-cli --force
		# if contains-string "$(op update)" "available"; then
		# 	brew install --cask 1password-cli --force
		# fi
	else
		stderr echo 'invalid command'
	fi
else
	stderr echo 'USAGE:'
	stderr echo 'secret upgrade'
	stderr echo 'secret edit'
	stderr echo 'secret signin'
	stderr echo 'secret signout'
	stderr echo 'secret clear'
	stderr echo 'secret clear <name>'
	stderr echo 'secret refresh <name>'
	stderr echo 'secret get <name>'
	stderr echo 'secret env <secret...> -- <command> [args...]'
fi
