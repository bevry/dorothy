#!/usr/bin/env bash

# NOTE:
# do not use the `ok` command instead of `|| :` â€” this file uses functions, and the `ok` command only works with commands

function secret_() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile' 'empty'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Helper for 1password, allowing you to invoke applications with secrets securely.

			ACTIONS:
			install
			    The 1Password CLI tool will be installed upfront if it does not exist, however this command forces its upgrade.

			login|signin

			    Authenticate with the 1Password CLI tool.
			    If using 1Password CLI v1, sessions expire quickly for security, so this is occassionally required.
			    If using 1Password CLI v2 with Biometric security, this is rarely required.

			logout|signout

			    Invalidates your current authentication with the 1Password CLI tool.

			map <secret> [vault] [item] [field]

			    Map a secret to a specific 1Password vault, item, and field.

			    For example:

			        secret map MY_SECRET

			        Will ask you which of your vaults you would like to use,
			        then ask you which item inside that vault you would like to use,
			        then ask you which field inside that item you would like to use,
			        then it will map the MY_SECRET secret to that specification.

			        Once done, this enables:

			        secret get MY_SECRET
			        secret env MY_SECRET -- echo 'my secret is: \$MY_SECRET'

			get <secret>

			    Get the value of what the secret maps to,
			    from the cache if possible, otherwise from 1Password's API if signed in.

			env ...<secret> -- <command> [args...]

			    Gets the value of the secret(s) and passes them as configured environment variables to solely the command.
			    This prevents exposing your secrets to your general shell, your shell history, and unauthorised commands,
			    as with this, only the command you intend to run is given the secrets.

			    For example:

			        secret env MY_SECRET -- echo 'my secret is: \$MY_SECRET'

			        Will get the value of MY_SECRET, and provide it to the echo command's environment
			        such that when it is interpolated into

			            echo my secret is: \$MY_SECRET

			        \$MY_SECRET will be exist in that environment, and be outputted accordingly.

			unmap <secret>

			    Removes the mapping for the secret, such that its shorthand can no longer be fetched.

			invalidate [secret]

			    If a the secret argument was provided, then that secret alone will be cleared from the cache.
			    If no argument is provided, then all cached secrets will be cleared.

			fetch [vault] [item] [field]

			    Fetches the value of a field, from an item, from a 1Password vault.
			    If an argument is missing, you will be prompted to select its value from the available options.
			    Arguments can be partial values (for filtering), and can be the label or value.
			    Labels for vaults and items are converted to the UUID, to avoid conflicts against ambiguous names.
			    Results will be cached until they are invalidated by \`secret invalidate <secret>\`
			        or unmapped by \`secret unmap <secret>\`.

			    For example:

			        secret fetch

			            Will ask you which of your vaults to use,
			            then ask you which item inside that vault to use,
			            then ask you which field inside that item to fetch the value for.

			https

			    Update all the login URLs in your 1Password vault to use HTTPS if they support it,
			    otherwise attempt several variations and use what does work,
			    and if nothing works, then advise that the service appears unresponsive and is likely ready for archiving.

			help

			    Output this help message.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_args=() option_conceal='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-conceal'* | '--conceal'*)
			option_conceal="$(get-flag-value --affirmative --fallback="$option_conceal" -- "$item")"
			;;
		'signin') action='login' ;;
		'signout') action='logout' ;;
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		*)
			if test -z "$action"; then
				action="$item"
			else
				option_args+=("$item" "$@")
				shift $#
				break
			fi
			;;
		esac
	done

	# =====================================
	# Dependencies

	setup-util-jq --quiet
	if command-missing op; then
		setup-util-1password-cli --quiet
	fi

	# check compatibility
	local op_version
	op_version="$(op --version)"
	if test "$(version-compare "$op_version" 1)" -eq 0; then
		# https://developer.1password.com/docs/cli/v1/reference
		op_version=1
	elif test "$(version-compare "$op_version" 2)" -eq 0; then
		# https://developer.1password.com/docs/cli/upgrade
		# https://developer.1password.com/docs/cli/upgrade#step-2-update-your-scripts
		op_version=2
	else
		help "Unsupported 1Password CLI version: $op_version"
	fi

	# prepare
	local tty_target
	tty_target="$(is-tty --fallback)"

	# =====================================
	# Adjustments

	local actions=(
		'install'
		'login'
		'logout'
		'map'
		'env'
		'get'
		'invalidate'
		'unmap'
		'fetch'
		'https'
		'help'
	)
	action="$(
		choose-option \
			--question='What action do you wish to take?' \
			--filter="$action" -- "${actions[@]}"
	)"

	# =====================================
	# Configuration

	# database
	local sudo_reason='Secret is requesting your sudo/root/login password to securely store and access its secrets.'
	local database="$DOROTHY/user/config.local/secrets.json"
	function correct_database_permission {
		fs-own --user="$USER" --permissions='a-xrw,u+rw' --optional -- "$database" >"$tty_target"
		fs-own --user="$USER" --permissions='a-xrw,u+rwX' --optional -- "$XDG_CONFIG_HOME/op" >"$tty_target"
	}
	function correct_key_permission {
		local state_key="$1"
		fs-own --owner="root:" --permissions='a-xrw,u+rw' -- "$state_key" >"$tty_target"
	}
	if ! sudo-helper --reason="$sudo_reason" -- test -f "$database"; then
		print_line '{}' | sudo tee "$database" &>/dev/null
	fi

	# move old state location to new state location
	local state="$XDG_STATE_HOME/secrets"
	if test -d "$DOROTHY/user/secrets"; then
		mv -v "$DOROTHY/user/secrets" "$state"
	fi
	mkdir -p "$state"

	# ensure env vars are available
	export OP_SESSION OP_SUBDOMAIN
	if test -z "${OP_SESSION-}"; then
		OP_SESSION=''
	fi
	if test -z "${OP_SUBDOMAIN-}"; then
		OP_SUBDOMAIN=''
	fi

	# conceal
	local ask_password_arguments=()
	if test "$option_conceal" = 'yes'; then
		ask_password_arguments+=('--password')
	fi

	# =====================================
	# Action

	# cache actions
	function cache_clear {
		fs-rm --quiet --sudo --no-confirm --optional -- "$state/"*
	}
	function __cache_exists {
		local key
		for key in "$@"; do
			sudo-helper --reason="$sudo_reason" -- test -f "$state/$key" || return
		done
	}
	function cache_delete {
		local key
		for key in "$@"; do
			fs-rm --quiet --sudo --no-confirm -- "$state/$key"
		done
	}
	function cache_write {
		local key value
		key="$1"
		value="$2"
		cache_delete "$key"
		if is-value -- "$value"; then
			print_string "$value" >"$state/$key"
			correct_key_permission "$state/$key"
		else
			echo-error "Attempted to write an empty secret key [$key]"
			return 1
		fi
	}
	function cache_read {
		local key="$1" value status
		eval_capture --statusvar=status -- __cache_exists "$key"
		if test "$status" -eq 0; then
			value="$(sudo-helper --reason="$sudo_reason" -- cat "$state/$key" | tr -d '\n')"
			if is-value -- "$value"; then
				print_string "$value"
			else
				echo-error "Cached secret key [$key] was empty [$value]"
				cache_delete "$key"
				return 1
			fi
		else
			echo-error "Cached secret key [$key] was missing."
			return 1
		fi
	}
	function cache_read_if_exists {
		local status
		eval_capture --statusvar=status -- __cache_exists "$@"
		if test "$status" -eq 0; then
			eval_capture --statusvar=status -- cache_read "$@"
			return "$status"
		else
			return 0
		fi
	}

	# secret actions
	function secret_get {
		local status key result vault item field value

		# many
		if test "$#" -gt '1'; then
			for key in "$@"; do
				eval_capture --statusvar=status --stdoutvar=value -- secret_get "$key"
				if test "$status" -ne 0; then
					echo-error "Unable to fetch the secret key [$key] of many."
					return 1
				fi
				print_line "$key=$value"
			done
			return 0
		fi

		# singular
		key="$1"

		# fetch from cache
		eval_capture --statusvar=status -- __cache_exists "$key"
		if test "$status" -eq 0; then
			cache_read "$key"
			return
		fi

		# fetch from api
		vault="$(jq -r ".${key}[0]" "$database")"
		item="$(jq -r ".${key}[1]" "$database")"
		field="$(jq -r ".${key}[2]" "$database")"
		if is-value -- "$vault" "$item" "$field"; then
			value="$(fetch_field "$vault" "$item" "$field")"
		else
			echo-error "Key [$key] was missing all three parts of its mapping:"
			cat <<-EOF >/dev/stderr
				vault = [$vault]
				item  = [$item]
				field = [$field]

				Manually edit the database [$database]
				or use the [secret map ...] command to set the mapping accordingly.
			EOF
			return 1
		fi
		if is-empty-value -- "$value"; then
			echo-error "Key [$key] failed to resolve."
			return 1
		fi
		cache_write "$key" "$value"
		print_string "$value"
	}

	# secret_signout
	function secret_signout {
		local status
		if test -z "$OP_SESSION"; then
			eval_capture --statusvar=status -- __cache_exists 'OP_SESSION'
			if test "$status" -eq 0; then
				OP_SESSION="$(cache_read OP_SESSION)"
				if test "$op_version" -eq 2; then
					op signout --session "$OP_SESSION" >"$tty_target" || :
				else
					op signout --session="$OP_SESSION" >"$tty_target" || :
				fi
			fi
		else
			if test "$op_version" -eq 2; then
				op signout --session "$OP_SESSION" >"$tty_target" || :
			else
				op signout --session="$OP_SESSION" >"$tty_target" || :
			fi
		fi
		cache_delete 'OP_SESSION'
		cache_delete 'OP_SUBDOMAIN'
		OP_SESSION=''
	}

	# secret_signin
	function secret_signin {
		local email='' key='' status
		# setup permissions
		correct_database_permission
		# signout
		secret_signout
		# session
		if test -z "$OP_SESSION"; then
			OP_SESSION="$(cache_read_if_exists OP_SESSION)"
			if test -z "$OP_SESSION"; then
				# subdomain
				if test -z "$OP_SUBDOMAIN"; then
					OP_SUBDOMAIN="$(cache_read_if_exists OP_SUBDOMAIN)"
					if test -z "$OP_SUBDOMAIN"; then
						OP_SUBDOMAIN="$(
							ask --required "${ask_password_arguments[@]}" --question='What is your 1password subdomain?'
						)"
						cache_write "OP_SUBDOMAIN" "$OP_SUBDOMAIN"
					fi
				fi
				email="$(
					ask --required "${ask_password_arguments[@]}" \
						--question='What is your 1password email? This is not stored.'
				)"
				if test "$op_version" -eq 2; then
					eval_capture --statusvar=status --stdoutvar=OP_SESSION --stdoutpipe="$tty_target" -- \
						op account add --address "$OP_SUBDOMAIN" --email "$email" --signin --raw
					# OP_SESSION will equal '' if biometric auth is used
				else
					key="$(
						ask --required "${ask_password_arguments[@]}" \
							--question='What is your 1password account key? This is not stored.'
					)"
					# unfortunately, this still leaks email and subdomain
					# https://1password.community/discussion/122030/flag-to-disable-op-signin-from-outputting-email-and-subdomain/p1?new=1
					# don't pipe to anything else, as it breaks the OTP question
					eval_capture --statusvar=status --stdoutvar=OP_SESSION --stdoutpipe="$tty_target" -- \
						op signin "$OP_SUBDOMAIN" "$email" "$key" --raw
				fi
				if test "$status" -ne 0; then
					echo-error \
						"Failed to sign into [$OP_SUBDOMAIN] via the email [$email] and account key [$key]." \
						"OP_SESSION = [$OP_SESSION]"
					return 1
				fi
				if test -n "$OP_SESSION"; then
					cache_write "OP_SESSION" "$OP_SESSION"
				else
					cache_delete "OP_SESSION" # biometric
				fi
			fi
		fi
	}

	function op_wrap {
		local cmd=() status result
		if test -z "$OP_SESSION" && __cache_exists "OP_SESSION"; then
			OP_SESSION="$(cache_read OP_SESSION)"
		fi
		if test "$op_version" -eq 2; then
			cmd+=(
				op
				"$@"
				--session
				"$OP_SESSION"
			)
		else
			cmd+=(
				op
				"$@"
				--session="$OP_SESSION"
			)
		fi
		eval_capture --statusvar=status --outputvar=result -- "${cmd[@]}"
		if test "$status" -ne 0 || [[ $result == '[ERROR]'* ]]; then
			if [[ $result == *'signed in'* ]] || [[ $result == *'session expired'* ]]; then
				echo-style --notice='Session expired. Logging in...' >"$tty_target"
				eval_capture --statusvar=status --stdoutpipe="$tty_target" -- secret_signin
				if test "$status" -eq 0; then
					op_wrap "$@"
					return
				else
					return "$status"
				fi
			else
				print_line "$result" >/dev/stderr
				return "$status"
			fi
		else
			print_string "$result"
		fi
	}

	function op_grab {
		local vault="${1-}" item="${2-}" status

		if is-empty-value -- "$vault"; then
			# fetch available values
			if test "$op_version" -eq 2; then
				# https://developer.1password.com/docs/cli/reference/management-commands/vault#vault-list
				eval_capture --statusvar=status -- op_wrap vault list --format=json > >(jq -r '.[] | (.id, .name)')
			else
				eval_capture --statusvar=status -- op_wrap list vaults > >(jq -r '.[] | (.uuid, .name)')
			fi
		elif is-empty-value -- "$item"; then
			# fetch available items
			if test "$op_version" -eq 2; then
				# https://developer.1password.com/docs/cli/reference/management-commands/item#item-list
				eval_capture --statusvar=status -- op_wrap item list --vault "$vault" --format json > >(jq -r '.[] | (.id, .title)')
			else
				eval_capture --statusvar=status -- op_wrap list items --vault="$vault" > >(jq -r '.[] | (.uuid, .overview.title)')
			fi
		else
			# fetch item
			if test "$op_version" -eq 2; then
				# https://developer.1password.com/docs/cli/reference/management-commands/item#item-get
				# https://stackoverflow.com/a/40321859
				# newlines in notes will produces superflous tuples, so replace them four spaces
				# cli v2 needs null checks too
				eval_capture --statusvar=status -- \
					op_wrap item get "$item" --vault "$vault" --format json > >(jq -r '.fields[]? | select(.label != "" and .label != null and .value != "" and .value != null) | (.value, .label) | walk(if type == "string" then gsub("\\p{Cc}"; "    ") else . end)')
			else
				eval_capture --statusvar=status --stdoutvar=data -- op_wrap get item "$item" --vault="$vault"
				if test "$status" -eq 0; then
					# section fields
					local fields_via_section
					mapfile -t fields_via_section < <(print_line "$data" > >(jq -r '.details.sections[]? | select(.fields).fields[]? | select(.t != "" and .v != "") | (.v, .t)'))
					if is-array-count-ge --size=2 -- "${fields_via_section[@]}"; then
						echo-lines -- "${fields_via_section[@]}"
					fi

					# name fields
					local fields_via_name
					mapfile -t fields_via_name < <(print_line "$data" > >(jq -r '.details.fields[]? | select(.name != "" and .value != "") | (.value, .name)'))
					if is-array-count-ge --size=2 -- "${fields_via_name[@]}"; then
						echo-lines -- "${fields_via_name[@]}"
					fi

					# designation fields
					local fields_via_designation
					mapfile -t fields_via_designation < <(print_line "$data" > >(jq -r '.details.fields[]? | select(.designation != "" and .value != "") | (.value, .designation)'))
					if is-array-count-ge --size=2 -- "${fields_via_designation[@]}"; then
						echo-lines -- "${fields_via_designation[@]}"
					fi
				fi
			fi
		fi

		return "$status"
	}

	function fetch_vault {
		local vault="${1-}" tuples

		# fetch available vaults
		mapfile -t tuples < <(op_grab)
		if is-array-empty -- "${tuples[@]}"; then
			echo-error "Failed to fetch a vault:" $'\n' \
				"$(echo-verbose -- "${tuples[@]}")"
			return 1
		fi

		# filter or ask
		choose-option \
			--question="Which vault did you want with [$vault]?" \
			--filter="$vault" --label --visual="\$LABEL [\$VALUE]" \
			-- "${tuples[@]}"
	}

	function fetch_item {
		local vault="${1-}" item="${2-}" tuples

		# fetch available items
		mapfile -t tuples < <(op_grab "$vault")
		if is-array-empty -- "${tuples[@]}"; then
			echo-error "Failed to fetch any items:" $'\n' \
				"$(echo-verbose -- "${tuples[@]}")"
			return 1
		fi

		# filter or ask
		choose-option \
			--question="Which item did you want with [$item]?" \
			--filter="$item" --label --visual="\$LABEL [\$VALUE]" \
			-- "${tuples[@]}"
	}

	function fetch_field {
		local vault="${1-}" item="${2-}" field="${3-}" tuples
		local wants
		if test "${4-}" = '--label'; then
			# trunk-ignore(shellcheck/SC2016)
			wants='$LABEL'
		else
			# trunk-ignore(shellcheck/SC2016)
			wants='$VALUE'
		fi

		# fetch available items
		mapfile -t tuples < <(op_grab "$vault" "$item")
		if is-array-empty -- "${tuples[@]}"; then
			echo-error "Failed to fetch any items:" $'\n' \
				"$(echo-verbose -- "${tuples[@]}")"
			return 1
		fi

		# filter or ask
		choose-option \
			--question="Which field did you want with [$field]?" \
			--filter="$field" --label --visual="\$LABEL [\$VALUE]" --return="$wants" \
			-- "${tuples[@]}"
	}

	function get_job_count {
		jobs -p | echo-count-lines --stdin
	}

	function item_upgrade {
		local vault="$1" item="$2" status result

		# fetch
		if test "$op_version" -eq 2; then
			# [select(.primary = true)] returns multiple urls
			eval_capture --statusvar=status --stdoutvar=website -- op_wrap item get "$item" --vault "$vault" --format json > >(jq -r '.urls[]? | .href' | echo-first-line)
		else
			eval_capture --statusvar=status --stdoutvar=website -- op_wrap get item "$item" --vault "$vault" --fields website
		fi
		if test "$status" -ne 0; then
			echo-style --error="[$item] [$website] failed to fetch" >/dev/stderr
			return 1
		fi
		if test -z "$website"; then
			echo-style --dim="[$item] no urls"
			return 0
		fi

		# upgrade
		result="$(get-url-upgrade "$website" 2>/dev/null || :)"
		if test -z "$result"; then
			# echo to stdout, as is actionable for user if they are piping
			echo-style --warning="[$item] [$website] unresponsive, consider archiving" >/dev/stderr
			return 1
		fi

		# check if changed
		if test "$result" = "$website"; then
			echo-style --dim="[$item] [$website] already upgraded"
			return 0
		fi

		# echo to stdout, as is actionable for user if they are piping
		echo-style --success="[$item] [$website] => [$result]"

		# apply
		if test "$op_version" -eq 2; then
			eval_capture --statusvar=status -- op_wrap item edit "$item" --vault "$vault" --url "$result" --format json >/dev/null
		else
			eval_capture --statusvar=status -- op_wrap edit item "$item" --vault "$vault" website="$result"
		fi
		if test "$status" -ne 0; then
			echo-style --error="[$item] [$website] failed to save" >/dev/stderr
			return 1
		fi
	}

	function secret_https {
		local last="${1-}" status vault item
		if test "$op_version" -eq 2; then
			eval_capture --statusvar=status --stdoutvar=vaults -- op_wrap vault list --format json > >(jq -r '.[].id' | sort)
		else
			eval_capture --statusvar=status --stdoutvar=vaults -- op_wrap list vaults > >(jq -r '.[].uuid' | sort)
		fi
		if test "$status" -ne 0 -o -z "$vaults"; then
			echo-error "Failed to fetch vaults..."
			return 1
		fi
		for vault in $vaults; do
			if test "$op_version" -eq 2; then
				eval_capture --statusvar=status --stdoutvar=items -- op_wrap item list --categories Login --vault "$vault" --format json > >(jq -r '.[].id' | sort)
			else
				eval_capture --statusvar=status --stdoutvar=items -- op_wrap list items --categories Login --vault "$vault" > >(jq -r '.[].uuid' | sort)
			fi
			if test "$status" -ne 0 -o -z "$items"; then
				echo-style --warning="Failed to fetch items for vault [$vault]" >/dev/stderr
				continue
			fi
			# ignoring of status code is in case it returned a vault we don't have write access to
			for item in $items; do
				# resume
				if test -n "$last"; then
					if test "$item" = "$last"; then
						# stop skipping
						last=''
					else
						# continue skipping
						echo-style --dim="[$item] skipping" >"$tty_target"
						continue
					fi
				fi
				while test "$(get_job_count)" -eq 15; do
					sleep 3
				done
				(item_upgrade "$vault" "$item" || :) &
			done
		done

		# wait for completed jobs, then note completion
		while test "$(get_job_count)" -ne 0; do
			print_line "Waiting on [$(get_job_count)] jobs..." >"$tty_target"
			sleep 3
			jobs &>/dev/null # for some reason, this seems necessary to prevent hung jobs
		done
		print_line 'All done.' >"$tty_target"
	}

	function secret_fetch {
		local vault item
		vault="$(fetch_vault "${1-}")"
		item="$(fetch_item "$vault" "${2-}")"
		fetch_field "$vault" "$item" "${3-}"
	}

	function secret_map {
		local secret vault item field result
		secret="$(
			ask --required \
				--question='What shall the name of the environment variable (secret) be?' \
				--default="${1-}"
		)"
		vault="$(fetch_vault "${2-}")"
		item="$(fetch_item "$vault" "${3-}")"
		field="$(fetch_field "$vault" "$item" "${4-}" --label)"
		result="$(jq -r \
			--arg secret "$secret" \
			--arg vault "$vault" \
			--arg item "$item" \
			--arg field "$field" \
			'.[$secret] = [$vault, $item, $field]' \
			"$database")"
		print_line "$result" | sudo tee "$database" &>/dev/null
		print_lines \
			"Sucessfully updated [$database] so that [$secret] fetches [$vault].[$item].[$field]" \
			"Fetching [$secret]..." >"$tty_target"
		cache_delete "$secret"
		secret_get "$secret"
	}

	function secret_unmap {
		local secret result
		secret="$(
			ask --required \
				--question='What environment variable (secret) name do you wish to unmap?' \
				--default="${1-}"
		)"
		print_line 'Enter your sudo password to update the database with the correct permissions...' >"$tty_target"
		result="$(jq -r \
			--arg secret "$secret" \
			'del(.[$secret])' \
			"$database")"
		print_line "$result" | sudo tee "$database"
		cache_delete "$secret"
		print_line "Sucessfully unmapped [$secret]" >"$tty_target"
	}

	function secret_env {
		local before=() after=() found='no' args item
		local keys key value
		local env_secrets env_args env_arg

		while test "$#" -ne 0; do
			item="$1"
			shift
			case "$item" in
			'--')
				found='yes'
				after+=("$@")
				shift $#
				break
				;;
			*)
				before+=("$item")
				;;
			esac
		done

		if test "$found" = 'yes' && is-array-full -- "${before[@]}" && is-array-full -- "${after[@]}"; then
			keys=("${before[@]}")
			args=("${after[@]}")
		else
			print_line "found = $found"
			print_line 'after ='
			echo-verbose -- "${after[@]}"
			print_line 'before ='
			echo-verbose -- "${before[@]}"
			help "env action requires [--] separator"
		fi

		# load secrets
		env_secrets=()
		for key in "${keys[@]}"; do
			value="$(secret_get "$key")"
			env_secrets+=("$key=$value")
		done

		# replace secrets in args
		env_args=()
		for arg in "${args[@]}"; do
			env_arg="$arg"
			for key in "${keys[@]}"; do
				value="$(secret_get "$key")"
				env_arg="${env_arg//\$$key/$value}"
			done
			env_args+=("$env_arg")
		done

		# print_line "loaded secrets:  ${vars[*]}"
		# print_line "running command: ${args[*]}"
		# echo

		env "${env_secrets[@]}" "${env_args[@]}"
	}

	# =====================================
	# Act

	function ensure_authed {
		local status
		eval_capture --statusvar=status --no-output -- op_wrap account list
		if test "$status" -ne 0; then
			secret_signin
		fi
	}

	if test "$action" = 'install'; then
		setup-util-1password-cli --upgrade
	elif test "$action" = 'login'; then
		secret_signin
	elif test "$action" = 'logout'; then
		secret_signout
	elif test "$action" = 'map'; then
		ensure_authed
		secret_map "${option_args[@]}"
	elif test "$action" = 'env'; then
		ensure_authed
		secret_env "${option_args[@]}"
	elif test "$action" = 'get'; then
		ensure_authed
		if test -n "${option_args[*]}"; then
			secret_get "${option_args[@]}"
		else
			help "get action requires <name> argument"
		fi
	elif test "$action" = 'invalidate'; then
		if test -n "${option_args[*]}"; then
			cache_delete "${option_args[@]}"
		else
			cache_clear
		fi
	elif test "$action" = 'unmap'; then
		ensure_authed
		secret_unmap "${option_args[@]}"
	elif test "$action" = 'fetch'; then
		ensure_authed
		secret_fetch "${option_args[@]}"
	elif test "$action" = 'https'; then
		ensure_authed
		secret_https "${option_args[@]}"
	elif test "$action" = 'help'; then
		help
	else
		help 'Invalid <action>'
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	secret_ "$@"
fi
