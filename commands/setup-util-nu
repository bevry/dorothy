#!/usr/bin/env bash

# https://github.com/nushell/nushell
# https://github.com/nushell/nushell/issues/9999

# https://github.com/nushell/nushell/releases
# nu-0.83.1-aarch64-apple-darwin.tar.gz
# nu-0.83.1-aarch64-pc-windows-msvc.msi
# nu-0.83.1-aarch64-pc-windows-msvc.zip
# nu-0.83.1-aarch64-unknown-linux-gnu.tar.gz
# nu-0.83.1-armv7-unknown-linux-gnueabihf.tar.gz
# nu-0.83.1-riscv64gc-unknown-linux-gnu.tar.gz
# nu-0.83.1-x86_64-apple-darwin.tar.gz
# nu-0.83.1-x86_64-pc-windows-msvc.msi
# nu-0.83.1-x86_64-pc-windows-msvc.zip
# nu-0.83.1-x86_64-unknown-linux-gnu.tar.gz
# nu-0.83.1-x86_64-unknown-linux-musl.tar.gz

# https://repology.org/project/nushell/versions

function setup_util_nu() (
	source "$DOROTHY/sources/bash.bash"

	# nushell requires all sources files to exist ahead of time
	function write_state_config {
		local file="$1" method="$2" target="$3"
		# if the target exist and is a non-em,pty file, then source it
		if test -n "$target" -a -s "$target"; then
			# source it
			cat <<-EOF >"$file"
				#!/usr/bin/env nu
				$method $(echo-quote -- "$target")
			EOF
		else
			# otherwise just be empty
			cat <<-EOF >"$file"
				#!/usr/bin/env nu
			EOF
		fi
	}
	function do_configure {
		# ensure nushell configuration directory exists (needed for [dorothy install])
		# trunk-ignore(shellcheck/SC2016)
		mkdir -p "$(nu -c 'echo $nu.default-config-dir')"

		# ensure [themes/starship.nu] works
		mkdir -p "$XDG_STATE_HOME/starship"
		if command-exists starship; then
			starship init nu >"$XDG_STATE_HOME/starship/init.nu"
		else
			fs-rm --quiet --no-confirm -- "$XDG_STATE_HOME/starship/init.nu"
		fi
		write_state_config "$DOROTHY/state/sources/starship.nu" 'use' "$XDG_STATE_HOME/starship/init.nu"

		# ensure [sources/autocomplete.nu] works
		mkdir -p "$XDG_STATE_HOME/carapace"
		if command-exists carapace; then
			carapace _carapace nushell >"$XDG_STATE_HOME/carapace/init.nu"
		else
			fs-rm --quiet --no-confirm -- "$XDG_STATE_HOME/carapace/init.nu"
		fi
		write_state_config "$DOROTHY/state/sources/carapace.nu" 'source' "$XDG_STATE_HOME/carapace/init.nu"

		# ensure [(config|config.local)/interactive.nu] works
		local file files=(
			'interactive.nu'
		)
		local dir dirs=(
			'config.local'
			'config'
		)
		for file in "${files[@]}"; do
			# scaffold configuration files if the user is setup and has configuration directories
			if test -d "$DOROTHY/user/config"; then
				# user configuration exists, scaffold the config.local file
				if test -d "$DOROTHY/user/config.local" -a ! -f "$DOROTHY/user/config.local/$file"; then
					cat <<-EOF >"$DOROTHY/user/config.local/$file"
						#!/usr/bin/env nu

						# load my public configuration
						source ../config/$file
					EOF
				fi
				# user configuration exists, scaffold the config file
				if test ! -f "$DOROTHY/user/config/$file"; then
					cat <<-EOF >"$DOROTHY/user/config/$file"
						#!/usr/bin/env nu

						# load the dorothy defaults
						source ~/.local/share/dorothy/config/$file
					EOF
					# ^ this should load in a way that is cross-os compatible, hence [source ~/...] instead of interpolating [source $DOROTHY/...]
				fi
			fi

			# enable or disable the configuration files, based on their existence
			for dir in "${dirs[@]}"; do
				write_state_config "$DOROTHY/state/$dir/$file" 'source' "$DOROTHY/user/$dir/$file"
				# ^ as this is local to the machine, it doesn't need to be cross-os comaptible
			done
		done
	}

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=nu; then
		do_configure
		return 0
	fi

	# setup
	local arch options=(
		--name='Nushell'
		--cli='nu'
		"$@"
		APK='nushell' # ALPINE
		AUR='nushell' # ARCH
		BREW='nushell'
		CARGO='nu'
		CHOCO='nushell'
		EMERGE='app-shells/nushell' # GENTOO
		NIX='nushell'
		NODE='nushell'
		SCOOP='nu'
		WINGET='nushell'
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='nushell/nushell' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB="*/$2"
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-apple-darwin.tar.gz' 'nu'
		else
			add_download_option '-x86_64-apple-darwin.tar.gz' 'nu'
		fi
	elif is-linux; then # includes wsl
		if test "$arch" = 'r64'; then
			add_download_option '-riscv64gc-unknown-linux-gnu.tar.gz' 'nu'
		elif test "$arch" = 'a64'; then
			add_download_option '-aarch64-unknown-linux-gnu.tar.gz' 'nu'
		elif test "$arch" = 'a32'; then
			add_download_option '-armv7-unknown-linux-gnueabihf.tar.gz' 'nu'
		elif test "$arch" = 'x64'; then
			# add_download_option '-x86_64-unknown-linux-gnu.tar.gz' 'nu'
			add_download_option '-x86_64-unknown-linux-musl.tar.gz' 'nu'
		fi
	elif is-wsl; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-pc-windows-msvc.zip' 'nu.exe' # uses windows config, rather than wsl config
		elif test "$arch" = 'x64'; then
			add_download_option '-x86_64-pc-windows-msvc.zip' 'nu.exe' # uses windows config, rather than wsl config
		fi
	fi
	setup-util "${options[@]}"
	# .msi failed with: This installation package could not be opened. Contact the application vendor to verify that this is a valid Windows Installer package.
	#
	# function add_installer_option {
	# 	options+=(
	# 		INSTALLER="$(get_github_asset_url "$1")"
	# 		INSTALLER_OPEN=yes
	# 	)
	# }
	# add_installer_option '-aarch64-pc-windows-msvc.msi'
	# add_installer_option '-x86_64-pc-windows-msvc.msi'

	# if installed, then configure
	if command-exists nu; then
		do_configure
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_nu "$@"
fi
