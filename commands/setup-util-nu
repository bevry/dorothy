#!/usr/bin/env bash

# https://github.com/nushell/nushell
# https://github.com/nushell/nushell/issues/9999

# https://github.com/nushell/nushell/releases
# nu-0.83.1-aarch64-apple-darwin.tar.gz
# nu-0.83.1-aarch64-pc-windows-msvc.msi
# nu-0.83.1-aarch64-pc-windows-msvc.zip
# nu-0.83.1-aarch64-unknown-linux-gnu.tar.gz
# nu-0.83.1-armv7-unknown-linux-gnueabihf.tar.gz
# nu-0.83.1-riscv64gc-unknown-linux-gnu.tar.gz
# nu-0.83.1-x86_64-apple-darwin.tar.gz
# nu-0.83.1-x86_64-pc-windows-msvc.msi
# nu-0.83.1-x86_64-pc-windows-msvc.zip
# nu-0.83.1-x86_64-unknown-linux-gnu.tar.gz
# nu-0.83.1-x86_64-unknown-linux-musl.tar.gz

# https://repology.org/project/nushell/versions

function setup_util_nu() (
	source "$DOROTHY/sources/bash.bash"

	# nushell requires all sources files to exist ahead of time
	function do_configure {
		# ensure nushell configuration directory exists (needed for [dorothy install])
		# trunk-ignore(shellcheck/SC2016)
		mkdir -p "$(nu -c 'echo $nu.default-config-dir')"

		# ensure [themes/starship.nu] works for [themes/starship.nu] to set it up later
		mkdir -p "$XDG_STATE_HOME/starship"
		touch "$XDG_STATE_HOME/starship/init.nu"

		# ensure [sources/interactive.nu] works
		if test ! -f "$DOROTHY/user/config.local/interactive.nu"; then
			cat <<-EOF >"$DOROTHY/user/config.local/interactive.nu"
				#!/usr/bin/env nu

				# load my public configuration
				source ../config/interactive.nu
			EOF
		fi
		if test ! -f "$DOROTHY/user/config/interactive.nu"; then
			cat <<-EOF >"$DOROTHY/user/config/interactive.nu"
				#!/usr/bin/env nu

				# load the dorothy defaults
				source ~/.local/share/dorothy/config/interactive.nu
			EOF
		fi
	}

	# improve performance
	if test "$*" = '--quiet' && command-exists nu; then
		do_configure
		return 0
	fi

	# setup
	local arch options=(
		--name='Nushell'
		--cli='nu'
		"$@"
		APK='nushell' # ALPINE
		AUR='nushell' # ARCH
		BREW='nushell'
		CARGO='nu'
		CHOCO='nushell'
		EMERGE='app-shells/nushell' # GENTOO
		NIX='nushell'
		NODE='nushell'
		SCOOP='nu'
		WINGET='nushell'
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='nushell/nushell' \
			--release='latest' \
			--asset-filter="$(echo-escape-regex "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_UNZIP_FILTER='*/nu'
		)
	}
	function add_installer_option {
		options+=(
			INSTALLER="$(get_github_asset_url "$1")"
			INSTALLER_OPEN=yes
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-apple-darwin.tar.gz'
		else
			add_download_option '-x86_64-apple-darwin.tar.gz'
		fi
	elif is-wsl; then
		if test "$arch" = 'a64'; then
			add_download_option '-aarch64-pc-windows-msvc.zip'
			add_installer_option '-aarch64-pc-windows-msvc.msi'
		elif test "$arch" = 'x64'; then
			add_download_option '-x86_64-pc-windows-msvc.zip'
			add_installer_option '-x86_64-pc-windows-msvc.msi'
		fi
	else
		if test "$arch" = 'r64'; then
			add_download_option '-riscv64gc-unknown-linux-gnu.tar.gz'
		elif test "$arch" = 'a64'; then
			add_download_option '-aarch64-unknown-linux-gnu.tar.gz'
		elif test "$arch" = 'a32'; then
			add_download_option '-armv7-unknown-linux-gnueabihf.tar.gz'
		elif test "$arch" = 'x64'; then
			# add_download_option '-x86_64-unknown-linux-gnu.tar.gz'
			add_download_option '-x86_64-unknown-linux-musl.tar.gz'
		fi
	fi
	setup-util "${options[@]}"

	# if installed, then configure
	if command-exists nu; then
		do_configure
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_nu "$@"
fi
