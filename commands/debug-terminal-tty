#!/usr/bin/env bash

function debug_terminal_tty() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================

	function __act {
		# $-
		__print_lines "\$- = $-"

		# tty:
		# alpine doesn't support the [-p] argument
		if ! is-apk && __command_exists -- ps; then
			__print_lines '' 'tty:'
			ps -p "$$" -o tty= || :
		fi

		# lsof:
		if __command_exists -- lsof; then
			__print_lines '' 'lsof:'
			lsof -p $$ || :
		fi

		# /dev/fd/*
		__print_lines '' '/dev/fd/*:'
		ls -l /dev/fd/* || :
		file /dev/fd/* || :

		# /dev/pts/*
		if [[ -e /dev/pts ]]; then
			__print_lines '' '/dev/pts/*:'
			ls -l /dev/pts/* || :
			file /dev/pts/* || :
		fi

		# realpath /dev/fd/*
		__print_lines '' 'realpath /dev/fd/*:'
		fs-realpath -- /dev/fd/* || :

		# proc:
		# https://stackoverflow.com/a/54668834/130638
		if ls /proc/$$/fdinfo/* >/dev/null 2>&1 || grep -q 'flags:    00$' /proc/$$/fdinfo/0; then
			__print_lines '' proc_pass
		else
			__print_lines '' proc_fail
		fi

		# attempts at detection

		# -c /dev/stdin to handle background in ssh -T
		# note that if everything is captured, such as eval_capture with stdin modification, then this appears true
		( ([[ -n ${SSH_CONNECTION-} && -n ${SSH_CLIENT-} && -z ${SSH_TTY-} ]] && __print_lines is_actually_ssh_T) || __print_lines is_not_actually_ssh_T) || :
		( ([[ (-p /dev/stdin || -c /dev/stdin) && -p /dev/stdout && -p /dev/stderr ]] && ! (: >/dev/stdin) && __print_lines is_ssh_T_or_all_custom) || __print_lines is_neither_ssh_T_or_all_custom) || :
		( (! [[ -c /dev/stdin ]] && (: >/dev/stdin) && __print_lines is_CI) || __print_lines is_not_CI) || :

		( (tty -s && __print_lines tty_s_pass) || __print_lines tty_s_fail) || :

		( ([[ -t 0 ]] && __print_lines test_t_stdin_pass) || __print_lines test_t_stdin_fail) || :
		( ([[ -t 1 ]] && __print_lines test_t_stdout_pass) || __print_lines test_t_stdout_fail) || :
		( ([[ -t 2 ]] && __print_lines test_t_stderr_pass) || __print_lines test_t_stderr_fail) || :

		( ([[ -p /dev/stdin ]] && __print_lines test_p_stdin_pass) || __print_lines test_p_stdin_fail) || :
		( ([[ -p /dev/stdout ]] && __print_lines test_p_stdout_pass) || __print_lines test_p_stdout_fail) || :
		( ([[ -p /dev/stderr ]] && __print_lines test_p_stderr_pass) || __print_lines test_p_stderr_fail) || :
		( ([[ -p /dev/tty ]] && __print_lines test_p_tty_pass) || __print_lines test_p_tty_fail) || :

		( ([[ -c /dev/stdin ]] && __print_lines test_c_stdin_pass) || __print_lines test_c_stdin_fail) || :
		( ([[ -c /dev/stdout ]] && __print_lines test_c_stdout_pass) || __print_lines test_c_stdout_fail) || :
		( ([[ -c /dev/stderr ]] && __print_lines test_c_stderr_pass) || __print_lines test_c_stderr_fail) || :
		( ([[ -c /dev/tty ]] && __print_lines test_c_tty_pass) || __print_lines test_c_tty_fail) || :

		# check if reading is even possible (If TIMEOUT is 0, read returns immediately, without trying to read any data, returning success only if input is available on the specified file descriptor.)
		( ([[ -t 0 ]] && __print_lines read_default_pass) || __print_lines read_default_fail) || :
		( ([[ -t 0 ]] </dev/stdin && __print_lines read_stdin_pass) || __print_lines read_stdin_fail) || :
		( ([[ -t 0 ]] </dev/stdout && __print_lines read_stdout_pass) || __print_lines read_stdout_fail) || :
		( ([[ -t 0 ]] </dev/stderr && __print_lines read_stderr_pass) || __print_lines read_stderr_fail) || :
		( ([[ -t 0 ]] </dev/tty && __print_lines read_tty_pass) || __print_lines read_tty_fail) || :

		# don't use exec, don't use printf, they interfered with the read-key tests, as read-key would read [exec]
		# : is the same check but it is superior because it is a proper noop, unlike exec and printf

		( (: </dev/stdin && __print_lines noop_from_stdin_pass) || __print_lines noop_from_stdin_fail) || :
		( (: </dev/stdout && __print_lines noop_from_stdout_pass) || __print_lines noop_from_stdout_fail) || :
		( (: </dev/stderr && __print_lines noop_from_stderr_pass) || __print_lines noop_from_stderr_fail) || :
		( (: </dev/tty && __print_lines noop_from_tty_pass) || __print_lines noop_from_tty_fail) || :

		( (: >/dev/stdin && __print_lines noop_to_stdin_pass) || __print_lines noop_to_stdin_fail) || :
		( (: >/dev/stdout && __print_lines noop_to_stdout_pass) || __print_lines noop_to_stdout_fail) || :
		( (: >/dev/stderr && __print_lines noop_to_stderr_pass) || __print_lines noop_to_stderr_fail) || :
		( (: >/dev/tty && __print_lines noop_to_tty_pass) || __print_lines noop_to_tty_fail) || :

		( (: </dev/stdin >/dev/stdin && __print_lines noop_bidirectional_stdin_pass) || __print_lines noop_bidirectional_stdin_fail) || :
		( (: </dev/stdout >/dev/stdout && __print_lines noop_bidirectional_stdout_pass) || __print_lines noop_bidirectional_stdout_fail) || :
		( (: </dev/stderr >/dev/stderr && __print_lines noop_bidirectional_stderr_pass) || __print_lines noop_bidirectional_stderr_fail) || :
		( (: </dev/tty >/dev/tty && __print_lines noop_bidirectional_tty_pass) || __print_lines noop_bidirectional_tty_fail) || :
	}

	local stdout stderr

	__act

	__print_lines '' '' '### testing pipe ###'
	__print_lines 'testing pipe' | __act

	__print_lines '' '' '### testing delayed pipe ###'
	{
		sleep 3
		__print_line
	} | __act || : # this is necessary, as otherwise the pipe fails with 141

	__print_lines '' '' '### testing <<< ###'
	__act <<<'testing <<<'

	__print_lines '' '' '### testing < <(...) ###'
	__act < <(__print_lines 'testing <<<')

	__print_lines '' '' '### testing background ###'
	__act &
	wait $!

	__print_lines '' '' '### --stdoutvar ###'
	stdout=''
	stderr=''
	eval_capture --stdoutvar=stdout -- __act
	__print_lines 'stdout ='
	echo-lines --indent='    ' --stdin <<<"$stdout"
	__print_lines 'stderr ='
	echo-lines --indent='    ' --stdin <<<"$stderr"

	__print_lines '' '' '### --stderrvar ###'
	stdout=''
	stderr=''
	eval_capture --stderrvar=stderr -- __act
	__print_lines 'stdout ='
	echo-lines --indent='    ' --stdin <<<"$stdout"
	__print_lines 'stderr ='
	echo-lines --indent='    ' --stdin <<<"$stderr"

	__print_lines '' '' '### --stdoutvar --stderrvar ###'
	stdout=''
	stderr=''
	eval_capture --stdoutvar=stdout --stderrvar=stderr -- __act
	__print_lines 'stdout ='
	echo-lines --indent='    ' --stdin <<<"$stdout"
	__print_lines 'stderr ='
	echo-lines --indent='    ' --stdin <<<"$stderr"

	__print_lines '' '' '### pipe to --stdoutvar --stderrvar ###'
	stdout=''
	stderr=''
	__print_lines 'testing pipe' | eval_capture --stdoutvar=stdout --stderrvar=stderr -- __act
	__print_lines 'stdout ='
	echo-lines --indent='    ' --stdin <<<"$stdout"
	__print_lines 'stderr ='
	echo-lines --indent='    ' --stdin <<<"$stderr"

	__print_lines '' '' '### delayed pipe to --stdoutvar --stderrvar ###'
	stdout=''
	stderr=''
	{
		sleep 3
		__print_line
	} | eval_capture --stdoutvar=stdout --stderrvar=stderr -- __act || :
	__print_lines 'stdout ='
	echo-lines --indent='    ' --stdin <<<"$stdout"
	__print_lines 'stderr ='
	echo-lines --indent='    ' --stdin <<<"$stderr"

	__print_lines '' '' '###  <<< to --stdoutvar --stderrvar ###'
	stdout=''
	stderr=''
	eval_capture --stdoutvar=stdout --stderrvar=stderr -- __act <<<'testing <<<'
	__print_lines 'stdout ='
	echo-lines --indent='    ' --stdin <<<"$stdout"
	__print_lines 'stderr ='
	echo-lines --indent='    ' --stdin <<<"$stderr"

	__print_lines '' '' '###  < <(...) to --stdoutvar --stderrvar ###'
	stdout=''
	stderr=''
	eval_capture --stdoutvar=stdout --stderrvar=stderr -- __act < <(__print_lines 'testing <<<')
	__print_lines 'stdout ='
	echo-lines --indent='    ' --stdin <<<"$stdout"
	__print_lines 'stderr ='
	echo-lines --indent='    ' --stdin <<<"$stderr"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	debug_terminal_tty "$@"
fi
