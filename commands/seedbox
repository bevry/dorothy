#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# config
varfile="$DOROTHY/user/env/seedbox.bash"
if test -f "$varfile"; then
	source "$varfile"
else
	echo "The config file [$varfile] was not found, will create one for you manually..."
	echo
	echo "Currently creation only supports NordVPN, if you use a different VPN provider, then:"
	echo -e "1. Code in the support: $DOROTHY/commands/seedbox"
	echo -e "2. Send a pull request: https://github.com/bevry/dorothy/blob/master/commands/seedbox"
	echo

	datapath="$(ask --question="Where do you want your seedbox data to exist?" --default="$HOME/Downloads/seedbox" --required --confirm)"
	mkdir -p "$datapath"
	vpnuser="$(ask --question="What is your NordVPN username?" --required)"
	vpnpass="$(ask --question="What is your NordVPN password?" --required --password)"
	echo

	cat << EOF > "$varfile"
#!/usr/bin/env bash

if test "\$(get-hostname)" = '$(get-hostname)'; then
	export datapath='$datapath'
	export vpnuser='$vpnuser'
	export vpnpass='$vpnpass'
else
	echo 'Not running on an intended host.'
	exit 0
fi

EOF

	echo "[$varfile] created, proceeding with it now..."
	source "$varfile"
	echo
fi

# validate
if test -z "${seedboxport-}"; then
	seedboxport='9091'
fi
if test -z "${vpnprovider-}"; then
	vpnprovider='NORDVPN'
fi
if test -z "${vpnprotocol-}"; then
	vpnprotocol='udp'
fi
if test -z "${vpncountry-}"; then
	vpncountry="$(what-is-my-country)"
fi
if test -z "${datapath-}"; then
	stderr echo 'datapath configuration missing'
	exist 1
fi
if test -z "${vpnuser-}"; then
	stderr echo 'vpnuser configuration missing'
	exist 1
fi
if test -z "${vpnpass-}"; then
	stderr echo 'vpnpass configuration missing'
	exist 1
fi

# ensure data path exists already
function check_data {
	if ! is-dir "$datapath"; then
		stderr "datapath does not appear mounted: $datapath"
		exit 1
	fi
}

# dependencies
if ! command-exists docker; then
	stderr echo "docker was not found, install it first with [setup-docker]"
	exit 1
fi

# prepare
image='haugene/transmission-openvpn'

# actions
function seedbox_ip {
	local id="$(seedbox_id)"
	if test -z "$id"; then
		echo 'no seedbox to get ip for'
		return 1
	fi
	docker exec -it "$id" curl -fsSL 'http://ipecho.net/plain'
}
function seedbox_id {
	mapfile -t ids < <(docker ps -a --filter ancestor="$image" --format '{{ .ID }}')
	if test "${#ids[@]}" -eq 0; then
		return 0
	fi
	choose-option --question='Which container ID to use?' --required -- "${ids[@]}"
}
function seedbox_debug {
	local id="$(seedbox_id)"
	if test -z "$id"; then
		echo 'no seedbox to get debug for'
		return 1
	fi
	docker exec -it "$id" sh -c "apk add curl bind-tools; $(cat "$DOROTHY/commands/debug-network")"
}
function seedbox_logs {
	local id="$(seedbox_id)"
	if test -z "$id"; then
		echo 'no seedbox to get logs for'
		return 1
	fi
	docker logs "$id" "$@"
}
function seedbox_follow {
	seedbox_logs --follow
}
function seedbox_status {
	local id="$(seedbox_id)" localip hostip seedboxip details
	if test -z "$id"; then
		echo 'no seedbox to get status for'
		return 1
	fi
	localip="$(ip-local)"
	hostip="$(ip-remote)"
	seedboxip="$(seedbox_ip)"
	details=(
		"host ip	     =  $hostip"
		"seedbox ip   =  $seedboxip"
		"seedbox url  =  http://$localip:$seedboxport"
	)
	if test "$hostip" != "$seedboxip"; then
		echo 'seedbox is running correctly'
		echo-lines "${details[@]}"
	else
		echo 'seedbox did not connect to the vpn it seems'
		echo-lines "${details[@]}"
		echo
		if confirm-positive 'Would you like to debug it?'; then
			seedbox_debug
		fi
		exit 1
	fi
}
function seedbox_create {
	local dnsip id

	check_data
	echo 'seedbox creating...'

	# create
	dnsip="$(what-is-my-exposed-dns)"
	set -x # <debug>
	docker run \
		--detach \
		-v "$datapath":/data \
		-e OPENVPN_PROVIDER="$vpnprovider" \
		-e OPENVPN_USERNAME="$vpnuser" \
		-e OPENVPN_PASSWORD="$vpnpass" \
		-e OPENVPN_OPTS='--mute-replay-warnings --inactive 0 --ping 0 --ping-exit 0 --ping-restart 0 --pull-filter ignore ping' \
		-e NORDVPN_CATEGORY='P2P' \
		-e NORDVPN_COUNTRY="$vpncountry" \
		-e NORDVPN_PROTOCOL="$vpnprotocol" \
		-e LOCAL_NETWORK=192.168.0.0/16 \
		-e HEALTH_CHECK_HOST='api.nordvpn.com' \
		-e TRANSMISSION_WEB_UI=flood-for-transmission \
		-e WEBPROXY_ENABLED=false \
		--log-driver json-file \
		--log-opt max-size=10m \
		--cap-add=NET_ADMIN \
		--net=bridge --dns="$dnsip" \
		-p "$seedboxport":"$seedboxport" \
		"$image"

	# https://docs.docker.com/engine/reference/run/
	# https://docs.docker.com/engine/reference/run/#restart-policies---restart
	# --restart=on-failure
	# ^ Restart only if the container exits with a non-zero exit status. Optionally, limit the number of restart retries the Docker daemon attempts.
	# --restart=unless-stopped
	# ^ Always restart the container regardless of the exit status, including on daemon startup, except if the container was put into a stopped state before the Docker daemon was stopped
	# restart is handled via `docker update` commands before and after start/stop

	# -e OPENVPN_OPTS='-mute-replay-warnings' \
	# --sysctl net.ipv6.conf.all.disable_ipv6=1 \
	# Options error: the --route-pre-down directive should have at most 1 parameter.  To pass a list of arguments as one of the parameters, try enclosing them in double quotes ("").


	# https://openvpn.net/community-resources/reference-manual-for-openvpn-2-4/
	# OPENVPN_OPTS
	# --mute-replay-warnings
	# ^ Silence the output of replay warnings, which are a common false alarm on WiFi networks. This option preserves the security of the replay protection code without the verbosity associated with warnings about duplicate packets.
	# --inactive 0 --ping 0 --ping-exit 0 --ping-restart 0
	# --inactive 3600 --ping 10 --ping-exit 60
	# ^ when used on both peers will cause OpenVPN to exit within 60 seconds if its peer disconnects, but will exit after one hour if no actual tunnel data is exchanged.
	# --pull-filter ignore ping

	# https://haugene.github.io/docker-transmission-openvpn/config-options/#health_check_option
	# HEALTH_CHECK_HOST
	# Because your VPN connection can sometimes fail, Docker will run a health check on this container every 5 minutes to see if the container is still connected to the internet. By default, this check is done by pinging google.com once. You change the host that is pinged.

	# https://support.nordvpn.com/Connectivity/Linux/1047409422/How-can-I-connect-to-NordVPN-using-Linux-Terminal.htm
	# nordvpn recommends disabling ipv6, which the image syntax should be
	# https://haugene.github.io/docker-transmission-openvpn/provider-specific/
	# --sysctl net.ipv6.conf.all.disable_ipv6=1

	# -e TZ=UTC
	# -e NORDVPN_PROTOCOL=tcp

	# continue
	set +x  # </debug>
	id="$(seedbox_id)"

	echo 'seedbox created'
}
function seedbox_stop {
	local id="$(seedbox_id)"
	if test -z "$id"; then
		echo 'no seedbox to stop'
		return 0
	fi
	echo "seedbox stopping... $(date)"
	set -x # <debug>
	docker update --restart=no "$id"
	#   -t, --time int   Seconds to wait for stop before killing it (default 10)
	docker stop --time 60 "$id"
	set +x # </debug>
	echo 'seedbox stopped'
}
function seedbox_start {
	check_data
	local id="$(seedbox_id)"
	if test -z "$id"; then
		echo 'no seedbox to start'
		return 1
	fi
	echo 'seedbox starting...'
	set -x # <debug>
	docker update --restart=always "$id"
	docker start "$id"
	set +x # </debug>
	echo 'seedbox started'
}
function seedbox_restart {
	seedbox_stop
	seedbox_start
}
function seedbox_remove {
	seedbox_stop
	local id="$(seedbox_id)"
	if test -z "$id"; then
		echo 'no seedbox to remove'
		return 0
	fi
	echo 'removing seedbox...'
	docker rm "$id"
	echo 'seedbox removed'
}
function seedbox_clean {
	seedbox_remove
	docker rmi "$image" || :
}
function seedbox_upgrade {
	seedbox_clean
	echo 'upgrading image...'
	docker pull "$image"
	echo 'upgraded image'
	seedbox_create
	seedbox_start
}

# proceed with the action
actions=(create start status debug stop restart clean remove upgrade logs follow id)
action="$(choose-option --question='What action do you want to take?' --filter="${1-}" -- "${actions[@]}")"
if test "$action" = 'create'; then
	seedbox_create
elif test "$action" = 'start'; then
	seedbox_start
elif test "$action" = 'status'; then
	seedbox_status
elif test "$action" = 'debug'; then
	seedbox_debug
elif test "$action" = 'stop'; then
	seedbox_stop
elif test "$action" = 'restart'; then
	seedbox_restart
elif test "$action" = 'remove'; then
	seedbox_remove
elif test "$action" = 'clean'; then
	seedbox_clean
elif test "$action" = 'upgrade'; then
	seedbox_upgrade
elif test "$action" = 'logs'; then
	seedbox_logs
elif test "$action" = 'follow'; then
	seedbox_follow
elif test "$action" = 'id'; then
	seedbox_id
else
	stderr echo "unknown action [$action], available actions are [${actions[*]}]"
	exit 1
fi
