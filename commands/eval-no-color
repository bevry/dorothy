#!/usr/bin/env bash

function eval_no_color() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Execute the command avoiding outputting color, and stripping any color that was output.

			USAGE:
			eval-no-color [--] ...<command>
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_cmd=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_cmd+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			option_cmd+=("$item" "$@")
			shift $#
			break
			;;
		esac
	done

	# =====================================
	# Dependencies

	local bin_gsed_or_sed
	bin_gsed_or_sed="$(echo-gnu-command --install -- gsed)"

	# =====================================
	# Action

	# note: piping to echo-trim-colors doesn't seem to work, hence why we use sed directly
	# this only removes colors, not other ansi escape codes
	# @todo replace with `echo-regexp` and `echo-write`
	local stdout_semaphore stderr_semaphore
	stdout_semaphore="$(__get_semaphore)"
	stderr_semaphore="$(__get_semaphore)"
	env NO_COLOR=yes "${option_cmd[@]}" \
		> >(
			"$bin_gsed_or_sed" 's/\x1b\[[0-9;]*m//g'
			touch -- "$stdout_semaphore"
		) \
		2> >(
			"$bin_gsed_or_sed" 's/\x1b\[[0-9;]*m//g' >&2
			touch -- "$stderr_semaphore"
		)
	__wait_for_and_remove_semaphores "$stdout_semaphore" "$stderr_semaphore"
	# ^ maintains stdout, stderr, and exit code
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	eval_no_color "$@"
fi
