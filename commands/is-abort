#!/usr/bin/env bash

function is_abort() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Check if <input> is an abort exit status

			USAGE:
			is-abort [...options] [--] ...<input>

			OPTIONS:
			<input>
			    Input to check is an abort value.

			--ignore-empty:
			    Ignore/skip empty values.

			ABORTS:
			125: ECANCELED 125 Operation cancelled
			129: SIGHUP (Hangup signal. Sent to a process when its controlling terminal is closed.)
			130: SIGINT (Interrupt signal. Sent to interrupt the process and typically initiated by pressing Ctrl+C.)
			131: SIGQUIT (Quit signal. Similar to SIGINT but typically results in a core dump for debugging.)
			134: SIGABRT (Abort signal. Sent by the process to itself when it detects a critical error.)
			137: SIGKILL (Kill signal. Sent to forcefully terminate a process. Cannot be caught or ignored.)
			143: SIGTERM (Termination signal. Sent to request a process to terminate gracefully.)

			RETURNS:
			[0] if ANY <input>s were an abort
			[1] if ALL <input> were not abort
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inputs=() option_ignore_empty='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-ignore-empty'* | '--ignore-empty'*)
			option_ignore_empty="$(get-flag-value --abort --fallback="$option_ignore_empty" -- "$item")"
			;;
		'--')
			option_inputs+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		'') ;; # ignore empty values
		*) option_inputs+=("$item") ;;
		esac
	done

	# =====================================
	# Action

	local input
	for input in "${option_inputs[@]}"; do
		case "$input" in
		125 | 129 | 130 | 131 | 134 | 137 | 143) return 0 ;;
		esac
	done
	return 1
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	is_abort "$@"
fi
