#!/usr/bin/env bash

# if you are using bash, use either
# __has "$needle" -- a b c d
# if [[ $needle =~ ^(a|b|c|d)$ ]];

function is_needle_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	eval-tester --status=22 --ignore-stderr \
		-- is-needle

	eval-tester --status=22 --ignore-stderr \
		-- is-needle --

	eval-tester --status=22 --ignore-stderr \
		-- is-needle -- a b c

	# capture what [[ " ${items[*]} " =~ " $item " ]] cannot
	eval-tester --status=1 \
		-- is-needle b -- a 'b b b'

	eval-tester --status=1 \
		-- is-needle c -- a 'b b b'

	eval-tester --status=1 \
		-- is-needle b c -- a 'b b b'

	eval-tester \
		-- is-needle a 'b b b' -- a 'b b b'

	eval-tester \
		-- is-needle --needle=a --needle='b b b' -- a 'b b b'

	eval-tester \
		-- is-needle a a -- a 'b b b'

	eval-tester --status=1 \
		-- is-needle a --

	echo-style --g1="TEST: $0"
	return 0
)
function is_needle() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Check if the <needle> exists within the <element>s
			Equivalent to a [is-either], [is-neither].

			USAGE:
			is-needle  [...options] <needle> [--] ...<element>

			OPTIONS:
			--needle=<needle> | <needle>
			    Verify this <needle> exists within the <element>s
			    Note that you should always use [--needle=<needle>] as just doing <needle> will fail if the <needle> looks like a flag.

			RETURNS:
			[0] if all <needle>s are found within the <element>s
			[1] if any <needle>s are not found
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our arguments
	local item option_needles=() option_elements=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--needle='*) option_needles+=("${item#*=}") ;;
		--)
			option_elements+=("$@")
			shift $#
			;;
		# don't check for invalid flags, as flags could be a needle
		*)
			if [[ ${#option_needles[@]} -eq 0 ]]; then
				option_needles+=("$item")
			else
				option_elements+=("$item" "$@")
				shift "$#"
				break
			fi
			;;
		esac
	done

	# check
	if [[ ${#option_needles[@]} -eq 0 ]]; then
		help 'No <needle>s was provided.'
	fi

	# =====================================
	# Action

	# checks
	if [[ ${#option_needles[@]} -eq 0 ]]; then
		return 0
	fi
	if [[ ${#option_elements[@]} -eq 0 ]]; then
		return 1
	fi

	# process
	local needle element found='no'
	for needle in "${option_needles[@]}"; do
		found='no'
		for element in "${option_elements[@]}"; do
			if [[ $needle == "$element" ]]; then
				found='yes'
				break
			fi
		done
		if [[ $found == 'no' ]]; then
			break
		fi
	done
	if [[ $found == 'yes' ]]; then
		return 0
	else
		return 1
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		is_needle_test
	else
		is_needle "$@"
	fi
fi
