#!/usr/bin/env bash

# if you are using bash, use either
# __has "$needle" -- a b c d
# if [[ $needle =~ ^(a|b|c|d)$ ]];

function is_needle_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	eval-tester --status=22 --ignore-stderr \
		-- is-needle

	eval-tester --status=22 --ignore-stderr \
		-- is-needle --

	eval-tester --status=22 --ignore-stderr \
		-- is-needle -- a b c

	# capture what [test " ${items[*]} " =~ " $item "] cannot
	eval-tester --status=1 \
		-- is-needle b -- a 'b b b'

	eval-tester --status=1 \
		-- is-needle c -- a 'b b b'

	eval-tester --status=1 \
		-- is-needle b c -- a 'b b b'

	eval-tester --status=0 \
		-- is-needle a 'b b b' -- a 'b b b'

	eval-tester --status=0 \
		-- is-needle --needle=a --needle='b b b' -- a 'b b b'

	eval-tester --status=0 \
		-- is-needle a a -- a 'b b b'

	eval-tester --status=1 \
		-- is-needle a --

	echo-style --g1="TEST: $0"
	return 0
)
function is_needle() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Check if the <needle> exists within the <element>s

			USAGE:
			is-needle  [...options] <needle> [--] ...<element>

			OPTIONS:
			<needle> | --needle=<needle>
			    Verify this <needle> exists within the <element>s
			    Use [--needle=<needle>] to provide multiple needles.

			RETURNS:
			[0] if all <needle>s were found within the <element>s
			[1] if any <needle> was not found
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our arguments
	local item option_needles=() option_elements=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--needle='*) option_needles+=("${item#*=}") ;;
		--)
			option_elements+=("$@")
			shift $#
			;;
		# don't check for invalid flags, as flags could be a needle
		*)
			if test "${#option_needles[@]}" -eq 0; then
				option_needles+=("$item")
			else
				option_elements+=("$item" "$@")
				shift "$#"
				break
			fi
			;;
		esac
	done

	# check
	if test "${#option_needles[@]}" -eq 0; then
		help 'No <needle>s was provided.'
	fi

	# =====================================
	# Action

	# checks
	if test "${#option_needles[@]}" -eq 0; then
		return 0
	fi
	if test "${#option_elements[@]}" -eq 0; then
		return 1
	fi

	# process
	local needle element found='no'
	for needle in "${option_needles[@]}"; do
		found='no'
		for element in "${option_elements[@]}"; do
			if test "$needle" = "$element"; then
				found='yes'
				break
			fi
		done
		if test "$found" = 'no'; then
			break
		fi
	done
	if test "$found" = 'yes'; then
		return 0
	else
		return 1
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		is_needle_test
	else
		is_needle "$@"
	fi
fi
