#!/usr/bin/env bash

function get_python_version() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the version of a python binary.

			USAGE:
			get-python-version [<bin>] [<version>]

			OPTIONS:
			<bin>
			    Path to the python binary, defaults to [python].

			<version>
			    If provided, will compare the <bin> version against <version>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_bin='' option_compare=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$option_bin"; then
				option_bin="$item"
			elif test -z "$option_compare"; then
				option_compare="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure
	if test -z "$option_bin"; then
		option_bin='python'
	fi

	# =====================================
	# Action

	# python outputs the version to stderr, so we have to redirect stderr to stdout for it to be captured
	version="$("$option_bin" --version 2>&1)"

	if test -n "$option_compare"; then
		if [[ $version == "Python $option_compare"* ]]; then
			return 0
		else
			return 1
		fi
	else
		print_line "$version"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_python_version "$@"
fi
