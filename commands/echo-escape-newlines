#!/usr/bin/env bash

function echo_escape_newlines_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	eval-tester --name='using arguments' --stdout='a\nb' \
		-- echo-escape-newlines -- $'a\nb'

	{
		printf '%s' $'a\nb'
	} | eval-tester --name='using stdin' --stdout='a\nb' \
		-- echo-escape-newlines --stdin

	echo-style --g1="TEST: $0"
	return 0
)
function echo_escape_newlines() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			For each <input>, escape its newlines into \n

			USAGE:
			echo-escape-newlines [...options] [--] ...<input>
			echo-lines ...<input> | echo-escape-newlines [...options]

			OPTIONS:
			$(stdinargs_options_help --)

			EXAMPLE:

			echo-escape-newlines -- $'a\nb'

			    a\nb
			    # exit status: 0

			printf '%s' $'a\nb' | echo-escape-newlines --stdin

			    a\nb
			    # exit status: 0

		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# =====================================
	# Action

	function on_arg {
		local value="$1"
		value="${value//$'\n'/\\n}"
		__print_lines "$value"
	}
	function on_line {
		__print_string "$1\n"
	}
	function on_inline {
		__print_string "$1"
	}

	stdinargs "$@"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		echo_escape_newlines_test
	else
		echo_escape_newlines "$@"
	fi
fi
