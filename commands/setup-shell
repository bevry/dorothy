#!/usr/bin/env bash

function setup_shell() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/environment.sh" # ensure new installations are detected

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Set your user's login shell to become the first available shell of your preferences.

			USAGE:
			setup-shell [...options] [--] ...<preference>
			If no <preference>s are provided, then [USER_SHELLS] from your [shell.bash] user configuration file will be used.

			OPTIONS:
			--no-brew
			    Do not use any shell installed via homebrew.

			QUIRKS:
			You can use a command name, such as [bash] to select the preferred variation of the shell.
			You can use a full path, such as [/bin/bash] to select a specific variation of the shell.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_brew='' option_shells=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-brew'* | '--brew'*)
			option_brew="$(get-flag-value --affirmative --fallback="$option_brew" -- "$item")"
			;;
		'--')
			option_shells+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_shells+=("$item") ;;
		esac
	done

	# =====================================
	# Helpers

	function none_available {
		# no shell was selected, error
		echo-style --error='No preferred shell was currently installed, as such none were able to be selected.' >/dev/stderr
		return 3 # ESRCH 3 No such process
	}
	function use_shell {
		# use this specific shell
		local shell path
		# if name, expand the name into a path
		# if path, validate the path exists
		shell="$(basename "$1")"
		path="$(type -P "$1" || :)"
		if test -z "$path"; then
			echo-segment --error="Failed to verify that shell [$shell] exists and is executable." >/dev/stderr
			return 8 # ENOEXEC 8 Exec format error
		fi

		# log
		echo-segment --h1="Selected [$shell] at [$path]"

		# update system whitelist
		echo-segment --h2='Update system whitelist'
		if contains-line --stdin --needle="$path" </etc/shells; then
			echo-style --green='Already within the system whitelist [/etc/shells]'
		else
			echo-segment --h3='Add to system whitelist [/etc/shells]'
			print_line "$path" | sudo-helper -- tee -a /etc/shells
			echo-segment --g3='Add to system whitelist [/etc/shells]'
		fi
		echo-segment --g2='Update system whitelist'

		# update system selection
		echo-segment --h2="Update login shell for [$USER]"
		if command-exists chpass; then
			echo-style --dim='You can ignore [chpass: no changes made] warnings.'
			# mac
			chpass -s "$path" -u "$USER"
		elif command-exists chsh; then
			# ubuntu
			chsh -s "$path" "$USER"
		elif command-exists usermod; then
			# fedora
			sudo-helper -- usermod --shell "$path" "$USER"
		elif command-exists lchsh; then
			# fedora
			print_line "$path" | sudo-helper -- lchsh "$USER" >/dev/null # output is confusing
		elif test -f '/etc/passwd'; then
			# dependencies
			setup-util-gsed --quiet

			# everything else, including alpine
			sudo-helper --inherit \
				-- gsed --in-place --regexp-extended \
				--expression="s#^($USER:.+:).+?\$#\1$path#" \
				/etc/passwd
		else
			# unknown fail
			echo-style --error="Dorothy doesn't know how to set the login shell on this Operating System." >/dev/stderr
			echo-segment --e2="Update login shell for [$USER]"
			return 19 # ENODEV 19 Operation not supported by device
		fi
		echo-segment --g2="Update login shell for [$USER]"

		# success case
		echo-segment --g1="Selected [$shell] at [$path]"
		echo-style --notice="Restart your terminal, or open a new one, for the change to take effect."
	}
	function use_first_available {
		# use the first available preference passed to us
		local shell path paths=() use_shell_status

		# convert shells into each of their paths
		for shell in "$@"; do
			if test -z "$shell"; then
				help "Invalid configuration was received, there was an empty item:" "$(echo-verbose -- "$@")"
			fi
			mapfile -t paths < <(type -pa "$shell" 2>/dev/null || :)
			for path in "${paths[@]}"; do
				if test -z "$path"; then
					continue
				fi
				if test -n "${HOMEBREW_PREFIX-}"; then
					if test "$option_brew" = 'no' && [[ $path == "$HOMEBREW_PREFIX"* ]]; then
						continue
					fi
				fi
				echo-style --success='Preference available on this system:' ' ' --code="$path"
				eval_capture --statusvar=use_shell_status -- use_shell "$path"
				if test "$use_shell_status" -eq 0; then
					return 0
				fi # else continue
			done
			echo-style --error='Preference unavailable on this system:' ' ' --code="$shell"
		done
		none_available
	}

	# =====================================
	# Action

	# trim the startup message (alpine)
	if test -f /etc/motd; then
		if confirm --negative --ppid=$$ -- 'Would you like to remove the startup message?' "$(echo-style --code="$(cat /etc/motd)")"; then
			sudo-helper -- rm -v /etc/motd
		fi
	fi

	# arguments
	if test "${#option_shells[@]}" -ne 0; then
		use_first_available "${option_shells[@]}"
	else
		# configuration
		source "$DOROTHY/sources/config.sh"
		USER_SHELLS=()
		load_dorothy_config 'shells.bash'
		option_shells=("${USER_SHELLS[@]}")
		if test "${#option_shells[@]}" -ne 0; then
			echo-style --notice='No argument configuration found, using user configuration.'
			use_first_available "${USER_SHELLS[@]}"
		else
			# invalid
			echo-error 'No argument nor user configuration found.'
			return 22 # EINVAL 22 Invalid argument
		fi
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_shell "$@"
fi
