#!/usr/bin/env bash

function until_success() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Run a command until it succeeds.

			USAGE:
			until-success [...options] [--] <...command>

			OPTIONS:
			--delay=<seconds> | --interval=<seconds>
			    specify the interval between attempts, defaults to 10

			--forever
			    if not provided, the command will be repeated until a successful exit status
			    if provided, the command will be repeated indefinitely

			--clear
			    if provided, the output of the command will be cleared between attempts
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_cmd=() option_delay=10 option_forever='no' option_clear='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--delay='* | '--interval='*) option_delay="${item#*=}" ;;
		'--no-forever'* | '--forever'*)
			option_forever="$(get-flag-value --affirmative --fallback="$option_forever" -- "$item")"
			;;
		'--no-clear'* | '--clear'*)
			option_clear="$(get-flag-value --affirmative --fallback="$option_clear" -- "$item")"
			;;
		'--')
			option_cmd+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_cmd+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_cmd[@]} -eq 0 ]]; then
		help 'No <option_cmd> was provided.'
	fi

	# =====================================
	# Action

	function attempt {
		local attempt_status attempt_output=''
		if [[ $option_clear == 'yes' ]]; then
			__do --redirect-status={attempt_status} --redirect-output=stdout --copy-stdout={attempt_output} --redirect-stdout=tty -- eval-helper --terminal-device-file='/dev/stderr' --wrap --no-quiet -- "$@"
			TERMINAL_DEVICE_FILE=''
		else
			__try {attempt_status} -- eval-helper --wrap --no-quiet -- "$@"
		fi
		if [[ $option_forever == 'yes' || $attempt_status -ne 0 ]]; then
			waiter "$option_delay" --message="$(echo-style --notice='Next attempt in %s...')"
			if [[ $option_clear == 'yes' ]]; then
				# clear the previous execution, re-adding the trailing newline
				# echo-escape-special --stdin <<<"$attempt_output"$'\n'
				# echo-clear-lines --here-string <<<"$attempt_output"$'\n' | echo-escape-special --stdin
				# exit 9
				__do --redirect-stdout=tty -- echo-clear-lines --here-string <<<"$attempt_output"$'\n'
			fi
			attempt "$@"
		fi
	}
	attempt "${option_cmd[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	until_success "$@"
fi
