#!/usr/bin/env bash

function config_helper_test() (
	source "$DOROTHY/sources/bash.bash"

	# prepare
	echo-segment --h1="TEST: $0"
	print_line
	fs-rm --quiet --no-confirm -- "$(fs-temp --directory='config-helper')"
	local test_file missing_file expected_stderr
	test_file="$(
		fs-temp \
			--directory='config-helper' \
			--directory='tests' \
			--file --touch
	)"
	missing_file="$(
		fs-temp \
			--directory='config-helper' \
			--directory='tests' \
			--file --no-touch
	)"

	# test invalid arguments fail
	eval-tester --name='test-invalid-arguments-01' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper
	eval-tester --name='test-invalid-arguments-02' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper --no-quiet --file="$missing_file"
	sleep 3 # wait for the file to be created, seems to take a while on ci
	eval-tester --name='test-invalid-arguments-03' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper "$missing_file"

	# test invalid find and replace arguments
	eval-tester --name='test-invalid-find-and-replace-arguments-01' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- --replace='one'
	eval-tester --name='test-invalid-find-and-replace-arguments-02' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- --find='a' --replace='one' --replace='two'
	# ^ first find and replace succeeds, hence [one], second find and replace failed, hence no two
	eval-tester --name='test-invalid-find-and-replace-arguments-03' --stdout='one' \
		-- cat "$test_file"

	# test creating a non-existent file
	expected_stderr="Updated configuration file: $missing_file"
	eval-tester --name='test-missing-file-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$missing_file" -- \
		--find='commands.local[/]' --replace='commands.local/' \
		--find='config.local[/]' --replace='config.local/'
	eval-tester --name='test-missing-file-02' --stdout=$'commands.local/\nconfig.local/' \
		-- cat "$missing_file"

	# test an empty file
	expected_stderr="Updated configuration file: $test_file"
	eval-tester --name='test-empty-file-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--find='commands.local[/]' --replace='commands.local/' \
		--find='config.local[/]' --replace='config.local/'
	eval-tester --name='test-empty-file-02' --stdout=$'one\ncommands.local/\nconfig.local/' \
		-- cat "$test_file"

	# test existing file
	eval-tester --name='test-existing-file-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--find='commands.local[/]' --replace='commands.replaced/' \
		--find='config.local[/]' --replace='config.replaced/'
	eval-tester --name='test-existing-file-02' --stdout=$'one\ncommands.replaced/\nconfig.replaced/' \
		-- cat "$test_file"

	# redo test file
	print_line $'User=uu\n\tGroup=gg\n\t# Party=pp' >"$test_file"

	# test find only, used by <sharebox> command
	eval-tester --name='test-find-only' --stdout=$'User=uu\nuu\nGroup=gg\ngg' \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--find='User=(.*)' \
		--field='User' \
		--find='Group=(.*)' \
		--field='Group' \
		--find='Party=(.*)' \
		--field='Party'

	# uncomment party
	eval-tester --name='test-uncomment-and-return' --stdout='sup' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--find='Party=(.*)' --replace='Party=sup' \
		--field='Party'

	# test variable replacements and additions
	# this is the command it fails on
	print_line $'a=one\n\tb=(two three)\n\ta=three\n\tb=(four five)' >"$test_file"
	eval-tester --name='test-variable-replacement-and-addition-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--field='a' --no-quote --value='1' \
		--field='b' --array="$(print_lines 2 3)" \
		--field='aa' --value='value addition' \
		--field='bb' --array="$(print_lines 22 33)"
	eval-tester --name='test-variable-replacement-and-addition-02' --stdout=$'a=1\n\tb=(\n\t\t\'2\'\n\t\t\'3\'\n\t)\naa=\'value addition\'\nbb=(\n\t\'22\'\n\t\'33\'\n)' -- cat "$test_file"

	# test complicated values
	print_line $'a=one\n\tb=(two three)\n\ta=three\n\tb=(four five)' >"$test_file"
	eval-tester --name='test-complicated-values-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--field='a' --value='double "quote" inside' \
		--field='b' --columns=2 --array="$(print_lines 'double "quote" inside' "single 'quote' inside" 3 4)" \
		--field='aa' --value="single 'quote' inside" \
		--field='bb' --columns=2 --array="$(print_lines 'more double "quote" inside' "more single 'quote' inside" 33 44)"
	eval-tester --name='test-complicated-values-02' --stdout=$'a=\'double "quote" inside\'\n\tb=(\n\t\t\'double "quote" inside\'  "single \'quote\' inside"\n\t\t\'3\'                      \'4\'\n\t)\naa="single \'quote\' inside"\nbb=(\n\t\'more double "quote" inside\'  "more single \'quote\' inside"\n\t\'33\'                          \'44\'\n)' \
		-- cat "$test_file"

	# test values with dollar signs and backslashes
	print_line '$env.VALUE="hello\world"' >"$test_file"
	# trunk-ignore-all(shellcheck/SC2016)
	eval-tester --name='test-dollar-signs-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--string-find='$env.VALUE' --string-replace='$env.VALUE="HELLO\WORLD"'
	eval-tester --name='test-dollar-signs-02' --stdout='$env.VALUE="HELLO\WORLD"' \
		-- cat "$test_file"

	# done
	echo-segment --g1="TEST: $0"
)
function config_helper() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			USAGE:
			config-helper [...options] <file> -- ...
				[--find=<pattern>] # outputs the found result
				[--find=<pattern> [--replace=<pattern>]] # replaces the pattern with the pattern
				[--field=<field>] # outputs the value of the field
				[--field=<field> [--value=<value>]] # sets the field to the value
				[--field=<field> [--array=<lines>]] # sets the field to an array of the lines

			OPTIONS:
			<file>
			    A configuration file that you would like to update, such as:
			        /etc/systemd/resolved.conf
			        interactive.sh
			        .gitignore

			QUIRKS:
			If a commented --find=<pattern> or --field=<field> is found, the replacement will be placed there.
			If multiple results are found, the replacement will only leave the replacement.
			If <pattern> is empty, it will replace all empty lines with the replacement.
			If not found, an addition will occur.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_args=() option_file='' option_quiet
	option_quiet="$(echo-quiet-enabled -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--file='*) option_file="${item#*=}" ;;
		'--no-quiet'* | '--quiet'* | '--no-verbose'* | '--verbose'*) ;; # handled by echo-quiet-enabled
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$option_file"; then
				option_file="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if test "${#option_args[@]}" -eq 0; then
		help "Need arguments, otherwise what is the point?"
	fi

	# ensure file
	if test -z "$option_file"; then
		help "Need a file to work with"
	fi

	# ensure file exists
	if test ! -f "$option_file"; then
		touch "$option_file"
	fi

	# =====================================
	# Dependencies

	source "$DOROTHY/sources/ripgrep.bash"
	setup-util-sd --quiet
	setup-util-teip --quiet

	# =====================================
	# Action

	# prepare
	local UPDATED='no'

	# cycle
	function act {
		local option_search option_columns='1' option_quote='yes' option_replace search_pattern replace_pattern get_value_pattern addition find field value content
		while test "$#" -ne 0; do
			# extract arguments
			option_search="$1"
			shift

			# extract special cases
			case "${1-}" in
			'--columns='*)
				option_columns="${1#*=}"
				shift
				;;
			'--no-quote')
				option_quote='no'
				shift
				;;
			esac

			# extract next argument, shift is handled later, as could ba another find
			option_replace="${1-}"

			# reset variables
			search_pattern=''
			replace_pattern=''
			get_value_pattern=''
			addition=''
			find=''  # value of --find=<value>
			field='' # value of --field=<value>
			value='' # value of --{replace,array,value}=<value>
			content=''

			# search
			# https://docs.rs/regex/latest/regex/
			# (?flags:exp)   set flags for exp (non-capturing)
			# m     multi-line mode: ^ and $ match begin/end of line
			# u     Unicode support (enabled by default)
			# x     ignore whitespace and allow line comments (starting with `#`)
			# ^ x doesn't seem to work
			# the (?m) prefix turns out not be necessary, for sed, nor ripgrep
			if [[ $option_search == '--string-find='* ]]; then
				# raw string
				find="${option_search#*=}"
				find="$(echo-escape-regexp -- "$find")"
				search_pattern="(?P<value>.*?$find.*)"
				get_value_pattern="$search_pattern"
			elif [[ $option_search == '--pattern='* ]]; then
				# raw pattern
				find="${option_search#*=}"
				search_pattern="(?P<value>$find)" # undocumented, only replaces this part rather than the whole line
				get_value_pattern="$search_pattern"
			elif [[ $option_search == '--find='* ]]; then
				# indentable, commentable, pattern
				find="${option_search#*=}"
				search_pattern="^(?P<indent>[[:blank:]]*)(?P<comment>(?:#|[[:blank:]])*)(?P<value>$find)$"
				get_value_pattern="^(?P<indent>[[:blank:]]*)(?P<value>$find)$" # ignore comments
			elif [[ $option_search == '--field='* ]]; then
				# field that can be an array and value
				field="${option_search#*=}"
				search_pattern="^(?P<indent>[[:blank:]]*)(?P<comment>(?:#|[[:blank:]])*)$field *= *(?P<value>[(](?ms:.*?)[)]|[^\n]*)$"
				get_value_pattern="^(?P<indent>[[:blank:]]*)$field *= *(?P<value>[(](?ms:.*?)[)]|[^\n]*)$" # ignore comments
			else
				help "Invalid search argument [$option_search] it must be either --find=<pattern> or --field=<field>"
			fi

			# addition/replace
			if [[ $option_replace == '--string-replace='* ]]; then
				# raw replace value
				value="${option_replace#*=}"
				addition="$value"
				replace_pattern="$(echo-escape-regexp-replacement -- "$value")"
			elif [[ $option_replace == '--replace='* ]]; then
				# replace value
				value="${option_replace#*=}"
				addition="$value"
				replace_pattern="$value"
			elif [[ $option_replace == '--array='* ]]; then
				value="${option_replace#*=}"

				# check for field
				if test -z "$field"; then
					help "--array=<$value> must be used with --field=<field>"
				fi

				# adapt for array
				mapfile -t lines <<<"$value" # read lines into an array, such that indentation works

				# addition, use spaces for consistency with replacements, also use spaces as editors show tabs at variable widths
				value=$'(\n'"$(echo-lines --indent=$'\t' --quoted --columns="${option_columns:-"1"}" --width=inputs --filler=space -- "${lines[@]}")"$'\n)'
				addition="$field=$value"

				# replacement, use spaces as the filler, as without echo-lines being aware of the content of ${indent}, there is no way for it to correctly align tabs, also use spaces as editors show tabs at variable widths
				value=$'(\n'"$(echo-lines --indent=$'${indent}\t' --quoted --columns="${option_columns:-"1"}" --width=inputs --filler=space -- "${lines[@]}")"$'\n${indent})'
				replace_pattern="\${indent}$field=$value"
				set +x

				# reset columns
				option_columns='1'
			elif [[ $option_replace == '--value='* ]]; then
				value="${option_replace#*=}"

				# check for field
				if test -z "$field"; then
					help "--value=<$value> must be used with --field=<field>"
				fi

				# addition and replacement
				if test "$option_quote" = 'yes'; then
					value="$(echo-quote -- "$value")"
				fi
				addition="$field=$value"
				replace_pattern="\${indent}$field=$value"
				option_quote='yes'
			else
				# the replacement field was a find value, do not shift it, as we will use it in the next cycle
				# instead, fetch the value, then continue to use the field as the next find
				# --max-count=1 is to workaround: https://github.com/BurntSushi/ripgrep/issues/2095
				rg --max-count=1 --multiline --only-matching --regexp="$get_value_pattern" --replace='${value}' "$option_file" || :
				continue
			fi

			# replacement field is a replacement field, and not another find
			# as such, trim it from the next cycle, as we are using it now
			shift
			# then perform the replace

			# ensure a trailing line, as otherwise the regexes get confused
			content="$(cat "$option_file")"
			content="${content%$'\n'}"$'\n'
			# do the replacement or addition
			if printf '%s' "$content" | rg --quiet --multiline "$search_pattern"; then
				# trim all but the first occurance
				# https://github.com/BurntSushi/ripgrep/issues/2094
				# https://github.com/chmln/sd/issues/105
				# https://github.com/greymd/teip/issues/27
				# https://github.com/greymd/teip/issues/27#issuecomment-1101065549

				# we want to remove all secondary occurances
				# keeping only the first occurance
				#
				# as teip lacks the ability to delete lines
				# and as it requires line output
				# we need to use sed and sd to do it
				#
				# we can't just do teip to sd, as teip to sd occassionally causes
				# Error: Broken pipe (os error 32)
				#
				# as such, we need to use teip to sed to sd
				# for the removal of the secondary occurances
				#
				# this will then leave the first occurance in the whole
				# which we can use sd to perform our final intended replacement
				# of the primary occurance
				# printf '%s' "$content" | sd -n 1 "$search_pattern" 'REPLACE_THIS_LINE' | sd "$search_pattern" '' | sd $'(REPLACE_THIS_LINE\n)+' "$replace_pattern" >"$option_file" <-- this fails to handle replacement groups
				printf '%s' "$content" |
					teip -g "$search_pattern" -- teip -l 2- -- sed 's/.*/REMOVE_THIS_LINE/' |
					sd $'(REMOVE_THIS_LINE\n)+' '' |
					sd "$search_pattern" "$replace_pattern" \
						>"$option_file"
			else
				# it wasn't found, so add manually if it's not empty
				if test -n "$addition"; then
					print_line "$addition" >>"$option_file"
				fi
			fi

			# a valid update occured, note for logging
			UPDATED='yes'
		done
	}

	# act
	act "${option_args[@]}"

	# we do our own processing, as we need to support multiline matches
	if test "$UPDATED" = 'yes' -a "$option_quiet" = 'no'; then
		echo-style --success="Updated configuration file: $option_file" >/dev/stderr
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		config_helper_test
	else
		config_helper "$@"
	fi
fi
