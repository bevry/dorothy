#!/usr/bin/env bash

function config_helper_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"
	local delay=1
	if is-ci; then
		delay=3
	fi

	# prepare
	local root test_file missing_file expected_stderr
	root="$(fs-temp --directory='config-helper')"
	fs-rm --quiet --no-confirm -- "$root"
	test_file="$(
		fs-temp \
			--root="$root" \
			--directory='tests' \
			--file --touch
	)"
	missing_file="$(
		fs-temp \
			--root="$root" \
			--directory='tests' \
			--file --no-touch
	)"

	# test invalid arguments fail
	sleep "$delay"
	eval-tester --name='test-invalid-arguments-01' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper
	sleep "$delay"
	eval-tester --name='test-invalid-arguments-02' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper --no-quiet --file="$missing_file"
	sleep "$delay"
	eval-tester --name='test-invalid-arguments-03' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper "$missing_file"

	# test invalid find and replace arguments
	sleep "$delay"
	eval-tester --name='test-invalid-find-and-replace-arguments-01' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- --replace='one'
	# ^ fails completely
	sleep "$delay"
	eval-tester --name='test-invalid-find-and-replace-arguments-02' --status=22 --ignore-stderr \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- --find='a' --replace='one' --replace='two'
	# ^ first find and replace succeeds on the empty test_file, hence [one], second find and replace failed, hence no two
	sleep "$delay"
	eval-tester --name='test-invalid-find-and-replace-arguments-03' --stdout='one' \
		-- cat -- "$test_file"

	# test creating a non-existent file
	expected_stderr="Updated configuration file: $missing_file"
	sleep "$delay"
	eval-tester --name='test-missing-file-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$missing_file" -- \
		--find='commands.local[/]' --replace='commands.local/' \
		--find='config.local[/]' --replace='config.local/'
	sleep "$delay"
	eval-tester --name='test-missing-file-02' --stdout=$'commands.local/\nconfig.local/' \
		-- cat -- "$missing_file"

	# test an empty file
	expected_stderr="Updated configuration file: $test_file"
	sleep "$delay"
	eval-tester --name='test-empty-file-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--find='commands.local[/]' --replace='commands.local/' \
		--find='config.local[/]' --replace='config.local/'
	sleep "$delay"
	eval-tester --name='test-empty-file-02' --stdout=$'one\ncommands.local/\nconfig.local/' \
		-- cat -- "$test_file"

	# test existing file
	sleep "$delay"
	eval-tester --name='test-existing-file-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--find='commands.local[/]' --replace='commands.replaced/' \
		--find='config.local[/]' --replace='config.replaced/'
	sleep "$delay"
	eval-tester --name='test-existing-file-02' --stdout=$'one\ncommands.replaced/\nconfig.replaced/' \
		-- cat -- "$test_file"

	# redo test file
	sleep "$delay"
	__print_lines $'User=uu\n\tGroup=gg\n\t# Party=pp' >"$test_file"

	# test find only, used by <sharebox> command
	sleep "$delay"
	eval-tester --name='test-find-only' --stdout=$'User=uu\nuu\nGroup=gg\ngg' \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--find='User=(.*)' \
		--field='User' \
		--find='Group=(.*)' \
		--field='Group' \
		--find='Party=(.*)' \
		--field='Party'

	# uncomment party
	sleep "$delay"
	eval-tester --name='test-uncomment-and-return' --stdout='sup' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--find='Party=(.*)' --replace='Party=sup' \
		--field='Party'

	# test variable replacements and additions
	# this is the command it fails on
	sleep "$delay"
	__print_lines $'a=one\n\tb=(two three)\n\ta=three\n\tb=(four five)' >"$test_file"
	sleep "$delay"
	eval-tester --name='test-variable-replacement-and-addition-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--field='a' --no-quote --value='1' \
		--field='b' --array="$(__print_lines 2 3)" \
		--field='aa' --value='value addition' \
		--field='bb' --array="$(__print_lines 22 33)"
	sleep "$delay"
	eval-tester --name='test-variable-replacement-and-addition-02' --stdout=$'a=1\n\tb=(\n\t\t\'2\'\n\t\t\'3\'\n\t)\naa=\'value addition\'\nbb=(\n\t\'22\'\n\t\'33\'\n)' -- cat -- "$test_file"

	# test complicated values
	sleep "$delay"
	__print_lines $'a=one\n\tb=(two three)\n\ta=three\n\tb=(four five)' >"$test_file"
	sleep "$delay"
	eval-tester --name='test-complicated-values-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--field='a' --value='double "quote" inside' \
		--field='b' --columns=2 --array="$(__print_lines 'double "quote" inside' "single 'quote' inside" 3 4)" \
		--field='aa' --value="single 'quote' inside" \
		--field='bb' --columns=2 --array="$(__print_lines 'more double "quote" inside' "more single 'quote' inside" 33 44)"
	sleep "$delay"
	eval-tester --name='test-complicated-values-02' --stdout=$'a=\'double "quote" inside\'\n\tb=(\n\t\t\'double "quote" inside\'  "single \'quote\' inside"\n\t\t\'3\'                      \'4\'\n\t)\naa="single \'quote\' inside"\nbb=(\n\t\'more double "quote" inside\'  "more single \'quote\' inside"\n\t\'33\'                          \'44\'\n)' \
		-- cat -- "$test_file"

	# test values with dollar signs and backslashes
	sleep "$delay"
	__print_lines '$env.VALUE="hello\world"' >"$test_file"
	sleep "$delay"
	eval-tester --name='test-dollar-signs-01' --stderr="$expected_stderr" \
		-- eval-no-color -- config-helper --no-quiet --file="$test_file" -- \
		--string-find='$env.VALUE' --string-replace='$env.VALUE="HELLO\WORLD"'
	sleep "$delay"
	eval-tester --name='test-dollar-signs-02' --stdout='$env.VALUE="HELLO\WORLD"' \
		-- cat -- "$test_file"

	# done
	echo-style --g1="TEST: $0"
)
function config_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			USAGE:
			config-helper [...options] <file> -- ...
				[--find=<pattern>] # outputs the found result
				[--find=<pattern> [--replace=<pattern>]] # replaces the pattern with the pattern
				[--field=<field>] # outputs the value of the field
				[--field=<field> [--value=<value>]] # sets the field to the value
				[--field=<field> [--array=<lines>]] # sets the field to an array of the lines

			OPTIONS:
			<file>
			    A configuration file that you would like to update, such as:
			        /etc/systemd/resolved.conf
			        interactive.sh
			        .gitignore

			--sudo=<sudo>
			--user=<user>
			--group=<group>
			--reason=<reason>
			    Forwarded to [sudo-helper].

			QUIRKS:
			If a commented --find=<pattern> or --field=<field> is found, the replacement will be placed there.
			If multiple results are found, the replacement will only leave the replacement.
			If <pattern> is empty, it will replace all empty lines with the replacement.
			If not found, an addition will occur.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_args=() option_quiet='' option_file='' option_multiple='ok' option_sudo='' option_user='' option_group='' option_reason=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--file='*) option_file="${item#*=}" ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--multiple=ok' | '--multiple=warn-skip' | '--multiple=warn-apply') option_multiple="${item#*=}" ;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--reason='*) option_reason="${item#--reason=}" ;;
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $option_file ]]; then
				option_file="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	if [[ ${#option_args[@]} -eq 0 ]]; then
		help "Need arguments, otherwise what is the point?"
	fi

	# ensure file
	if [[ -z $option_file ]]; then
		help "Need a file to work with"
	fi

	# ensure file exists
	if [[ ! -f $option_file ]]; then
		printf '' | echo-wait --sudo="$option_sudo" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$option_file"
	fi

	# =====================================
	# Action

	# prepare
	local UPDATED='no'

	# cycle
	function act {
		local option_search option_columns='1' option_quote='yes' option_replace search_pattern replace_pattern remove_pattern get_value_pattern addition find field value content count temp_file
		while [[ $# -ne 0 ]]; do
			# extract arguments
			option_search="$1"
			shift

			# extract special cases
			case "${1-}" in
			'--columns='*)
				option_columns="${1#*=}"
				shift
				;;
			'--quote=bash')
				option_quote='bash'
				shift
				;;
			'--quote=command')
				option_quote='command'
				shift
				;;
			'--quote=generic')
				option_quote='generic'
				shift
				;;
			'--no-quote'* | '--quote'*) # will also support quoted
				option_quote="$(get-flag-value --affirmative --fallback="$option_quote" -- "$1")"
				shift
				;;
			esac

			# adjust quote based on file
			if [[ $option_quote =~ ^(generic|yes)$ ]]; then
				if [[ $option_file == *'.bash' || $option_file == *'.sh' ]]; then
					option_quote='bash'
				else
					option_quote='generic'
				fi
			fi

			# extract next argument, shift is handled later, as could ba another find
			option_replace="${1-}"

			# reset variables
			search_pattern=''
			replace_pattern=''
			remove_pattern=''
			get_value_pattern=''
			addition=''
			find=''  # value of --find=<value>
			field='' # value of --field=<value>
			value='' # value of --{replace,array,value}=<value>
			content=''

			# search
			# https://docs.rs/regex/latest/regex/
			# (?flags:exp)   set flags for exp (non-capturing)
			# m     multi-line mode: ^ and $ match begin/end of line
			# u     Unicode support (enabled by default)
			# x     ignore whitespace and allow line comments (starting with `#`)
			# ^ x doesn't seem to work
			# the (?m) prefix turns out not be necessary, for sed, nor ripgrep

			# named capture groups:  rust: (?P<  javascript: (?<
			if [[ $option_search == '--string-find='* ]]; then
				# raw string
				find="${option_search#*=}"
				find="$(echo-escape-regexp -- "$find")"
				search_pattern="(?P<value>.*?$find.*)"
				get_value_pattern="$search_pattern"
			elif [[ $option_search == '--pattern='* ]]; then
				# raw pattern
				find="${option_search#*=}"
				search_pattern="(?P<value>$find)" # undocumented, only replaces this part rather than the whole line
				get_value_pattern="$search_pattern"
			elif [[ $option_search == '--find='* ]]; then
				# indentable, commentable, pattern
				find="${option_search#*=}"
				search_pattern="^(?P<indent>[[:blank:]]*)(?P<comment>(?:#|[[:blank:]])*)(?P<value>$find)(?P<trail>\n|$)"
				get_value_pattern="^(?P<indent>[[:blank:]]*)(?P<value>$find)(?P<trail>\n|$)" # ignore comments
				#remove_pattern='${indent}'
			elif [[ $option_search == '--field='* ]]; then
				# field that can be an array and value
				field="${option_search#*=}"
				search_pattern="^(?P<indent>[[:blank:]]*)(?P<comment>(?:#|[[:blank:]])*)$field *= *(?P<value>[(][\s\S]*?[)]|[^\n]*)(?P<trail>\n|$)"
				get_value_pattern="^(?P<indent>[[:blank:]]*)$field *= *(?P<value>[(][\s\S]*?[)]|[^\n]*)(?P<trail>\n|$)" # ignore comments
				#remove_pattern='${indent}'
				# use [\s\S] instead of (?s:.) as [\s\S] supports old Deno versions
			else
				help "Invalid search argument [$option_search] it must be either --find=<pattern> or --field=<field>"
			fi

			# addition/replace
			if [[ $option_replace == '--string-replace='* ]]; then
				# raw replace value
				value="${option_replace#*=}"
				addition="$value"
				replace_pattern="$(echo-escape-regexp-replacement -- "$value")"
			elif [[ $option_replace == '--replace='* ]]; then
				# replace value
				value="${option_replace#*=}"
				addition="$value"
				replace_pattern="$value"
			elif [[ $option_replace == '--array='* ]]; then
				value="${option_replace#*=}"

				# check for field
				if [[ -z $field ]]; then
					help "--array=<$value> must be used with --field=<field>"
				fi

				# adapt for array
				mapfile -t lines <<<"$value" # read lines into an array, such that indentation works

				# addition, use spaces for consistency with replacements, also use spaces as editors show tabs at variable widths
				value=$'(\n'"$(echo-lines --indent=$'\t' --quote="$option_quote" --columns="${option_columns:-"1"}" --width=inputs --filler=space -- "${lines[@]}")"$'\n)'
				addition="$field=$value"

				# replacement, use spaces as the filler, as without echo-lines being aware of the content of ${indent}, there is no way for it to correctly align tabs, also use spaces as editors show tabs at variable widths
				value=$'(\n'"$(echo-lines --indent=$'${indent}\t' --quote="$option_quote" --columns="${option_columns:-"1"}" --width=inputs --filler=space -- "${lines[@]}")"$'\n${indent})'
				replace_pattern="\${indent}$field=$value"

				# reset columns
				option_columns='1'
			elif [[ $option_replace == '--value='* ]]; then
				value="${option_replace#*=}"

				# check for field
				if [[ -z $field ]]; then
					help "--value=<$value> must be used with --field=<field>"
				fi

				# addition and replacement
				if [[ $option_quote == 'bash' ]]; then
					value="$(echo-escape-bash -- "$value")"
				elif [[ $option_quote == 'command' ]]; then
					value="$(echo-escape-command -- "$value")"
				elif [[ $option_quote =~ ^(generic|yes)$ ]]; then
					value="$(echo-quote -- "$value")"
				fi
				addition="$field=$value"
				replace_pattern="\${indent}$field=$value"
				option_quote='yes' # reset it for next time
			else
				# the replacement field was a find value, do not shift it, as we will use it in the next cycle
				# instead, fetch the value, then continue to use the field as the next find
				# --max-count=1 is to workaround: https://github.com/BurntSushi/ripgrep/issues/2095
				echo-file --raw --sudo="$option_sudo" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$option_file" |
					echo-regexp -omn --find="$get_value_pattern" --replace='${value}' || :
				continue
			fi

			# replacement field is a replacement field, and not another find
			# as such, trim it from the next cycle, as we are using it now
			shift
			# then perform the replace

			# ensure if there is a value, it only has a single trailing line, and if there isn't a value, it is empty
			content="$(echo-file --raw --sudo="$option_sudo" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$option_file")"
			content="${content%$'\n'}"
			if [[ -n $content ]]; then
				content+=$'\n'
			fi
			addition="${addition%$'\n'}"
			if [[ -n $addition ]]; then
				addition+=$'\n'
			fi
			replace_pattern="${replace_pattern%$'\n'}"
			if [[ -n $replace_pattern ]]; then
				replace_pattern+=$'\n'
			fi

			# do the replacement or addition
			count="$(__print_value_strings_or_nothing "$content" | echo-regexp -cm --find="$search_pattern" || :)"
			if [[ -z $count || $count -eq 0 ]]; then
				# it wasn't found, so add manually if it's not empty
				if [[ -n $addition ]]; then
					__print_value_strings_or_nothing "$content" "$addition" | echo-wait --sudo="$option_sudo" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$option_file"
					UPDATED='yes' # a valid update occurred, note for logging
				fi
			elif [[ $count -eq 1 || $option_multiple == 'ok' ]]; then
				# first match replaced, subsequent matches removed
				__print_value_strings_or_nothing "$content" |
					echo-regexp -gm --find="$search_pattern" --replace="$replace_pattern" --replace="$remove_pattern" |
					echo-wait --sudo="$option_sudo" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$option_file"
				UPDATED='yes' # a valid update occurred, note for logging
			else
				temp_file="$(
					fs-temp \
						--directory='config-helper' \
						--directory="$(basename -- "$option_file")" \
						--file --no-touch
				)"
				if [[ $option_multiple == 'warn-skip' ]]; then
					# write update to temp file (for diff), do not update intended file
					__print_value_strings_or_nothing "$content" |
						echo-regexp -gm --find="$search_pattern" --replace="$replace_pattern" --replace="$remove_pattern" |
						echo-wait --sudo="$option_sudo" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$temp_file"
					echo-style --stderr \
						--notice1='The configuration file ' --code-error1="$option_file" --error1=' was not saved' --notice1=' as multiple value instances exist within the configuration file, which may be computational conditions that our automation would be fraught to update.' --newline \
						--info1='When you can' --notice1=' manually apply the requested changes to your configuration such that this automated update will not be attempted again.' --newline \
						--notice1='Below is our unapplied automated attempt, saved to ' --code-notice1="$temp_file" --newline \
						--="$(fs-diff -- "$option_file" "$temp_file" || :)" --newline \
						--stderr --notice1=$'\n'
				elif [[ $option_multiple == 'warn-apply' ]]; then
					# write backup to temp file, write update to intended file
					__print_value_strings_or_nothing "$content" >"$temp_file"
					echo-regexp -gm --find="$search_pattern" --replace="$replace_pattern" --replace="$remove_pattern" <"$temp_file" |
						echo-wait --sudo="$option_sudo" --user="$option_user" --group="$option_group" --reason="$option_reason" -- "$option_file"
					UPDATED='yes' # a valid update occurred, note for logging
					echo-style --stderr \
						--notice1='The configuration file ' --code-notice1="$option_file" --notice1=' ' --good1='was updated successfully.' --newline \
						--info1='However,' --notice1=' only a single replacement is supported but multiple were performed. The changes that were made are a best effort upon evaluated values and may be incorrect if conditional values were used.' --newline \
						--info1='Review the changes for correctness.' --notice1=' A backup has been made to ' --code-notice1="$temp_file" --newline \
						--="$(fs-diff -- "$temp_file" "$option_file" || :)" --newline \
						--stderr --notice1=$'\n'
				fi
			fi
		done
	}

	# act
	act "${option_args[@]}"

	# we do our own processing, as we need to support multiline matches
	if [[ $UPDATED == 'yes' && $option_quiet != 'yes' ]]; then
		echo-style --stderr --success="Updated configuration file: $option_file"
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		config_helper_test
	else
		config_helper "$@"
	fi
fi
