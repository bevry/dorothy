#!/usr/bin/env bash

function echo_split() (
	source "$DOROTHY/sources/stdinargs.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Split <input> by <needle> and print each part on a new line.

			USAGE:
			echo-split <needle> [...options] [--] ...<input>
			echo-lines ...<input> | echo-split <needle> [...options]

			OPTIONS:
			<needle> | --needle=<needle>
			    The deliminator characters to split the <input> at.
			    Use [--needle=<needle>] to provide multiple deliminators.

			$(stdinargs_options_help --)

			USAGE:
			echo-split --needle=' ' -- 'a b' 'c d'
			echo-lines -- 'a b' 'c d' | echo-split --needle=' ' --stdin

			    a
			    b
			    c
			    d
			    # exit status: 0
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_needles=() option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--needle='*) option_needles+=("${item#*=}") ;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		'--'*) option_args+=("$item") ;;
		*)
			if test "${#option_needles[@]}" -eq 0; then
				option_needles+=("$item")
			else
				option_args+=("$item")
			fi
			;;
		esac
	done

	# checck
	if test "${#option_needles[@]}" -eq 0; then
		help 'No <needle>s provided.'
	fi

	# =====================================
	# Action

	function on_input {
		# replace the deliminator with a newline
		local value="$1"
		for needle in "${option_needles[@]}"; do
			value="${value//$needle/$'\n'}"
		done
		print_line "$value"
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_split "$@"
fi
