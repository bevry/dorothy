#!/usr/bin/env bash

function checksum_() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	local item algorithms=()
	for item in 'md5sum' 'shasum' 'sha256sum'; do
		if command-exists -- "$item"; then
			algorithms+=("$item")
		fi
	done

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the checksum for a path, with progress updates if it takes a while.

			USAGE:
			checksum [...options]
			    Checksums the current directory.

			checksum [...options] -- ...<path>
			    Checksums each path provided.

			OPTIONS:
			--summary
			    Summarises the directory as a single checksum.

			--relative
			    Use relative paths instead of absolute paths.

			--untitled
			    Do not display the path that the checksums are for.

			--algorithm=<algorithm>
			    Forces a specific algorithm to be used.

			ALGORITHMS:
			We have determined the following algorithms are available on your system:
			$(echo-lines --indent='    ' "${algorithms[@]}")

			QUIRKS:
			[--relative] does not respect pwd, as such [--relative] is only useful when in [--no-summary] mode.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_paths=() option_relative='no' option_untitled='no' option_summary='no' option_algorithm=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-relative'* | '--relative'*)
			option_relative="$(get-flag-value --affirmative --fallback="$option_relative" -- "$item")"
			;;
		'--no-untitled'* | '--untitled'*)
			option_untitled="$(get-flag-value --affirmative --fallback="$option_untitled" -- "$item")"
			;;
		'--no-summary'* | '--summary'*)
			option_summary="$(get-flag-value --affirmative --fallback="$option_summary" -- "$item")"
			;;
		'--algorithm='*) option_algorithm="${item#*=}" ;;
		'--')
			mapfile -t option_paths < <(fs-absolute -- "$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# ensure algorithm
	option_algorithm="$(
		choose-option --required \
			--question='Which checksum algorithm do you wish to use?' \
			--filter="$option_algorithm" -- "${algorithms[@]}"
	)"

	# ensure paths
	if test "${#option_paths[@]}" -eq 0; then
		option_paths+=("$(pwd)")
	fi

	# =====================================
	# Dependencies

	setup-util-pv --quiet

	# =====================================
	# Action

	# helpers
	function do_checksum_of_stdin_with_filename {
		local path="$1" use_relative="$2" hash_dot

		# relative
		if test "$use_relative" = 'yes'; then
			path="$(basename "$path")"
		fi

		# algorithm
		"$option_algorithm" | {
			IFS=' ' read -ra hash_dot
			if test "$option_untitled" = 'yes'; then
				print_line "${hash_dot[0]}"
			else
				print_line "${hash_dot[0]}  $path"
			fi
		}
	}
	function do_checksum_of_file_or_directory {
		local path="$1" use_relative="$2" file

		# shows progress, works on files, and directories, and symlinks, and expands paths
		# -L show symlinks too
		find -L "$path" -type f | sort | while read -r file; do
			pv --delay-start 5 "$file" | do_checksum_of_stdin_with_filename "$file" "$use_relative"
		done
	}
	function do_checksum_of_paths {
		local path temp_file use_relative="${2:-"$option_relative"}"
		for path in "$@"; do
			if test -f "$path" -o "$option_summary" != 'yes'; then
				# file, or itemise
				do_checksum_of_file_or_directory "$path" "$use_relative"
			else
				# directory and summarise
				# force --relative, as otherwise full paths in checksums will ruin comparison
				temp_file="$(mktemp)"
				do_checksum_of_file_or_directory "$path" 'yes' | tee "$temp_file" | do_checksum_of_stdin_with_filename "$path" "$use_relative"
				rm "$temp_file"
			fi
		done
	}

	# act
	do_checksum_of_paths "${option_paths[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	checksum_ "$@"
fi
