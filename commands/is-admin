#!/usr/bin/env bash

function is_admin() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	# help
	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks if the current user, or specified users, are an administrator.

			USAGE:
			is-admin [...options] [--] ...[user]

			OPTIONS:
			<user> | --user=<user> | --username=<user>
			    User to check is an administrator.

			RETURNS:
			[0] if all <user>s were an administrator.
			[1] if any <user>s were not an administrator.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_users=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--user='*) option_users+=("${item#*=}") ;;
		'--username='*) option_users+=("${item#*=}") ;;
		'--')
			option_users+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_users+=("$item") ;;
		esac
	done

	# ensure user
	if test "${#option_users[@]}" -eq 0; then
		option_users+=("$(whoami)")
	fi

	# =====================================
	# Action

	# group
	if is-mac; then
		group='admin'
	else
		group='sudo'
	fi

	# act
	if is-user-in-group --group="$group" "${option_users[@]}"; then
		return 0
	else
		return 1
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	is_admin "$@"
fi
