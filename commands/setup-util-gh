#!/usr/bin/env bash

# https://github.com/cli/cli
# https://github.com/cli/cli/blob/trunk/docs/install_linux.md

# https://github.com/cli/cli/releases
# > get-github-release --assets --slug=cli/cli
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_checksums.txt
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_386.deb
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_386.rpm
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_386.tar.gz
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_amd64.deb
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_amd64.rpm
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_amd64.tar.gz
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_arm64.deb
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_arm64.rpm
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_arm64.tar.gz
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_armv6.deb
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_armv6.rpm
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_linux_armv6.tar.gz
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_macOS_amd64.zip
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_macOS_arm64.zip
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_windows_386.msi
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_windows_386.zip
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_windows_amd64.msi
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_windows_amd64.zip
# https://github.com/cli/cli/releases/download/v2.42.0/gh_2.42.0_windows_arm64.zip

function setup_util_gh() (
	source "$DOROTHY/sources/bash.bash"

	# configure
	function do_configure {
		# check if we can auth
		if command-exists gh && is-interactive; then
			# check if we aren't authed
			if ! gh auth status &>/dev/null; then
				# check if we want to auth
				if confirm --negative --ppid=$$ -- "Authenticate with the GitHub CLI?" 'Authenticating will prevent Rate Limit issues when fetching utilities.'; then
					gh auth login || : # we don't care if auth fails, as is irrelevant to installation
				fi
			fi
		fi
	}

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=gh; then
		do_configure
		return 0
	fi

	# gh via snap cannot access and authenticate without sudo, so ensure gh via snap is uninstalled
	if is-snap; then
		setup-util --quiet --uninstall --cli=gh \
			SNAP='gh'
	fi

	# no apk
	local arch options=(
		--name='GitHub CLI'
		--cli=gh
		"$@"
		APK_REPO='http://dl-cdn.alpinelinux.org/alpine/edge/community'
		APK='github-cli'
		APT_KEY='https://cli.github.com/packages/githubcli-archive-keyring.gpg'
		APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://cli.github.com/packages stable main'
		APT='gh'         # UBUNTU
		AUR='github-cli' # ARCH
		BREW='gh'
		DNF_REPO='https://cli.github.com/packages/rpm/gh-cli.repo'
		DNF='gh' # FEDORA
		ZYPPER_REPO='https://cli.github.com/packages/rpm/gh-cli.repo'
		ZYPPER='gh' # SUSE
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='cli/cli' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB="*/bin/$2" # macos has man pages etc, so want to isolate to just bin
		)
	}
	function add_deb_option {
		options+=(
			DEB="$(get_github_asset_url "$1")"
		)
	}
	function add_rpm_option {
		options+=(
			RPM="$(get_github_asset_url "$1")"
		)
	}
	function add_installer_option {
		options+=(
			INSTALLER="$(get_github_asset_url "$1")"
			INSTALLER_OPEN=yes
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '_macOS_arm64.zip' 'gh'
		elif test "$arch" = 'x64'; then
			add_download_option '_macOS_amd64.zip' 'gh'
		fi
	elif is-linux; then
		if test "$arch" = 'a64'; then
			add_deb_option '_linux_arm64.deb'
			add_rpm_option '_linux_arm64.rpm'
			add_download_option '_linux_arm64.tar.gz' 'gh'
		elif test "$arch" = 'a32'; then
			add_deb_option '_linux_armv6.deb'
			add_rpm_option '_linux_armv6.rpm'
			add_download_option '_linux_armv6.tar.gz' 'gh'
		elif test "$arch" = 'x64'; then
			add_deb_option '_linux_amd64.deb'
			add_rpm_option '_linux_amd64.rpm'
			add_download_option '_linux_amd64.tar.gz' 'gh'
		elif test "$arch" = 'x32'; then
			add_deb_option '_linux_386.deb'
			add_rpm_option '_linux_386.rpm'
			add_download_option '_linux_386.tar.gz' 'gh'
		fi
	elif is-wsl; then
		if test "$arch" = 'a64'; then
			add_download_option '_windows_arm64.zip' 'gh.exe'
		elif test "$arch" = 'x64'; then
			add_download_option '_windows_amd64.zip' 'gh.exe'
			add_installer_option '_windows_amd64.msi'
		elif test "$arch" = 'x32'; then
			add_download_option '_windows_386.zip' 'gh.exe'
			add_installer_option '_windows_386.msi'
		fi
	fi
	setup-util "${options[@]}"

	# configure
	do_configure
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_gh "$@"
fi
