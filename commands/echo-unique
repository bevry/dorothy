#!/usr/bin/env bash

function echo_unique() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Output each input that is unique, in their original order, without the need to sort beforehand.

			USAGE:
			echo-unique [...options] [--] ...<input>
			echo-lines ...<input> | echo-unique [...options]

			OPTIONS:
			--ignore-case
			    If provided, ignore case when comparing lines.

			EXAMPLES:

			echo-unique -- a c e a b a b

			    a
				c
				e
				b
			    # exit status: 0

			echo-lines -- a c e a b a b | echo-unique

			    a
				c
				e
				b
			    # exit status: 0

		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_ignore_case='no' option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--stdin') : ;; # already the case
		'--ignore-case') option_ignore_case='yes' ;;
		'--')
			option_args+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_args+=("$item") ;;
		esac
	done

	# =====================================
	# Action

	local bin_gawk_or_awk
	bin_gawk_or_awk="$(echo-gnu-command --install -- gawk)"

	function do_uniq {
		if [[ $option_ignore_case == 'yes' ]]; then
			"$bin_gawk_or_awk" '!seen[tolower($0)]++'
		else
			"$bin_gawk_or_awk" '!seen[$0]++'
		fi
	}

	if [[ ${#option_args[@]} -ne 0 ]]; then
		__print_lines "${option_args[@]}" | do_uniq
	else
		do_uniq
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	echo_unique "$@"
fi
