#!/usr/bin/env bash

function sparse_vault() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Helpers for working with macOS sparse vaults (encrypted DMGs).

			USAGE:
			sparse-vault mount|open <path>

			    Mounts an existing sparse vault.

			sparse-vault unmount|eject <path>

			    Unmount an existing sparse vault.

			sparse-vault create|make <path>
			  [--name=...]  # Volume name
			  [--size=...]  # Examples: MAXSIZE, 100g, 1t
			  [--type=<sparseimage|sparsebundle>]

			    Creates a new sparse vault.
			    Note that the extension of ".<type>" appended onto the <path>.

			    Use [--type=sparseimage] for a single file.
			    Use [--type=sparsebundle] for a directory style file, made up of dozens of block files.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_path='' option_name='' option_size='' option_type=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'create' | 'make') action='create' ;;
		'mount' | 'open') action='mount' ;;
		'unmount' | 'eject') action='unmount' ;;
		'--path='*) option_path="${item#*=}" ;;
		'--name='*) option_name="${item#*=}" ;;
		'--size='*) option_size="${item#*=}" ;;
		'--type='*) option_type="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $action ]]; then
				action="$item"
			elif [[ -z $option_path ]]; then
				option_path="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure valid action
	local actions=(
		'mount'
		'unmount'
		'create'
	)
	action="$(
		choose --required \
			--question='Which action to perform?' \
			--skip-default --default="$action" -- "${actions[@]}"
	)"

	# adjustments: path
	option_path="$(
		ask --linger --required \
			--question='Enter its path.' \
			--default="$option_path"
	)"
	option_path="$(fs-absolute -- "$option_path")"

	# adjustments: create
	if [[ $action == 'create' ]]; then
		option_name="$(
			ask --linger --required --confirm \
				--question='Enter the volume name.' \
				--default="$option_name"
		)"
		option_size="$(
			ask --linger --required --confirm \
				--question='Enter its maximum size. E.g. MAXSIZE|100g|1t' \
				--default="$option_size"
		)"
		option_type="$(
			choose --linger --required \
				--question='Enter its type.' \
				--default="$option_type" -- sparseimage sparsebundle
		)"
	fi

	# =====================================
	# Helpers

	function get_macos_version {
		sw_vers -productVersion | echo-regexp -o '^\d+'
	}

	# =====================================
	# Actions

	function act_mount {
		eval-helper --quiet --wrap \
			--pending="$(echo-style --bold='Compacting...')" \
			--success="$(echo-style --success='Compacted.')" \
			--failure="$(echo-style --error='Failed to compact.')" -- \
			hdiutil compact "$option_path"

		eval-helper --quiet --wrap \
			--pending="$(echo-style --bold='Mounting...')" \
			--success="$(echo-style --success='Mounted.')" \
			--failure="$(echo-style --error='Failed to mount.')" -- \
			hdiutil mount "$option_path"
	}

	function act_create {
		local args=(
			'-encryption' 'AES-256'
			'-size' "$option_size"
			'-volname' "$option_name"
		)
		if [[ "$(get_macos_version)" -ge 13 ]]; then
			args+=('-fs' 'APFS')
		else
			args+=('-fs' 'Journaled HFS+')
		fi
		if [[ $option_type == 'sparseimage' ]]; then
			args+=('-type' 'SPARSE')
			if [[ $option_path != *'.sparseimage' ]]; then
				path="${path}.sparseimage"
			fi
		else
			args+=('-type' 'SPARSEBUNDLE')
			if [[ $option_path != *'.sparsebundle' ]]; then
				path="${path}.sparsebundle"
			fi
		fi

		eval-helper --quiet --wrap \
			--pending="$(echo-style --bold='Creating...')" \
			--success="$(echo-style --success='Created.')" \
			--failure="$(echo-style --error='Failed to create.')" -- \
			hdiutil create "${args[@]}" "$option_path"

		eval-helper --quiet --wrap \
			--pending="$(echo-style --bold="Mounting...")" \
			--success="$(echo-style --success='Mounted.')" \
			--failure="$(echo-style --error='Failed to mount.')" -- \
			hdiutil mount "$option_path"
	}

	function act_unmount {
		eval-helper --quiet --wrap \
			--pending="$(echo-style --bold="Unmounting...")" \
			--success="$(echo-style --success='Unmount.')" \
			--failure="$(echo-style --error='Failed to unmount.')" -- \
			hdiutil unmount "$option_path"
	}

	# =====================================
	# Act

	if [[ "$(type -t "act_$action")" == 'function' ]]; then
		"act_$action"
	else
		echo-style --stderr --error1='Action not yet implemented: ' --code-error1="$action"
		return 78 # ENOSYS 78 Function not implemented
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	sparse_vault "$@"
fi
