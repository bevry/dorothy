#!/usr/bin/env bash

# https://github.com/koalaman/shellcheck#installing

# https://github.com/koalaman/shellcheck/releases
# trunk-ignore-all(shellcheck/SC1073)
# trunk-ignore-all(shellcheck/SC1072)
# shellcheck-v0.9.0.darwin.x86_64.tar.xz
# shellcheck-v0.9.0.linux.aarch64.tar.xz
# shellcheck-v0.9.0.linux.armv6hf.tar.xz
# shellcheck-v0.9.0.linux.x86_64.tar.xz
# shellcheck-v0.9.0.zip

# https://packages.debian.org/sid/amd64/shellcheck/filelist
# /usr/bin/shellcheck

function setup_util_shellcheck() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=shellcheck; then
		return 0
	fi

	# prefer apt last, as it installs an outdated version
	# no apk
	local arch options=(
		--cli='shellcheck'
		--order='... apt'
		"$@"
		APT='shellcheck' # UBUNTU
		AUR='shellcheck' # ARCH
		BREW='shellcheck'
		BSD='shellcheck'
		CABAL='ShellCheck'
		CHOCO='shellcheck'
		CONDA_CHANNEL='conda-forge'
		CONDA='shellcheck'
		EMERGE='shellcheck' # GENTOO
		EOPKG='shellcheck'  # SOLUS
		NIX='nixpkgs.shellcheck'
		PORT='shellcheck'
		RPM='ShellCheck' # FEDORA
		SCOOP='shellcheck'
		SNAP_CHANNEL='edge'
		SNAP='shellcheck'
		ZYPPER='ShellCheck' # SUSE
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='koalaman/shellcheck' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
			DOWNLOAD_ARCHIVE_GLOB='*/shellcheck'
		)
	}
	if is-mac; then
		add_download_option '.darwin.x86_64.tar.xz'
	else
		arch="$(get-arch)"
		if test "$arch" = 'a64'; then
			add_download_option '.linux.aarch64.tar.xz'
		elif test "$arch" = 'a32'; then
			add_download_option '.linux.armv6hf.tar.xz'
		elif test "$arch" = 'x64'; then
			add_download_option '.linux.x86_64.tar.xz'
		fi
	fi
	setup-util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_shellcheck "$@"
fi
