#!/usr/bin/env bash

function fs_temp() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Make a temporary path.

			USAGE:
			fs-temp [...options] --directory[=<dirname>]   # generate a directory path
			fs-temp [...options] --file[=<filename>]       # generate a file path

			OPTIONS:
			--xdg
			    If truthy, enforce XDG usage.
			    If falsey, disable XDG usage.
			    If omitted, use system XDG prefernce.

			--root=<root> | --inside=<root>
			    Use this as the root directory path.
			    If omitted, will detect it based on XDG usage.

			--directory=<dirname>
			    Append the <root> path with this <dirname>.
			    Use an empty <dirname> to generate a non-existent directory name.

			--file=<filename>
			    Append the <root> path with this <filename>.
			    Use an empty <filename> to generate a non-existent filename.
			    You can specify multiple if you want multiple filenames generated.

			--prefix=<prefix>
			    When generating a <dirname> or <filename>, use this <prefix>.

			--suffix=<suffix>
			    When generating a <dirname> or <filename>, use this <suffix>.

			--extension=<extension>
			    When generating a <filename>, use this <extension>.

			--touch
			    If a <filename> was provided, then touch the file to ensure it exists.

			QUIRKS:
			Unless [--touch] is truthy, then file paths won't be created on the file system.
			However, directory paths will be created regardless.
			This combination is to avoid your tooling complaining about existing files,
			while avoiding complaints about unable to write a new file to a non-existent path.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	local option_xdg="${PREFER_XDG:-"no"}"
	local option_root=''
	local option_directories=()
	local option_files=()
	local option_prefix=''
	local option_suffix=''
	local option_extension=''
	local option_touch='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-xdg'* | '--xdg'*)
			option_xdg="$(get-flag-value --affirmative --fallback="$option_xdg" -- "$item")"
			;;
		'--no-touch'* | '--touch'*)
			option_touch="$(get-flag-value --affirmative --fallback="$option_touch" -- "$item")"
			;;
		'--root='* | '--inside='*) option_root="${item#*=}" ;;
		'--directory') option_directories+=('') ;;
		'--directory='*) option_directories+=("${item#*=}") ;;
		'--file') option_files+=('') ;;
		'--file='*) option_files+=("${item#*=}") ;;
		'--prefix='*) option_prefix="${item#*=}" ;;
		'--suffix='*) option_suffix="${item#*=}" ;;
		'--extension='*) option_extension="${item#*=}" ;;
		'--') ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# if extension exists, ensure it starts with a .
	if test -n "$option_extension" -a "${option_extension:0:1}" != '.'; then
		option_extension=".${option_extension}"
	fi

	# ensure --file[=...] or --directory[=....] where provided
	if test "${#option_files[@]}" -eq 0 -a "${#option_directories[@]}" -eq 0; then
		help "You must provide at least one --file[=<filename>] or --directory[=<dirname>] option, so we know what we are generating."
	fi

	# =====================================
	# Act

	local root directory file

	# generate the root path, that directories and the file will go inside
	if test -n "$option_root"; then
		root="$option_root"
	else
		if test "$option_xdg" = 'yes'; then
			root="$XDG_CACHE_HOME/dorothy"
		else
			root="$(mktemp -d)"
		fi
	fi

	# add the directories to the root
	for directory in "${option_directories[@]}"; do
		if test -z "$directory"; then
			# generate a non-existent directory name
			while true; do
				directory="$option_prefix$(get-random-number)$option_suffix"
				if is-missing -- "$root/$directory"; then
					break
				fi
			done
		fi
		root="$root/$directory"
	done

	# ensure the root now exists
	mkdir -p "$root"

	# if no files, output directory path
	if test "${#option_files[@]}" -eq 0; then
		print_line "$root"
	else
		# output as many filenames as requested
		for file in "${option_files[@]}"; do
			if test -z "$file"; then
				# generate a non-existent filename
				while true; do
					file="$option_prefix$(get-random-number)$option_suffix$option_extension"
					if is-missing -- "$root/$file"; then
						break
					fi
				done
			fi
			if test "$option_touch" = 'yes'; then
				touch "$root/$file"
			fi
			print_line "$root/$file"
		done
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	fs_temp "$@"
fi
