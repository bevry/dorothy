#!/usr/bin/env bash

function brew_installed() (
	source "$DOROTHY/sources/bash.bash"

	# compatibility
	if ! is-brew; then
		return 46 # EPFNOSUPPORT 46 Protocol family not supported
	fi

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Outputs the names of the homebrew installed packages.

			USAGE:
			brew-installed [...options] -- [...<package>]

			OPTIONS:
			--requested
			    Output only packages that were manually installed, not packages that were only dependencies.

			--formula
			    Output only packages that are formulas.

			--cask
			    Output only packages that are casks.

			--quiet
			    If provided, do not output anything, just return the exit status.

			...<package>
			    If provided, only get details for these packages. Fail if one of them has not yet been installed.

			QUIRKS:
			If packages are provided, failure exit status will be returned if any are missing.
			Existing packages will still be output to stdout, unless --quiet is provided.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='' option_requested='no' option_packages=() option_type brew_list_cmd brew_info_cmd deno_script_args
	option_type='' # empty, formula, cask
	brew_list_cmd=(
		'brew'
		'list'
		'--versions' # --versions is necessary to limit to installed option_packages, as --full-name/-1 doesn't
	)
	brew_info_cmd=(
		'brew'
		'info'
	)
	deno_script_args=(
		'--requested' # the deno script only runs with brew info, which is only run when --requested is provided
	)
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--formula' | '--formulae') option_type='formula' ;;
		'--cask' | '--casks') option_type='cask' ;;
		'--no-requested'* | '--requested'*)
			option_requested="$(get-flag-value --affirmative --fallback="$option_requested")"
			;;
		'--')
			option_packages+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# add the filter
	if [[ -n $option_type ]]; then
		brew_list_cmd+=("--$option_type")
		brew_info_cmd+=("--$option_type")
		deno_script_args+=("--$option_type")
	fi

	# add the packages
	if [[ ${#option_packages[@]} -ne 0 ]]; then
		brew_list_cmd+=("${option_packages[@]}")
		brew_info_cmd+=(
			'--json=v2'
			"${option_packages[@]}"
		)
	else
		brew_info_cmd+=(
			'--json=v2'
			'--installed'
		)
	fi

	# =====================================
	# Helpers

	function do_brew_simple {
		# handles only --cask and --formula, but not --requested
		if [[ $option_quiet == 'yes' ]]; then
			"${brew_list_cmd[@]}" &>/dev/null
		else
			"${brew_list_cmd[@]}" | cut -d' ' -f1 | echo-unique --stdin
		fi
	}

	function do_brew_advanced {
		# handles --requested, --cask, and --formula

		# prep
		setup-util-deno --quiet

		# run
		local deno_script
		deno_script="$(type -P 'brew-installed.ts')"
		if [[ $option_quiet == 'yes' ]]; then
			"${brew_info_cmd[@]}" | "$deno_script" "${deno_script_args[@]}" &>/dev/null
		else
			"${brew_info_cmd[@]}" | "$deno_script" "${deno_script_args[@]}"
		fi
	}

	# get names of requested packages
	if [[ $option_requested == 'no' ]]; then
		do_brew_simple
	elif [[ ${#option_packages[@]} -eq 0 ]]; then
		do_brew_advanced
	elif [[ "$(do_brew_advanced | echo-count-lines --no-inline --stdin)" -ne ${#option_packages[@]} ]]; then
		return 1
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	brew_installed "$@"
fi
