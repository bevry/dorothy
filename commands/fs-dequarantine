#!/usr/bin/env bash

function fs_dequarantine_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	# @todo add way more tests
	eval-tester --name='ok using arguments' --ignore-stdout -- \
		fs-dequarantine -- "$DOROTHY/commands/dorothy"

	echo-style --g1="TEST: $0"
	return 0
)
function fs_dequarantine() (
	source "$DOROTHY/sources/is-fs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Remove the quarantine flag from a path.

			USAGE:
			fs-dequarantine [...options] [--] ...<path>

			OPTIONS:
			$(is_fs_options '13')

			RETURNS:
			[0] if all <path>s were not quarantined or successfully dequarantined
			[1] if any <path>s were quarantined but could not be dequarantined
			[2] if a <path> was missing
			[9] if a <path> was a broken symlink
			[13] if a <path> was a non-readable path, or if a <path> was not accessible
			[22] if empty arguments were provided
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	is_fs_args "$@"

	# use [/usr/bin/xattr] as homebrew could install an unrelated xattr
	if [[ ! -x /usr/bin/xattr ]] || ! is-mac; then
		return 0 # not needed
	fi

	# invoke
	is_fs_invoke 'fs-dequarantine.bash' '13'

	# if verbose and failure, output contextual failure
	if [[ $option_quiet == 'no' && $fs_status -ne 0 ]]; then
		case "$fs_status" in
		2) echo-style --stderr --error1='The path was missing: ' --code-error1="$fs_failed_path" ;;
		9) echo-style --stderr --error1='The path was a broken symlink: ' --code-error1="$fs_failed_path" ;;
		13) echo-style --stderr --error1='The path was not accessible: ' --code-error1="$fs_failed_path" ;;
		22) echo-style --stderr --error1='The path was not a valid argument: ' --code-error1="$fs_failed_path" ;;
		*) is_fs_unknown_error ;;
		esac
	fi

	# done
	return "$fs_status"
)


# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		fs_dequarantine_test
	else
		fs_dequarantine "$@"
	fi
fi
