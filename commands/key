#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# Guides
# https://www.gnupg.org/gph/en/manual.html
# https://riseup.net/en/security/message-security/openpgp/best-practices
# https://debian-administration.org/users/dkg/weblog/97
# https://davesteele.github.io/gpg/2014/09/20/anatomy-of-a-gpg-key/
# https://www.void.gr/kargig/blog/2013/12/02/creating-a-new-gpg-key-with-subkeys/
# http://curtiswallen.com/pgp/
# https://carouth.com/blog/2014/05/25/signing-pgp-keys/
# https://www.phildev.net/pgp/gpgsigning.html
# https://easyengine.io/tutorials/linux/gpg-keys/
# https://www.youtube.com/watch?v=ZSa-d_9O5DA

# Codes
# sec => 'Secret key'
# ssb => 'Secret SuBkey'
# pub => 'Public key'
# sub => 'public SUBkey'

function getmode {
	choose-option --question='What type of GPG key do you wish to fetch?' --filter="${1-}" -- 'public' 'private'
}
function getkey {
	if test -n "${1-}"; then
		echo "$1"
	else
		key get
	fi
}
function getdate {
	if test -n "${1-}"; then
		echo "$1"
	else
		date -v +1y "+%Y-%m-%d"
	fi
}

action="$(choose-option --question='What action do you want to take?' --filter="${1-}" -- list get export delete new edit trust extend expire encrypt decrypt sencrypt)"

# list [mode]
if test "$action" = "list"; then
	mode="$(getmode "${2-}")"
	if test "$mode" = "private"; then
		gpg --keyid-format LONG -K
	else
		gpg --keyid-format LONG -k
	fi

# get [mode] [key]
elif test "$action" = "get"; then
	if test -n "${3-}"; then
		echo "$3"
		exit 0
	fi
	mode="$(getmode "${2-}")"
	if test "$mode" = "private"; then
		flag="K"
		type="sec"
	else
		flag="k"
		type="pub"
	fi

	keys="$(gpg --fingerprint --keyid-format LONG -$flag | grep -A1 "$type" | grep "Key fingerprint =" | sed "s/.*=//; s/ *//g")"
	if is-empty-string "$keys"; then
		stderr echo 'no keys yet'
		exit 1
	fi

	choose-option --question='Which key to select?' -- "${keys[@]}"

# export [mode] [key]
elif test "$action" = "export"; then
	mode="$(getmode "${2-}")"
	key="$(key get "$mode" "${3-}")"
	if test "$mode" = "private"; then
		gpg --armor --export-secret-keys "$key"
	else
		gpg --armor --export "$key"
	fi

# delete [mode] [key]
elif test "$action" = "delete"; then
	mode="$(getmode "${2-}")"
	key="$(key get "$mode" "${3:?"USAGE: key delete <mode> <KEY>"}")"
	if confirm-bool "Confirm you wish to delete [$mode] key [$key]?"; then
		if test "$mode" = "private"; then
			gpg --delete-secret-keys "$key"
		else
			gpg --delete-keys "$key"
		fi
	fi

# new
elif test "$action" = "new"; then
	gpg --gen-key

# edit [key]
elif test "$action" = "edit"; then
	key="$(getkey "${2-}")"
	gpg --edit-key "$key"

# trust [key]
elif test "$action" = "trust"; then
	key="$(key get private "${2-}")"
	if confirm-bool "Confirm you wish to trust key [$key]?"; then
		echo "trust" | gpg --edit-key "$key"
	fi

# extend [key] [date]
elif test "$action" = "extend"; then
	key="$(key get private "${2-}")"
	date="$(getdate "${3-}")"
	if confirm-bool "Confirm you wish to extend key [$key] to [$date]?"; then
		gpg --quick-set-expire "$key" "$date"
	fi

# expire [key]
elif test "$action" = "expire"; then
	key="$(key get private "${2-}")"
	date="$(date -v +0d "+%Y-%m-%d")"
	if confirm-bool "Confirm you want to expire key [$key]?"; then
		gpg --quick-set-expire "$key" "$date"
	fi

# encrypt <file> <receipient's key> [your key]
elif test "$action" = "encrypt"; then
	file="${2:?"USAGE: key encrypt <FILE> <RECIPIENT's KEY> [your key]"}"
	recipient="${3:?"USAGE: key encrypt <file> <RECIPIENT's KEY> [your key]"}"
	you="${4-}"
	if test -n "$you"; then
		gpg -ase -r "$recipient" -u "$you" "$file"
	else
		gpg -ase -r "$recipient" "$file"
	fi

# decrypt <file>
elif test "$action" = "decrypt"; then
	file="${2:?"USAGE: key descrypt <FILE>"}"
	gpg -d "$file"

# sencrypt <file>
elif test "$action" = "sencrypt"; then
	file="${2:?"USAGE: key sencrypt <FILE>"}"
	gpg -c "$file"

else
	stderr echo 'invalid action'
	exit 1
fi
