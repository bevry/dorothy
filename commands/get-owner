#!/usr/bin/env bash

function get_owner_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	eval-tester --name='ok using arguments' --ignore-stdout \
		-- get-owner -- "$DOROTHY/README.md"

	echo-style --g1="TEST: $0"
	return 0
)
function get_owner() (
	source "$DOROTHY/sources/is-fs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Check if all <path>s are writable.

			USAGE:
			is-writable [...options] [--] ...<path>

			OPTIONS:
			$(is_fs_options '13')

			RETURNS:
			[0] if all <path>s are writable
			[2] if a <path> was missing
			[13] if a <path> was not accessible
			[22] if empty arguments were provided
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inputs=() option_quiet='' option_elevated='' option_elevate='13' option_user='' option_group='' option_reason=''
	is_fs_args "$@"

	# invoke
	local fs_status fs_failed_path
	is_fs_invoke 'get-owner.bash'

	# if verbose and failure, output contextual failure
	if [[ $option_quiet == 'no' && $fs_status -ne 0 ]]; then
		case "$fs_status" in
		2) echo-style --stderr --error1='The path was missing: ' --code-error1="$fs_failed_path" ;;
		13) echo-style --stderr --error1='The path was not accessible: ' --code-error1="$fs_failed_path" ;;
		22) echo-style --stderr --error1='The path was not a valid argument: ' --code-error1="$fs_failed_path" ;;
		*) is_fs_unknown_error ;;
		esac
	fi

	# done
	return "$fs_status"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		get_owner_test
	else
		get_owner "$@"
	fi
fi
