#!/usr/bin/env bash
# trunk-ignore-all(shellcheck/SC2162)

function get_terminal_theme() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get whether the terminal is light or dark.

			USAGE:
			get-terminal-theme [...options]

			OPTIONS:
			--refresh-cache
			    Clear the cache, and fetch the terminal theme.

			--clear-cache
			    Only clear the cache, do not fetch the terminal theme.

			--fallback=<light|dark|>
			    If a theme cannot be determined, use this instead.
			    Defaults to [dark]
		EOF
		if test "$#" -ne 0; then
			printf '%s\n' '' 'ERROR:' "$@" # don't get echo-style, as echo-style uses this
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_fallback='dark' option_clear_cache='no' option_refresh_cache='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--refresh-cache') option_refresh_cache='yes' ;;
		'--clear-cache') option_clear_cache='yes' ;;
		'--fallback='*) option_fallback="${item#*=}" ;;
		'--no-fallback') option_fallback='' ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) paths+=("$item") ;;
		esac
	done

	if test "$option_fallback" != 'dark' -a "$option_fallback" != 'light' -a -n "$option_fallback"; then
		help "Invalid fallback theme [$option_fallback] must either be empty, light, or dark"
	fi

	# =====================================
	# Action

	# prepare cache
	local cache_file
	cache_file="$(fs-temp --file='terminal-theme')"

	# if clearing cache, only clear cache
	if test "$option_clear_cache" = 'yes' -o "$option_refresh_cache" = 'yes'; then
		if test -f "$cache_file"; then
			rm "$cache_file"
		fi
		if test "$option_clear_cache" = 'yes'; then
			return 0
		fi
	elif test -f "$cache_file"; then
		cat "$cache_file"
		return 0
	fi

	# on macos, one can do this:
	# osascript -e 'tell application "Terminal" to get the background color of the current settings of the selected tab of front window'
	# to get back:
	# 5310, 8279, 11815
	# however that prompts the user if they want to allow terminal to access system events

	# methods
	local theme=''
	function get_theme_via_fallback {
		if test -n "$option_fallback"; then
			theme="$option_fallback"
		fi
	}
	function get_theme_via_theme_env_var {
		if [[ ${THEME-} =~ ^(light|dark)$ ]]; then
			theme="$THEME"
		fi
	}
	function get_theme_via_uname {
		# if there are linux distros that don't have a dark theme, then this will need to be updated
		if is-linux; then
			theme='dark'
		fi
	}
	function get_theme_via_colorfgbg_env_var {
		if test -n "${COLORFGBG-}"; then
			# COLORFGBG contains segments of ANSI colors:
			# 12;8 — Foreground color code 12 and background color code 8.
			# 1;15;10 — Foreground color code 1, background color code 15, and alternate background color code 10.
			# 7;0 — Foreground color code 7 and background color code 0.
			# 15;default;0 — Foreground color code 15, background color code default, and alternate background color code 0.
			# default;default — Foreground color code default and background color code default.
			# ANSI colors are 0-15, in which 7 and 15 are light grey, and 9-15 are light colors.
			local bg="$COLORFGBG"
			if test -n "$bg"; then
				bg="${bg##*;}" # trim everything prior to the last ;
				if test "$bg" = 'default' || test "$bg" -le 6 -o "$bg" -eq 8; then
					theme='light'
				else
					theme='dark'
				fi
			fi
		fi
	}
	function get_theme_via_ansi_tty_query {
		# If the background color is `ba1a2b3c` the read will return `1a74/2b98/3cb6`
		local _ color='' r g b l
		# stdin+stderr must be readable+writable for the read to work, but we can't check silently, as failures are noisey, and silencing the failures causes them to close: https://gist.github.com/balupton/6eee015345c663d7d7baf83d8e20ce1f so just note in this comment
		# as terminal theme is really only important for TTY use cases, use is-tty, this also solves vscode unable to ssh session into a machine
		if is-tty; then
			#  </dev/tty is used to ensure data = book in this example (don't need >/dev/tty as -s flag prevents output):
			# echo 'book' | {
			# 	IFS=: read -s -t 1 -d $'\a' -p $'\e]11;?\a' _ color </dev/tty;
			# 	read -t 1 data
			# 	echo data = $data
			# }
			#
			# use a timeout of 1 seconds, as 0.01 is too slow for vscode tunnels, which causes the respond to be to tty and not captured, causing a false guess to them... as [get-terminal-theme] now has a cache, the larger timeout is not a big deal
			IFS=: read -s -t 1 -d $'\a' -p $'\e]11;?\a' _ color </dev/tty || :
			if test -n "$color"; then
				# Fetch the first two characters of [1a]74/[2b]98/[3c]b6 which is our color, and convert from hexadecimal to decimal
				# For what the latter two characters are, no one seems to know: https://unix.stackexchange.com/q/754952/50703
				r=$((16#${color:0:2}))  # 1a => 26
				g=$((16#${color:5:2}))  # 2b => 43
				b=$((16#${color:10:2})) # 3c => 60

				# Figure out the lightness from HSL
				max=$((r > g ? (r > b ? r : b) : (g > b ? g : b)))
				min=$((r < g ? (r < b ? r : b) : (g < b ? g : b)))
				l=$(((max + min) * 50 / 255))

				# Is the lightness dark or light?
				if ((l < 50)); then
					theme='dark'
				else
					theme='light'
				fi
			fi
		fi
	}

	local method methods=(
		# this is always accurate, as is intentional
		get_theme_via_theme_env_var
		# this should be accurate if we parse it correctly
		get_theme_via_colorfgbg_env_var
		# this should be accurate, as is from experience
		get_theme_via_uname
		# this is accurate, but has the side effect of reading the TTY (has delay, can trim input from other readers)
		get_theme_via_ansi_tty_query
		# the fallback
		get_theme_via_fallback
	)
	for method in "${methods[@]}"; do
		"$method"
		if test -n "$theme"; then
			tee "$cache_file" <<<"$theme"
			return 0
		fi
	done

	# no successful method
	return 1
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_terminal_theme "$@"
fi
