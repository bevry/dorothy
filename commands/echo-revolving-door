#!/usr/bin/env bash

function echo_revolving_door() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Continously clear the output of a command, showing only the latest output, then clearing it upon completion.

			USAGE:
			(echo-lines -- 1 2; sleep 2; echo-lines -- 3 4; sleep 2) | echo-revolving-door
			# outputs 2, then waits, then outputs 4, then waits, then clears
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_columns=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--columns='*) option_columns="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# determine columns
	if test -z "$option_columns"; then
		# trunk-ignore(shellcheck/SC2015)
		option_columns="$(is-tty && tput cols || :)"
	fi

	# =====================================
	# Action

	if test -z "$option_columns"; then
		cat
	else
		local input
		while IFS='' read -r input || test -n "$input"; do
			# trim everything prior to the last newline, using bash param expansion
			input="${input##*$'\n'}"
			# trim everything exceeding size_columns
			input="${input:0:option_columns}"
			printf '\e[G\e[2K%s' "$input"
		done
		printf '\e[G\e[2K'
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	echo_revolving_door "$@"
fi

# if is-mac; then
# 	bin_gfold="$(type -P 'gfold' 2>/dev/null || :)"
# else
# 	# we could support these on macos, however fmt does not support -t on macos (it is something different, so we'd have to manually do that)
# 	bin_gfold="$(type -P 'fold' 2>/dev/null || :)"
# fi
# if test -z "$bin_gfold"; then
# 	use_cat='yes'
# fi

# local input last_input=''
# function clear_last_input {
# 	if test -z "$last_input"; then
# 		: # do nothing
# 	elif [[ $last_input =~ $'\e\[[0-9]*[AKGFJ]' ]]; then
# 		printf '\e[G\e[2K' # set cursor to start of line, and clear from there
# 	else
# 		local count
# 		count="$(print_string "$last_input" | echo-count-lines --stdin)"
# 		printf "\e[${count}A\e[G\e[J" # move cursor up count, set cursor to start of line, and delete everything from there
# 	fi
# }
# while IFS='' read  -r input || test -n "$input"; do
# 	clear_last_input
# 	input="$(print_string "$input" | "$bin_gfold" -w "$size_columns")"
# 	print_line "$input"
# 	last_input="$input"
# done
# clear_last_input
