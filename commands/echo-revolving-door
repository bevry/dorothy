#!/usr/bin/env bash

function echo_revolving_door() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Continously clear the output of a command, showing only the latest output, then clearing it upon completion.

			USAGE:
			(echo-lines -- 1 2; sleep 2; echo-lines -- 3 4; sleep 2) | echo-revolving-door [...options]
			# outputs 2, then waits, then outputs 4, then waits, then clears

			OPTIONS:
			--columns=<columns>
			    The number of columns to display. If not provided, the terminal's columns will be used. If the terminal's columns cannot be determined, or if <= 0, then the full line will be displayed.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_columns=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--columns='*) option_columns="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# determine columns
	if [[ -z $option_columns ]]; then
		local terminal_size=()
		mapfile -t terminal_size < <(get-terminal-lines-and-columns || :)
		if [[ ${#terminal_size[@]} -eq 2 ]]; then
			option_columns="${terminal_size[1]}"
		fi
	fi

	# =====================================
	# Action

	if [[ -z $option_columns || $option_columns -le 0 ]]; then
		cat
	else
		local input negative_columns
		negative_columns="$((option_columns * -1))"
		while IFS= read -r input || [[ -n $input ]]; do
			if [[ -z $input ]]; then
				continue
			fi
			# trim shapeshifting
			input="$(__escape_shapeshifting -- "$input")"
			# trim everything after the last newline, don't have to worry about a trailing newline as read already handled that
			input="${input##*$'\n'}"
			# get only the last columns
			input="$(__substr "$input" "$negative_columns")"
			# check we still have something left
			if [[ -z $input ]]; then
				continue
			fi
			# clear the single line, and output the new line
			printf '\e[G\e[J%s' "$input"
		done
		printf '\e[G\e[J'
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	echo_revolving_door "$@"
fi
