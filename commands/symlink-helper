#!/usr/bin/env bash

# @todo currently this is only for creating, however we could make it also for listing/finding as well

function symlink_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF
			ABOUT:
			Create a symlink at a new location that points to an existing location.

			USAGE:
			symlink-helper [...options] --existing=<existing> --symlink=<symlink>

			OPTIONS:
			--relative
			    Save the symlink target as a relative path instead of absolute.

			--existing=<existing>
			    The target of the symlink.

			--symlink=<symlink>
			    The location of the symlink to modify.

			--[no-]quiet
			    When quiet, if the symlink is already desired, nothing will be output.

			EXAMPLES:
			symlink-helper --existing="$HOME" --symlink=./my-home-folder-symlink
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='' option_existing='' option_symlink='' option_relative='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--existing='*) option_existing="${item#*=}" ;;
		'--symlink='*) option_symlink="${item#*=}" ;;
		'--no-relative'* | '--relative'*)
			option_relative="$(get-flag-value --affirmative --fallback="$option_relative" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $item ]]; then
				help "Empty argument provided."
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# check
	function help_missing {
		echo-style --error='FAILURE:' --newline \
			'The path to be symlinked ' --code="$option_existing" " doesn't actually exist." --newline \
			'As such, we cannot create a symlink at ' --code="$option_symlink" ' pointing to it.' --newline \
			'Create the path at ' --code="$option_existing" ' first, then try again.'
		return 2 # ENOENT 2 No such file or directory
	}
	if [[ -z $option_existing ]]; then
		option_existing="$(
			ask --required \
				--question="What is the existing path that you want to symlink elsewhere?"
		)"
	fi
	if [[ -z $option_symlink ]]; then
		option_symlink="$(
			ask --required \
				--question="What is the new path that you want to redirect?"
		)"
	fi

	# dependencies
	setup-util-coreutils --quiet

	# =====================================
	# Act

	# check the existance of the source, if it doesn't exist, there is no point
	if [[ ! -e $option_existing ]]; then
		help_missing
	fi

	# if the symlink doesn't exist, ensure its parent path at least exists
	if [[ ! -e $option_symlink ]]; then
		__mkdirp "$(fs-dirname -- "$option_symlink")"
	fi

	# ensure validity of existing path
	local original
	while :; do
		# ensure both paths are not relative paths, otherwise weird things will happen
		option_existing="$(fs-absolute -- "$option_existing")"
		option_symlink="$(fs-absolute -- "$option_symlink")"

		# double check the existance of the source, if it doesn't exist, there is no point
		if [[ ! -e $option_existing ]]; then
			help_missing
		fi

		# check if the existing path is a symlink
		# if it is, then use its target instead, and repeat the checks
		if [[ -L $option_existing ]]; then
			original="$option_existing"
			option_existing="$(fs-realpath -- "$option_existing")"
			echo-style --bold="üíÅ‚Äç‚ôÄÔ∏è Target " --code="$original" --bold=" redirects to " --code="$option_existing" --bold=" üëâ using the redirection..."
			continue
		fi

		# all checks passed, break
		break
	done

	# determine the desired path
	if [[ $option_relative == 'yes' ]]; then
		option_existing="$(fs-realpath --relative-to="$(fs-dirname -- "$option_symlink")" -- "$option_existing")"
	fi

	# check if the symlink is already desired
	if [[ -e $option_symlink ]]; then
		if [[ -L $option_symlink ]]; then
			if [[ "$(fs-realpath -- "$option_symlink")" == "$option_existing" ]]; then
				if [[ $option_quiet != 'yes' ]]; then
					echo-style --bold="üëç Symlink already created at " --code="$option_symlink" --bold=" targetting " --code="$option_existing"
				fi
				return 0
			fi
			echo-style --bold="üíÅ‚Äç‚ôÄÔ∏è Symlink already exists at " --code="$option_symlink" --bold=" üëâ recreating..."
			# is a symlink but a different target, drop it and recreate
			rm "$option_symlink"
		else
			# not a symlink, confirm with the user what to do
			fs-rm --confirm -- "$option_symlink"
		fi
	elif [[ -L $option_symlink ]]; then
		# is a broken symlink, drop it and recreate
		rm "$option_symlink"
	fi

	# create the symlink
	# -F: replace symlink if directory if needed
	# -f: unlink symlink path if needed
	# -s: symbolic link
	if is-alpine; then
		# alpine doesn't support -F, however the above removals should make it unnecessary
		# https://github.com/bevry/dorothy/actions/runs/11323459946/job/31486170602#step:4:11
		ln -sf "$option_existing" "$option_symlink"
	else
		ln -sfF "$option_existing" "$option_symlink"
	fi

	# log result to stderr
	echo-style --success="üëç Symlink created at " --code="$option_symlink" --bold=" targetting " --code="$option_existing"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	symlink_helper "$@"
fi
