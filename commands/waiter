#!/usr/bin/env bash

function waiter_() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Take a break.

			USAGE:
			waiter [...options]

			OPTIONS:
			<timeout> | --timeout=<timeout>
			    If provided, will wait for this amount of seconds, and count down.
			    If not provided, will wait indefinitely, and count up.

			--message=<message>
			    A custom message where %s will be replaced with the time remaining or the time waited.

			--exists=<path>
			    If the path exists, skip any more waiting, and return success exit status (0).

			--status=<exit-status>
			    If timed out, return this exit status.
			    Defaults to 0, however if --exists is provided, this will default to [ETIMEDOUT 60 Operation timed out] instead.

			--stdout=<stdout>
			    If provided, once done waiting, output this to stdout.

			--stderr=<stderr>
			    If provided, once done waiting, output this to stderr.

			--tty=<tty>
			    If provided, once done waiting, output to this TTY.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_timeout='' option_message='' option_exists='' option_status='' option_stdout='' option_stderr='' option_tty=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--message='*) option_message="${item#*=}" ;;
		'--exists='*) option_exists="${item#*=}" ;;
		'--status='*) option_status="${item#*=}" ;;
		'--stdout='*) option_stdout="${item#*=}" ;;
		'--stderr='*) option_stderr="${item#*=}" ;;
		'--tty='*) option_tty="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$option_timeout"; then
				option_timeout="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# validate
	if test -n "$option_timeout" && ! is-integer -- "$option_timeout"; then
		help "If <timeout> is provided, it must be an integer, this is not an integer: $option_timeout"
	fi

	# status
	if test -z "$option_status"; then
		if test -n "$option_exists"; then
			option_status=60 # ETIMEDOUT 60 Operation timed out
		else
			option_status=0
		fi
	fi

	# message
	if test -z "$option_message"; then
		if test -n "$option_exists"; then
			if test -n "$option_timeout"; then
				option_message="$(echo-style --dim='Waiting for path ' --code_notice="$option_exists" --dim=' to become available... %s remaining')"
			else
				option_message="$(echo-style --dim='Waiting for path ' --code_notice="$option_exists" --dim=' to become available... %s elapsed')"
			fi
		else
			if test -n "$option_timeout"; then
				option_message="$(echo-style --dim='Waiting... %s remaining')"
			else
				option_message="$(echo-style --dim='Waiting... %s elapsed')"
			fi
		fi
	fi

	# =====================================
	# Action

	# terminal
	local terminal_device_file
	terminal_device_file="$(get-terminal-device-file)"

	# print helpers
	function __print_plural {
		if test "$1" -gt 1; then
			printf '%s' 's'
		fi
	}
	function __print_minutes {
		local plural
		plural="$(__print_plural "$1")"
		# trunk-ignore(shellcheck/SC2059)
		printf "$option_message"$'\n' "$1 minute$plural" >"$terminal_device_file"
	}
	function __print_seconds {
		local plural
		plural="$(__print_plural "$1")"
		# trunk-ignore(shellcheck/SC2059)
		printf "$option_message"$'\n' "$1 second$plural" >"$terminal_device_file"
	}
	function __print_minutes_and_seconds {
		local plural_minutes plural_seconds
		plural_minutes="$(__print_plural "$1")"
		plural_seconds="$(__print_plural "$2")"
		# trunk-ignore(shellcheck/SC2059)
		printf "$option_message"$'\n' "$1 minute$plural_minutes and $2 second$plural_seconds" >"$terminal_device_file"
	}

	# wait
	local -i minutes delta waited=0
	while true; do
		if test -n "$option_exists" -a -e "$option_exists"; then
			option_status=0
			break
		fi
		if test -n "$option_timeout"; then
			if test "$option_timeout" -eq 0; then
				break
			fi
			if test "$option_timeout" -gt 60; then
				minutes="$((option_timeout / 60))"
				delta="$((option_timeout % 60))"
				if test "$delta" -eq 0; then
					__print_minutes "$minutes"
					delta=60
				else
					__print_minutes_and_seconds "$minutes" "$delta"
				fi
				option_timeout="$((option_timeout - delta))"
				sleep "$delta"
			else
				__print_seconds "$option_timeout"
				option_timeout="$((option_timeout - 1))"
				sleep 1
			fi
		elif test "$waited" -gt 60; then
			minutes="$((waited / 60))"
			delta="$((option_timeout % 60))"
			__print_minutes "$minutes"
			if test "$delta" -eq 0; then
				delta=60
			fi
			waited="$((waited + delta))"
			sleep "$delta"
		else
			__print_seconds "$waited"
			waited="$((waited + 1))"
			sleep 1
		fi
		# erase duration message
		echo-style --no-trail --delete-line >"$terminal_device_file"
	done

	# waiting done, do dumps if we have them
	if test "${option_stdout-}"; then
		__print_lines "$option_stdout" >/dev/stdout
	fi
	if test "${option_stderr-}"; then
		__print_lines "$option_stderr" >/dev/stderr
	fi
	if test "${option_tty-}"; then
		__print_lines "$option_tty" >"$terminal_device_file"
	fi
	return "$option_status"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	waiter_ "$@"
fi
