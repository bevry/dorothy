#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# prepare
if is-mac; then
	args=('-R')
else
	args=('--recursive' '--changes')
fi

# help
if is-help-separator "$@"; then
	stderr cat <<-EOF
		ABOUT:
		Claim ownership of a path, by updating its permissions via chmod and chown.

		USAGE:
		fs-own [--verbose] [--user=...] [--group=...] -- <...paths>

		QUIRKS:
		The user and the group both get rwx permissions via [chmod g+rwx,u+rwx].
	EOF
	exit 22 # Invalid argument
fi

# options
mapfile -t options < <(echo-before-separator "$@")
option_verbose="$(get-flag-value verbose --missing=no -- "${options[@]}" | echo-affirmative)"
option_user="$(get-flag-value user -- "${options[@]}")"
option_group="$(get-flag-value group -- "${options[@]}")"
mapfile -t paths < <(echo-after-separator "$@")

# check
if is-array-empty-or-partial "${paths[@]}"; then
	stderr echo 'missing paths: refer to [fs-own --help]'
	exit 22 # Invalid argument
fi

# helpers
function do_sudo {
	echo-eval sudo "$@"
}
function do_user {
	do_sudo --set-home --user="$option_user" "$@"
}
function do_user_then_root {
	if test -n "$option_user" && do_user "$@"; then
		return 0
	elif do_sudo "$@"; then
		return 0
	else
		echo "^ sudo user, and sudo, both failed, giving up."
		return 1
	fi
}
function do_chown {
	do_sudo chown "${args[@]}" "$@"
}
function do_chmod {
	do_user_then_root chmod "${args[@]}" "$@"
	# find "$path" -type d -exec chmod 755 {} \; # dirs
	# find "$path" -type f -exec chmod 644 {} \; # files
}

for path in "${paths[@]}"; do
	if test "$option_verbose" = 'yes'; then
		echo "Updating permissions for [$path]...  ⏲"
		echo-eval ls -la "$path"
	fi
	if test -n "$option_user" -a -n "$option_group"; then
		do_chown "$option_user:$option_group" "$path"
	elif test -n "$option_user"; then
		do_chown "$option_user" "$path"
	elif test -n "$option_group"; then
		do_chown ":$option_group" "$path"
	fi
	do_chmod g+rwx,u+rwx "$path"
	if test "$option_verbose" = 'yes'; then
		echo-eval ls -la "$path"
		echo "Updated permissions for [$path]. ✅"
	fi
done
