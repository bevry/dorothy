#!/usr/bin/env bash

function fs_own_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	local root dir file
	root="$(fs-temp --directory)"
	dir="$(fs-temp --root="$root" --directory='dir' --touch)"
	file="$(fs-temp --root="$root" --file='file' --touch)"
	subfile="$(fs-temp --root="$dir" --file='subfile' --touch)"

	fs-structure -- "$root"

	eval-tester --name='can own a file +quiet' \
		-- fs-own --quiet -- "$file"

	fs-structure -- "$root"

	eval-tester --name='can own a directory +quiet' \
		-- fs-own --quiet -- "$dir"

	fs-structure -- "$root"

	eval-tester --name='can own a file -quiet' --ignore-stdout \
		-- fs-own --no-quiet -- "$file"

	fs-structure -- "$root"

	eval-tester --name='can own a directory -quiet' --ignore-stdout \
		-- fs-own --no-quiet -- "$dir"

	fs-structure -- "$root"

	eval-tester --name='can own a file +verbose' --ignore-stdout --ignore-stderr \
		-- fs-own --verbose -- "$file"

	fs-structure -- "$root"

	eval-tester --name='can own a directory +verbose' --ignore-stdout --ignore-stderr \
		-- fs-own --verbose -- "$dir"

	fs-structure -- "$root"

	eval-tester --name='can own a directory +quiet +admin' --ignore-stderr \
		-- fs-own --quiet --admin -- "$dir"

	fs-structure -- "$root"

	eval-tester --name='can own a directory -quiet +admin' --ignore-stdout --ignore-stderr \
		-- fs-own --no-quiet --admin -- "$dir"

	fs-structure -- "$root"

	eval-tester --name='can own a directory +quiet +root' --ignore-stdout --ignore-stderr \
		-- fs-own --verbose --root -- "$dir"

	fs-structure -- "$root" || :
	eval-helper --no-quiet --wrap -- is-accessible.bash -- "$dir" || :
	eval-helper --no-quiet --wrap -- is-accessible -- "$dir" || :
	eval-helper --no-quiet --wrap -- stat -L "$dir" || :
	sudo-helper --wrap -- stat -L "$dir" || :

	fs-structure -- "$dir" || :
	eval-helper --no-quiet --wrap -- is-accessible.bash -- "$subfile" || :
	eval-helper --no-quiet --wrap -- is-accessible -- "$subfile" || :
	eval-helper --no-quiet --wrap -- stat -L "$subfile" || :
	sudo-helper --wrap -- stat -L "$subfile" || :

	echo-style --g1="TEST: $0"
	return 0
)
function fs_own() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Claim ownership of a path, by updating its permissions via chmod and chown.

			USAGE:
			fs-own [...options] [--] ...<path>

			OPTIONS:
			--no-quiet
			    if provided, will output the executed commands.

			--verbose
			    if provided, will use --no-quiet for this command, and use --verbose on executed chmod/chown commands.

			--changes
			    if provided, changes will be reported if the operating system supports it.
				defaults to enabled if --quiet is not provided.

			--permissions=<permissions>
			    sets file and directory permissions

			--me
			    if provided, will set yourself as the owner.

			--admin
			    if provided, will use the platform specific admin values.

			--root
			    if provided, will use the platform specific root values.

			--owner=<owner>
			    if provided, will set the path owner to this.

			--user=<user>
			    if provided, will set the path owner to this user.

			--group=<group>
			    if provided, will set the path owner to this group.

			--sudo
			    if provided, sudo will be used, automatically enabled when admin/owner/user/group is provided.

			--optional
			    if provided, ignore missing paths and failures.

			--no-recursive
			    if provided, only the exact path will be used, not any child paths.

			QUIRKS:
			If [--permissions=...], [--directory-permissions=...], [--file-permissions=...] are all omitted, then the permissions will be set to [a-xrw,ug+Xrw].
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	local option_paths=()
	local option_quiet='' option_verbose='no'
	local option_changes='' # os support
	local option_owner=''
	local option_user=''
	local option_group=''
	local option_parents='no'
	local option_me='no'
	local option_admin='no'
	local option_root='no'
	local option_permissions=''
	local option_directory_permissions='' # deprecated
	local option_file_permissions=''      # deprecated
	local option_sudo='no'
	local option_optional='no'
	local option_recursive='yes'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-verbose'* | '--verbose'*)
			option_verbose="$(get-flag-value --affirmative --fallback="$option_verbose" -- "$item")"
			;;
		'--no-changes'* | '--changes'*)
			option_changes="$(get-flag-value --affirmative --fallback="$option_changes" -- "$item")"
			;;
		'--no-parents'* | '--parents'*)
			option_parents="$(get-flag-value --affirmative --fallback="$option_parents" -- "$item")"
			;;
		'--no-me'* | '--me'*)
			option_me="$(get-flag-value --affirmative --fallback="$option_me" -- "$item")"
			;;
		'--no-admin'* | '--admin'*)
			option_admin="$(get-flag-value --affirmative --fallback="$option_admin" -- "$item")"
			;;
		'--no-root'* | '--root'*)
			option_root="$(get-flag-value --affirmative --fallback="$option_root" -- "$item")"
			;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--no-optional'* | '--optional'*)
			option_optional="$(get-flag-value --affirmative --fallback="$option_optional" -- "$item")"
			;;
		'--no-recursive'* | '--recursive'* | '--no-recurse'* | '--recurse'* | '--no-recursion'* | '--recursion'*)
			option_recursive="$(get-flag-value --affirmative --fallback="$option_recursive" -- "$item")"
			;;
		'--permissions='*) option_permissions="${item#*=}" ;;
		'--directory-permissions='*) option_directory_permissions="${item#*=}" ;;
		'--file-permissions='*) option_file_permissions="${item#*=}" ;;
		'--owner='*) option_owner="${item#*=}" ;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		if [[ $option_optional == 'yes' ]]; then
			return 0
		fi
		echo-error 'No <path>s provided.'
		return 22 # EINVAL 22 Invalid argument
	fi
	local path
	for path in "${option_paths[@]}"; do
		if [[ -z $path ]]; then
			echo-error 'Cannot claim ownership of an empty path:' $'\n' "$(echo-verbose -- "${option_paths[@]}")"
			return 22 # EINVAL 22 Invalid argument
		fi
	done

	# check for deprecation
	if [[ -n $option_directory_permissions || -n $option_file_permissions ]]; then
		help '[file|directory]-permissions are deprecated, you probably just wanted to do --permissions=X..., see https://superuser.com/a/91966/32418'
	fi

	# adjustments: permissions
	if [[ -z $option_permissions ]]; then
		option_permissions='a-xrw,ug+Xrw'
	fi

	# adjustments: admin
	if [[ $option_me == 'yes' && $option_admin == 'yes' ]]; then
		help '--me and --admin cannot both be provided'
	elif [[ $option_me == 'yes' && $option_root == 'yes' ]]; then
		help '--me and --root cannot both be provided'
	elif [[ $option_admin == 'yes' && $option_root == 'yes' ]]; then
		help '--admin and --root cannot both be provided'
	elif [[ $option_me == 'yes' ]]; then
		option_user="$(whoami)"
	elif [[ $option_admin == 'yes' ]]; then
		if is-mac; then
			option_user="$(whoami)"
			option_group='admin'
			# ^ https://superuser.com/a/20430/32418
		else
			option_user='root'
			option_group='root'
		fi
	elif [[ $option_root == 'yes' ]]; then
		# option_user='0'
		# option_group='0'
		if is-mac; then
			option_user='root'
			option_group='wheel'
		else
			option_user='root'
			option_group='root'
		fi
	fi

	# adjustments: owner
	local owner=''
	if [[ -n $option_owner ]]; then
		owner="$option_owner"
	elif [[ -n $option_user && -n $option_group ]]; then
		owner="$option_user:$option_group"
	elif [[ -n $option_user ]]; then
		owner="$option_user"
	elif [[ -n $option_group ]]; then
		owner=":$option_group"
	fi

	# adjustments: recursive
	# -f: Do not display a diagnostic message when chmod could not modify the mode for file, nor modify the exit status to reflect such (macos)
	# -f, --silent, --quiet: suppress most error messages (ubuntu)
	# -R/--recursive: self-explanatory
	# -h: If the file is a symbolic link, change the mode of the link itself rather than the file that the link points to.
	local ch_args=()
	if [[ $option_recursive == 'yes' ]]; then
		if is-mac || is-alpine; then
			ch_args+=('-R')
		else
			ch_args+=('--recursive')
		fi
	fi
	if [[ $option_optional == 'yes' ]]; then
		ch_args+=('-f')
	fi

	# adjustments: changes
	if [[ -z $option_changes ]]; then
		if [[ $option_quiet == 'yes' ]] || is-mac; then
			option_changes='no'
		else
			option_changes='yes'
		fi
	fi

	# adjustments: quiet
	if [[ -z $option_quiet ]]; then
		option_quiet='yes'
	fi

	# apply args
	if [[ $option_changes == 'yes' ]]; then
		if is-mac || is-alpine; then
			echo-style --dim='Reporting permission changes is not provided by this Operating System.' >/dev/stderr
		else
			ch_args+=('--changes')
		fi
	fi
	if [[ $option_verbose == 'yes' ]]; then
		if is-mac; then
			ch_args+=('-v')
		else
			ch_args+=('--verbose')
		fi
	fi

	# =====================================
	# Prepare

	# handle parents
	if [[ $option_parents == 'yes' ]]; then
		local parent_paths all_parent_paths=()
		for path in "${option_paths[@]}"; do
			parent_paths=()
			mapfile -t parent_paths < <(fs-parents --no-self --no-root --sudo -- "$path")
			all_parent_paths+=("${parent_paths[@]}")
		done
		fs-own --no-recursive --no-parents \
			--quiet="$option_quiet" --changes="$option_changes" \
			--me="$option_me" --admin="$option_admin" --root="$option_root" \
			--sudo="$option_sudo" --user="$option_user" --group="$option_group" \
			--optional="$option_optional" \
			--permissions="$option_permissions" \
			--directory-permissions="$option_directory_permissions" \
			--file-permissions="$option_file_permissions" \
			--owner="$option_owner" \
			--user="$option_user" \
			--group="$option_group" \
			-- "${all_parent_paths[@]}"
	fi

	# the argument handling is complex for bash v3 compat
	local sudo_as_user_args=() sudo_as_admin_args=() sudo_reason

	# prepare, don't put each path on a new line, as that can make a lot of lines!
	sudo_reason=$'Correcting permissions for the following paths requires your sudo/root/login password:\n'"$(
		echo-style --reset --code="$(echo-lines --columns -- "${option_paths[@]/"$HOME"/'~'}")"
	)"

	# sudo as the user/group
	if [[ -n $owner || $option_sudo == 'yes' ]]; then
		sudo_as_user_args+=(
			'sudo-helper'
			'--inherit'
			"--reason=$sudo_reason"
		)
		if [[ -n $option_user ]]; then
			sudo_as_user_args+=("--user=$option_user")
		fi
		if [[ -n $option_group ]]; then
			sudo_as_user_args+=("--group=$option_group")
		fi
		sudo_as_user_args+=('--')
	fi

	# sudo as the admin
	if [[ -n $owner || $option_sudo == 'yes' ]]; then
		sudo_as_admin_args+=(
			'sudo-helper'
			'--inherit'
			"--reason=$sudo_reason"
			'--'
		)
	fi

	# =====================================
	# Action

	local paths=()
	function is_available {
		local path="$1" cmd=()
		if [[ -n $owner ]]; then
			if [[ ${#sudo_as_admin_args[@]} -ne 0 ]]; then
				cmd+=("${sudo_as_admin_args[@]}")
			fi
		else
			if [[ ${#sudo_as_user_args[@]} -ne 0 ]]; then
				cmd+=("${sudo_as_user_args[@]}")
			fi
		fi
		# can't use is-present, because sudo doesn't have access, and it is too complicated to add access for it
		cmd+=(is-present.bash -- "$path")
		"${cmd[@]}" # eval
	}
	function check_exists {
		local path="$1" available_status
		eval_capture --statusvar=available_status -- is_available "$path"
		if [[ $available_status -ne 0 ]]; then
			if [[ $option_optional != 'yes' ]]; then
				echo-error 'Cannot claim ownership a path that does exist or is inaccessible:' $'\n' --code="$path"
				return 2 # ENOENT 2 No such file or directory
			fi
		fi
	}
	function do_own {
		local cmd

		# chown
		if [[ -n $owner ]]; then
			cmd=()
			if [[ ${#sudo_as_admin_args[@]} -ne 0 ]]; then
				cmd+=("${sudo_as_admin_args[@]}")
			fi
			cmd+=(chown "${ch_args[@]}" "$owner" -- "${paths[@]}")
			"${cmd[@]}" # eval
		fi

		# chmod
		if [[ -n $option_permissions ]]; then
			cmd=()
			# https://superuser.com/a/91966/32418
			if [[ ${#sudo_as_user_args[@]} -ne 0 ]]; then
				cmd+=("${sudo_as_user_args[@]}")
			fi
			# removing readable perms on a directory, while recursing, will cause permission denied failure
			cmd+=(chmod "${ch_args[@]}" "$option_permissions" -- "${paths[@]}")
			"${cmd[@]}" # eval
		fi
	}

	# determine paths
	local exists_status own_status
	for path in "${option_paths[@]}"; do
		eval_capture --statusvar=exists_status -- check_exists "$path"
		# check existence
		if [[ $exists_status -eq 0 ]]; then
			paths+=("$path") # it exists, update ownership for it
		fi
	done
	# perform the ownership
	if [[ ${#paths[@]} -ne 0 ]]; then
		eval_capture --statusvar=own_status -- do_own
		# check ownership failures
		if [[ $own_status -ne 0 && $option_optional == 'no' ]]; then
			return "$own_status"
		fi
	fi
	# check if we had missing paths
	if [[ ${#paths[@]} -ne ${#option_paths[@]} ]]; then
		if [[ $option_optional == 'yes' ]]; then
			return 0
		fi
		return 2 # ENOENT 2 No such file or directory
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		fs_own_test
	else
		fs_own "$@"
	fi
fi

# # find -exec fails when --user --group is provided as it fails to attach to correct home
# # so instead xargs needs to be used, but that fails because too many files or so
# # so instead we do a loop, but that is very slow
# # and in the end, the only time people ever need this is when they actually intend to do
# # an uppercase X permission https://superuser.com/a/91966/32418

# if [[ -n "$option_directory_permissions" ]]; then
# 	[[ "$option_quiet" = 'no' ]] && set -x || :
# 	"${sudo_as_user_args[@]}" find "$path" -type d | while read -r dir; do
# 		"${sudo_as_user_args[@]}" \
# 			chmod "${ch_args[@]}" "$option_directory_permissions" -- "$dir"
# 	done
# 	[[ "$option_quiet" = 'no' ]] && set +x || :
# fi
# if [[ -n "$option_file_permissions" ]]; then
# 	[[ "$option_quiet" = 'no' ]] && set -x || :
# 	"${sudo_as_user_args[@]}" find "$path" -type f | while read -r file; do
# 		"${sudo_as_user_args[@]}" \
# 			chmod "${ch_args[@]}" "$option_file_permissions" -- "$file"
# 	done
# 	[[ "$option_quiet" = 'no' ]] && set +x || :
# fi
