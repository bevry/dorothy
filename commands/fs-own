#!/usr/bin/env bash

function fs_own_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	local root dir subfile file
	root="$(fs-temp --directory)"
	dir="$(fs-temp --root="$root" --directory='dir' --touch)"
	subfile="$(fs-temp --root="$dir" --file='subfile' --touch)"
	file="$(fs-temp --root="$root" --file='file' --touch)"

	local flag flags=(
		--X
		--x
		--r
		--w
		--u
		--ug
		--ugx
		--permissions='a-xrw,ug+Xrw'
		# --reference="$DOROTHY" <-- on macos this is 40755 which fails when applied to files
		--me
		--admin
		--root
	)
	fs-structure -- "$root" "$dir"

	for flag in "${flags[@]}"; do
		__print_line
		eval-tester --ignore-stdout -- fs-own --changes "$flag" -- "$dir" "$file"
		eval-tester --ignore-stdout -- fs-own --quiet "$flag" -- "$dir" "$file"
		eval-tester --ignore-stdout -- fs-own --verbose "$flag" -- "$dir" "$file"
		eval-tester --ignore-stdout -- fs-own --recursive --changes "$flag" -- "$dir"
		eval-tester --ignore-stdout -- fs-own --recursive --quiet "$flag" -- "$dir"
		eval-tester --ignore-stdout -- fs-own --recursive --verbose "$flag" -- "$dir"
		fs-structure -- "$root" "$dir" || :
	done

	# @todo confirm dir and subfile, because of recursion, matched

	__print_line
	fs-structure -- "$root" || :
	eval-helper --verbose --wrap -- is-accessible.bash -- "$dir" || :
	eval-helper --verbose --wrap -- is-accessible -- "$dir" || :
	eval-helper --verbose --wrap -- stat -L -- "$dir" || :
	eval-helper --verbose --wrap --elevate -- stat -L -- "$dir" || :

	__print_line
	fs-structure -- "$dir" || :
	eval-helper --verbose --wrap -- is-accessible.bash -- "$subfile" || :
	eval-helper --verbose --wrap -- is-accessible -- "$subfile" || :
	eval-helper --verbose --wrap -- stat -L -- "$subfile" || :
	eval-helper --verbose --wrap --elevate -- stat -L -- "$subfile" || :

	echo-style --g1="TEST: $0"
	return 0
)
function fs_own() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Claim ownership of a path, by updating its permissions via chmod and chown.

			USAGE:
			fs-own [...options] [--] ...<path>

			EXAMPLE:
			fs-own --recursive --ug -- .

			OPTIONS:
			--quiet | --verbose | --changes
			    if --verbose, apply --changes if supported and use --verbose on executed chmod/chown commands.
			    if --quiet, apply --no-changes
			    if neither --verbose or --quiet then apply --changes if supported

			--X
			    sets <permissions> to be executable directories for the user: +x
			--x
			    sets <permissions> to be executable for the user: +x
			--r
			    sets <permissions> to be executable for the user: +r
			--w
			    sets <permissions> to be executable for the user: +w
			--u
			    sets <permissions> to only be available to the user: a-xrw,u+Xrw
			--ux
			    sets <permissions> to only be available and executable to the user: a-xrw,u+xrw
			--ug
			    sets <permissions> to only be available to the user and group: a-xrw,ug+Xrw
			--ugx
			    sets <permissions> to only be available and executable to the user and group: a-xrw,ug+xrw
			--permissions=<permissions>
			    sets file and directory permissions.
			--reference=<path>
			    use the <permissions> from this <path>.
			    is a cross-platform alternative to:
			    chmod --reference=<source> <target>

			--owner=<owner>
			    if provided, will set the <path> to be owned by <owner>.
			--me
			    if provided, will set <user> to yourself.
			--admin
			    if provided, will set <owner> to the platform specific admin values.
			--root
			    if provided, will set <owner> to the platform specific root values.
			--user=<user>
			    if provided, will set <owner> to this user.
			--group=<group>
			    if provided, will set <owner> to this group.

			--sudo
			    if provided, sudo will be used, automatically enabled when me/admin/root/owner/user/group is provided.

			--optional
			    if provided, ignore missing paths and failures.

			--recursive
			    if provided, will recurse into child paths.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item
	local option_paths=()
	local option_quiet=''
	local option_changes='' # os support
	local option_owner=''
	local option_user=''
	local option_group=''
	local option_parents='no'
	local option_me='no'
	local option_admin='no'
	local option_root='no'
	local option_permissions=''
	local option_directory_permissions='' # deprecated
	local option_file_permissions=''      # deprecated
	local option_reference=''
	local option_sudo='no'
	local option_optional='no'
	local option_recursive='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-changes'* | '--changes'*)
			option_changes="$(get-flag-value --affirmative --fallback="$option_changes" -- "$item")"
			;;
		'--no-parents'* | '--parents'*)
			option_parents="$(get-flag-value --affirmative --fallback="$option_parents" -- "$item")"
			;;
		'--no-me'* | '--me'*)
			option_me="$(get-flag-value --affirmative --fallback="$option_me" -- "$item")"
			;;
		'--no-admin'* | '--admin'*)
			option_admin="$(get-flag-value --affirmative --fallback="$option_admin" -- "$item")"
			;;
		'--no-root'* | '--root'*)
			option_root="$(get-flag-value --affirmative --fallback="$option_root" -- "$item")"
			;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--no-optional'* | '--optional'*)
			option_optional="$(get-flag-value --affirmative --fallback="$option_optional" -- "$item")"
			;;
		'--no-recursive'* | '--recursive'* | '--no-recurse'* | '--recurse'* | '--no-recursion'* | '--recursion'*)
			option_recursive="$(get-flag-value --affirmative --fallback="$option_recursive" -- "$item")"
			;;
		'--X')
			if [[ -n $option_permissions ]]; then
				help "$item cannot be specified with other <permissions>"
			fi
			option_permissions='+X'
			;;
		'--x')
			if [[ -n $option_permissions ]]; then
				help "$item cannot be specified with other <permissions>"
			fi
			option_permissions='+x'
			;;
		'--r')
			if [[ -n $option_permissions ]]; then
				help "$item cannot be specified with other <permissions>"
			fi
			option_permissions='+r'
			;;
		'--w')
			if [[ -n $option_permissions ]]; then
				help "$item cannot be specified with other <permissions>"
			fi
			option_permissions='+w'
			;;
		'--u')
			if [[ -n $option_permissions ]]; then
				help "$item cannot be specified with other <permissions>"
			fi
			option_permissions='a-xrw,u+Xrw'
			;;
		'--ux')
			if [[ -n $option_permissions ]]; then
				help "$item cannot be specified with other <permissions>"
			fi
			option_permissions='a-xrw,u+xrw'
			;;
		'--ug')
			if [[ -n $option_permissions ]]; then
				help "$item cannot be specified with other <permissions>"
			fi
			option_permissions='a-xrw,ug+Xrw'
			;;
		'--ugx')
			if [[ -n $option_permissions ]]; then
				help "$item cannot be specified with other <permissions>"
			fi
			option_permissions='a-xrw,ug+xrw'
			;;
		'--permissions='*) option_permissions="${item#*=}" ;;
		'--directory-permissions='*) option_directory_permissions="${item#*=}" ;;
		'--file-permissions='*) option_file_permissions="${item#*=}" ;;
		'--reference='* | '--ref='*) option_reference="${item#*=}" ;;
		'--owner='*) option_owner="${item#*=}" ;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--path='*) option_paths+=("${item#*=}") ;;
		# these have to be last and in this order, as they could match earlier options:

		'--no-u'* | '--u'*)
			option_u="$(get-flag-value --affirmative --fallback="$option_u" -- "$item")"
			;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# deprecations
	if [[ -n $option_directory_permissions || -n $option_file_permissions ]]; then
		help '[file|directory]-permissions are deprecated, you probably just wanted to do --permissions=X..., see https://superuser.com/a/91966/32418'
	fi

	# check
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		if [[ $option_optional == 'yes' ]]; then
			return 0
		fi
		echo-error 'No <path>s provided.'
		return 22 # EINVAL 22 Invalid argument
	fi
	local path
	for path in "${option_paths[@]}"; do
		if [[ -z $path ]]; then
			echo-error 'Cannot claim ownership of an empty path:' $'\n' "$(echo-verbose -- "${option_paths[@]}")"
			return 22 # EINVAL 22 Invalid argument
		fi
	done

	# adjustments: reference
	if [[ -n $option_reference ]]; then
		if [[ -n $option_permissions ]]; then
			help '<reference> and <permissions> cannot both be provided'
		fi
		if is-mac; then
			option_permissions="$(stat -f '%p' -- "$option_reference")"
		else
			# %a = 644
			# #A = -rw-r--r--
			option_permissions="$(stat --format='%a' -- "$option_reference")"
		fi
	fi

	# adjustments: admin
	if [[ $option_me == 'yes' && $option_admin == 'yes' ]]; then
		help --='--me and --admin cannot both be provided'
	elif [[ $option_me == 'yes' && $option_root == 'yes' ]]; then
		help --='--me and --root cannot both be provided'
	elif [[ $option_admin == 'yes' && $option_root == 'yes' ]]; then
		help --='--admin and --root cannot both be provided'
	elif [[ $option_me == 'yes' ]]; then
		option_user="$(whoami)"
	elif [[ $option_admin == 'yes' ]]; then
		if is-mac; then
			option_user="$(whoami)"
			option_group='admin'
			# ^ https://superuser.com/a/20430/32418
		else
			option_user='root'
			option_group='root'
		fi
	elif [[ $option_root == 'yes' ]]; then
		# option_user='0'
		# option_group='0'
		if is-mac; then
			option_user='root'
			option_group='wheel'
		else
			option_user='root'
			option_group='root'
		fi
	fi

	# adjustments: owner
	local owner=''
	if [[ -n $option_user && -n $option_group ]]; then
		owner="$option_user:$option_group"
	elif [[ -n $option_user ]]; then
		owner="$option_user"
	elif [[ -n $option_group ]]; then
		owner=":$option_group"
	fi
	if [[ -n $option_owner ]]; then
		if [[ -n $owner ]]; then
			if [[ $option_owner != "$owner" ]]; then
				help 'multiple conflicting <owner> options cannot be provided'
			fi
			# $owner = $option_owner already
		else
			# $owner is empty, and $option_owner is defined
			owner="$option_owner"
		fi
	fi

	# validate there is an action to perform
	if [[ -z $option_permissions && -z $owner ]]; then
		help '<permissions> or <owner> required, to match the functionality of prior versions, provide --ug'
	fi

	# adjustments: recursive
	# -f: Do not display a diagnostic message when chmod could not modify the mode for file, nor modify the exit status to reflect such (macos)
	# -f, --silent, --quiet: suppress most error messages (ubuntu)
	# -R/--recursive: self-explanatory
	# -h: If the file is a symbolic link, change the mode of the link itself rather than the file that the link points to.
	local ch_args=()
	if [[ $option_recursive == 'yes' ]]; then
		if is-mac || is-alpine; then
			ch_args+=('-R')
		else
			ch_args+=('--recursive')
		fi
	fi
	if [[ $option_optional == 'yes' ]]; then
		# chmod
		# macos: -f: Do not display a diagnostic message if chmod could not modify the mode for file, nor modify the exit status to reflect such failures.
		# ubuntu: -f, --silent, --quiet: suppress most error messages
		ch_args+=('-f')
	fi

	# adjustments: changes, quiet, verbose
	if [[ -z $option_changes ]]; then
		if [[ $option_quiet == 'yes' ]]; then
			option_changes='no'
		else
			# neither --quiet/--verbose, or just --verbose
			# in which case, enable changes if supported
			if is-mac || is-alpine; then
				option_changes='no'
			else
				option_changes='yes'
			fi
		fi
	elif [[ $option_changes == 'yes' ]]; then
		if is-mac || is-alpine; then
			echo-style --stderr --dim='Reporting permission changes is not provided by this Operating System.'
		else
			ch_args+=('--changes')
		fi
	fi
	if [[ $option_quiet == 'no' ]]; then
		if is-mac; then
			ch_args+=('-v')
		else
			ch_args+=('--verbose')
		fi
	fi

	# =====================================
	# Prepare

	# handle parents
	if [[ $option_parents == 'yes' ]]; then
		local parent_paths all_parent_paths=()
		for path in "${option_paths[@]}"; do
			parent_paths=()
			mapfile -t parent_paths < <(fs-parents --no-self --no-root --sudo -- "$path")
			all_parent_paths+=("${parent_paths[@]}")
		done
		fs-own --no-recursive --no-parents \
			--quiet="$option_quiet" \
			--changes="$option_changes" \
			--sudo="$option_sudo" \
			--optional="$option_optional" \
			--owner="$owner" \
			--permissions="$option_permissions" -- \
			"${all_parent_paths[@]}"
	fi

	# prepare reason, don't put each path on a new line, as that can make a lot of lines!
	local sudo_reason
	sudo_reason=$'Your password is required to momentarily grant privileges to correct permissions for the following paths:\n'"$(
		echo-style --reset --code="$(echo-lines --columns -- "${option_paths[@]/"$HOME"/'~'}")"
	)"

	# sudo as the user/group
	local sudo_as_user_args=()
	if [[ -n $owner || $option_sudo == 'yes' ]]; then
		sudo_as_user_args+=(eval-helper --elevate --inherit --reason="$sudo_reason")
		if [[ -n $option_user ]]; then
			sudo_as_user_args+=(--user="$option_user")
		fi
		if [[ -n $option_group ]]; then
			sudo_as_user_args+=(--group="$option_group")
		fi
		sudo_as_user_args+=(--)
	fi

	# sudo as the admin
	local sudo_as_admin_args=()
	if [[ -n $owner || $option_sudo == 'yes' ]]; then
		sudo_as_admin_args+=(eval-helper --elevate --inherit --reason="$sudo_reason" --)
	fi

	# only mac supports double dash on [chown] and [chmod]
	local double_dash_args=()
	if is-mac; then
		double_dash_args+=('--')
	fi

	# =====================================
	# Action

	local paths=()
	function __is_available {
		local path="$1" cmd=()
		if [[ -n $owner ]]; then
			cmd+=("${sudo_as_admin_args[@]}")
		else
			cmd+=("${sudo_as_user_args[@]}")
		fi
		# can't use is-present, because sudo doesn't have access, and it is too complicated to add access for it
		cmd+=(is-present.bash -- "$path")
		"${cmd[@]}" || return # eval
	}
	function __check_available {
		local path="$1" available_status
		__is_available "$path" || available_status=$?
		if [[ $available_status -ne 0 ]]; then
			if [[ $option_optional != 'yes' ]]; then
				echo-error 'Cannot claim ownership a path that does exist or is inaccessible:' $'\n' --code="$path" || return
				return 2 # ENOENT 2 No such file or directory
			fi
		fi
		return 0
	}
	function __own {
		# chown
		if [[ -n $owner ]]; then
			"${sudo_as_admin_args[@]}" chown "${ch_args[@]}" "$owner" "${double_dash_args[@]}" "${paths[@]}" || return # eval
		fi

		# chmod
		if [[ -n $option_permissions ]]; then
			# https://superuser.com/a/91966/32418
			# removing readable perms on a directory, while recursing, will cause permission denied failure
			"${sudo_as_user_args[@]}" chmod "${ch_args[@]}" "$option_permissions" "${double_dash_args[@]}" "${paths[@]}" || return # eval
		fi
	}

	# determine paths
	for path in "${option_paths[@]}"; do
		if __check_available "$path"; then
			paths+=("$path") # it exists, update ownership for it
		fi
	done

	# perform the ownership
	local own_status
	if [[ ${#paths[@]} -ne 0 ]]; then
		__own || own_status=$?
		# check ownership failures
		if [[ $own_status -ne 0 && $option_optional == 'no' ]]; then
			return "$own_status"
		fi
	fi

	# check if we had missing paths
	if [[ ${#paths[@]} -ne ${#option_paths[@]} ]]; then
		if [[ $option_optional == 'yes' ]]; then
			return 0
		fi
		return 2 # ENOENT 2 No such file or directory
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		fs_own_test
	else
		fs_own "$@"
	fi
fi
