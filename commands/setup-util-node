#!/usr/bin/env bash

function setup_util_node() (
	source "$DOROTHY/sources/bash.bash"

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=node; then
		return 0
	fi

	# enable EVAL_INSTALL, etc
	source "$(type -P setup-util)"

	# =====================================
	# Helpers

	function __get_nvm_versions {
		source "$DOROTHY/sources/ripgrep.bash"
		nvm-env -- nvm ls --no-colors --no-alias | rg --only-matching --regexp='v([^\s]+)' --replace='$1' || :
	}

	function __clean_nvm {
		# prepare
		local versions version
		# swap to system
		nvm-env -- nvm use system || :
		# fetch versions
		mapfile -t versions < <(__get_nvm_versions) || return
		if test "${#versions[@]}" -eq 0; then
			# already clean
			return 0
		fi
		# dependencies
		setup-util-sd --quiet || return
		# clean versions
		for version in "${versions[@]}"; do
			nvm-env -- nvm uninstall "$version" | sd 'Uninstalled node ' 'Uninstalled: ' || return
		done
		# confirm clean was successful
		mapfile -t versions < <(__get_nvm_versions) || return
		test "${#versions[@]}" -eq 0
	}

	function wipe_nvm {
		fs-rm --quiet --no-confirm -- "$NVM_DIR"
	}

	function clean_otherwise_wipe_nvm {
		# clean only what is necessary
		echo-segment --h3='Clean Node.js versions and packages'
		if __clean_nvm; then
			echo-segment --g3='Clean Node.js versions and packages'
		else
			# nvm buggered, clean it all
			echo-segment --e3='Clean Node.js versions and packages'
			echo-segment --h3='Clean Node.js Version Manager (NVM) instead'
			wipe_nvm
			echo-segment --g3='Clean Node.js Version Manager (NVM) instead'
		fi
	}

	function install_nvm {
		if test -d "$NVM_DIR"; then
			cd "$NVM_DIR"
		else
			mkdir -p "$NVM_DIR"
			cd "$NVM_DIR"
			git init
			git remote add origin 'https://github.com/nvm-sh/nvm.git'
		fi
		# ensure git remote is usable
		git-helper protocol-update origin https
		# fetch tags
		git fetch --tags origin
		# checkout latest stable tag
		git checkout "$(git describe --abbrev=0 --tags --match "v[0-9]*" "$(git rev-list --tags --max-count=1)")"
	}

	function install_nvm_node {
		# install
		nvm-env -- nvm install --no-progress node  # latest active
		nvm-env -- nvm install --no-progress --lts # latest LTS

		# set default node version
		if is-brew; then
			nvm-env -- nvm alias default system
		else
			# use latest lts
			nvm-env -- nvm alias default stable
			# use current lts: "$(nvm version-remote --lts)"
		fi
	}

	function setup_system_node {
		setup-util --name='Node.js via System' --cli=node "$@" \
			APK='nodejs' APK='npm' \
			APT_KEY='https://deb.nodesource.com/gpgkey/nodesource.gpg.key' \
			APT_REPO='deb [arch={ARCH} signed-by={KEY}] https://deb.nodesource.com/node_20.x {RELEASE} main' \
			APT='nodejs' \
			AUR='nodejs' AUR='npm' \
			BREW='node' \
			BSD='nodejs' \
			CHOCO='nodejs.install' \
			EMERGE='nodejs' \
			EOPKG='nodejs' \
			RPM='nodejs' \
			SCOOP='nodejs' \
			SNAP='node --classic' \
			WINGET='OpenJS.NodeJS' \
			XBPS='nodejs' \
			ZYPPER='nodejs' # SUSE
	}

	function upgrade_system_or_nvm_npm {
		# ensure the cache is configured correctly
		# to avoid when say a /Users/... cache config is copied to a Linux machine
		local cache_dir
		cache_dir="$(nvm-env -- npm config get cache || :)"
		if test -n "$cache_dir" -a ! -d "$cache_dir"; then
			# try and make it
			mkdir -p "$cache_dir" || {
				echo-style --notice='Unconfiguring the invalid cache directory:' ' ' --code="$cache_dir"
				nvm-env -- npm config delete cache
			}
		fi

		# continue with the upgrade
		echo-style --dim="Before: v$(nvm-env -- npm --version)"
		setup-util --name='npm' --upgrade --force --quiet \
			NPM='npm' || echo-style --notice='You can ignore the npm ugprade failure, this will resolve after nvm is used.'
		nvm-env -- npm cache clean --force 2>/dev/null # silent --force warning
		print_line "After:  v$(nvm-env -- npm --version)"
	}

	# =====================================
	# Actions

	function node_install {
		# =====================================
		# Install Node via System

		# https://nodejs.org/en/download/package-manager/
		# @todo https://github.com/nodejs/unofficial-builds for riscv, but provides tars that include multiple directories
		echo-segment --h2='Install Node.js via System'
		setup_system_node --install --force --quiet
		print_line "Installed: $(node --version)"
		echo-segment --g2='Install Node.js via System'

		# =====================================
		# Clean NVM

		# clean NVM unless configured otherwise
		# the intent of this is to purge unused global Node.js versions and packages
		# we use a configuration variable to change this, as interuppting the flow and asking the user creates too much confusion
		# as such a question is only necessary to experienced users
		if test -d "$NVM_DIR"; then
			clean_otherwise_wipe_nvm
		fi

		# =====================================
		# Install NVM and Node via NVM

		# (arm) alpine does not support nvm, fails with:
		# > mode no such file or directory
		if ! is-alpine; then
			# install nvm
			echo-segment --h2='Install Node.js Version Manager (NVM)'
			echo-style --dim "NVM_DIR=$NVM_DIR"
			eval_helper --quiet --no-wrap \
				-- install_nvm
			echo-segment --g2='Install Node.js Version Manager (NVM)'

			# nvm node
			echo-segment --h2='Install Node.js via NVM'
			echo-style --dim='Installs active and LTS versions.'
			eval_helper --quiet --no-wrap \
				-- install_nvm_node
			mapfile -t versions < <(__get_nvm_versions)
			for version in "${versions[@]}"; do
				print_line "Installed: v$version"
			done
			echo-segment --g2='Install Node.js via NVM'
		fi

		# =====================================
		# Upgrade npm

		echo-segment --h3='Upgrade npm'
		upgrade_system_or_nvm_npm
		echo-segment --g3='Upgrade npm'
	}
	function node_upgrade {
		install_node
	}
	function node_uninstall {
		setup_system_node --uninstall
		wipe_nvm
	}

	# setup
	local options=(
		--cli='node'
		"$@"
		EVAL_INSTALL='node_install'
		EVAL_UPGRADE='node_upgrade'
		EVAL_UNINSTALL='node_uninstall'
	)
	setup_util "${options[@]}"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_node "$@"
fi
