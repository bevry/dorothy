#!/usr/bin/env bash

function unziptar_() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Extract the files from a zip/tar/dmg/etc file.

			USAGE:
			unziptar <archive-file> [...options]

			OPTIONS:
			--prune
			    If enabled, delete the archive after extraction.

			--format=<format>
			    Enforce <format> as the extraction format.
			    If omitted, or 'auto', auto-dection will be attempted.

			--glob=<glob>
			    Only extract files that match the glob pattern <glob>.
			    If omitted, all files will be extracted.

			--directory=<directory>
			    Place extracted files inside <path>.
			    If ommitted, the current working directory will be used.

			--file=<file>
			    If only a single file was extracted, rename it to <file>.
			    If multiple files were extracted, then fail.

			--filepath=<directory>/<file>
			    If only a single file was extracted, rename it to <file>, and place it inside <directory>.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process, @todo rewrite with option_ prefix
	local item archive='' format='' glob='' directory='' file='' filepath='' prune='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--format='*) format="${item#*=}" ;;
		'--glob='* | '--filter='*) glob="${item#*=}" ;;
		'--directory='*) directory="${item#*=}" ;;
		'--file='*) file="${item#*=}" ;;
		'--filepath='*) filepath="${item#*=}" ;;
		'--no-prune'* | '--prune'*)
			prune="$(get-flag-value --affirmative --fallback="$prune" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$archive"; then
				archive="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# ensure directory, filename, path
	if test -n "$filepath"; then
		# filepath is a directory + file combination
		filepath="$(fs-absolute -- "$filepath")"
		directory="$(dirname "$filepath")"
		file="$(basename "$filepath")"
	elif test -n "$directory" -a -n "$file"; then
		# directory + file
		filepath="$(fs-absolute -- "$directory/$file")"
		directory="$(dirname "$filepath")"
		file="$(basename "$filepath")"
	elif test -z "$directory" -a -n "$file"; then
		# file, without directory
		filepath="$(pwd)/$file"
		directory="$(dirname "$filepath")"
		file="$(basename "$filepath")"
	elif test -n "$directory" -a -z "$file"; then
		# directory, without file
		directory="$(fs-absolute -- "$directory")"
		filepath='' # it is for dir+file combos only
	else
		directory="$(pwd)"
		filepath='' # it is for dir+file combos only
	fi
	mkdir -p "$directory"

	# ensure archive exists
	if test -z "$archive"; then
		help "No <archive-file> was provided."
	elif is-missing -- "$archive"; then
		help "The <archive-file> does not exist: " --code="$archive"
	fi

	# ensure archive are absolute
	archive="$(fs-absolute -- "$archive")"

	# ensure format
	if test -z "$format" -o "$format" = 'auto'; then
		if [[ $archive == *".dmg" ]]; then
			format='dmg'
		elif [[ $archive == *".zip" ]]; then
			format='zip'
		else
			format='tar'
		fi
	fi

	# ensure glob
	if test -z "$glob"; then
		glob='*'
	fi

	# =====================================
	# Action

	# extract into temporary/random directory
	local archive_directory
	archive_directory="$(fs-temp --directory='unziptar' --directory)"
	mkdir -p "$archive_directory"

	# enter the temporary directory
	cd "$archive_directory"

	# unzip to that temporary directory
	local dmg_device=''
	function relocate {
		mv -fv "$@"
	}
	function dmg_unmount {
		# unmount the DMG device if it exists
		if test -n "$dmg_device"; then
			hdiutil detach "$dmg_device"
			dmg_device=''
		fi
	}
	if test "$format" = 'dmg'; then
		if test "$0" != "${BASH_SOURCE[0]}"; then
			help 'Must be run as a command, not a function, such that DMG cleanup always occurs, even on failures.'
		fi
		trap dmg_unmount EXIT
		# install what is necessary for identifying the DMG volume
		setup-util-ripgrep --quiet
		# attach the DMG to a volume
		dmg_device="$(hdiutil attach -readonly -nobrowse -mountroot "$archive_directory" "$archive" | echo-wait | rg --max-count=1 --only-matching --regexp='(/dev/.+?)\s' --replace='$1')"
		function relocate {
			cp -Rfv "$@"
		}
	elif test "$format" = 'zip'; then
		# be cautious with unziptar dependency, as is challenging on fresh macos
		if command-missing unzip; then
			setup-util-unziptar --quiet
		fi
		unzip -u "$archive" 2>/dev/null || {
			setup-util-unziptar --quiet
			unzip -u "$archive" || {
				echo-error 'Failed to extract the archive:' $'\n' "Archive: $(file "$archive")"
				return 1
			}
		}
	elif test "$format" = 'tar'; then
		# be cautious with unziptar dependency, as is challenging on fresh macos
		if command-missing tar; then
			setup-util-unziptar --quiet
		fi
		# don't use -z flag, as that enforces gzip (tar.xy) which is not valid for (.tar.xz)
		# without -z, auto-detection is used
		tar -xvf "$archive" 2>/dev/null || {
			setup-util-unziptar --quiet
			tar -xvf "$archive" || {
				echo-error 'Failed to extract the archive:' $'\n' "Archive: $(file "$archive")"
				return 1
			}
		}
	else
		help "Unrecognised format: $format"
	fi

	# match extracted paths against glob
	local glob_paths=() glob_path
	mapfile -t glob_paths < <(
		expand-path -- "$archive_directory/$glob"
	)

	# relocate extracted files
	function log_extraction_failure {
		{
			echo-error "$1"
			echo-style --bold='Archive:' ' ' "$(file "$archive")"
			echo-style --bold='Glob:' ' ' "$glob"
			echo-style --bold='File:' ' ' "$file"
			echo-style --bold='Expansion:' ' ' "$archive_directory/$glob"
			echo-style --bold='-- matched paths --'
			echo-verbose -- "${glob_paths[@]}"
			echo-style --bold='-- available paths --'
			setup-util-tree --quiet
			tree "$archive_directory"
		} >/dev/stderr
	}
	if test "${#glob_paths[@]}" -eq 0; then
		log_extraction_failure 'No extracted files matched the glob:'
		return 1
	elif test "${#glob_paths[@]}" -eq 1; then
		# relocate the single path
		for glob_path in "${glob_paths[@]}"; do
			if test -n "$file"; then
				if test -d "$glob_path" -a -d "$directory/$file"; then
					# the path is a directory, and its destination exists
					# as the path is intended to be a file, this means we want to behave as a file, which is to replace the directory, not to place the directory inside the directory
					# e.g. OBS.app should not go to /Applications/OBS.app/OBS.app if /Applications/OBS.app already existed
					fs-rm --quiet --no-confirm -- "$directory/${file:?}"
				fi
				relocate "$glob_path" "$directory/$file"
			else
				relocate "$glob_path" "$directory"
			fi
		done
	else
		# was only one intended?
		if test -n "$file"; then
			log_extraction_failure 'Too many extracted files matched the glob:'
			return 1
		fi
		# relocate multiple files
		for glob_path in "${glob_paths[@]}"; do
			relocate "$glob_path" "$directory"
		done
	fi

	# exit the temporary directory then remove it
	cd "$HOME"
	dmg_unmount
	fs-rm --quiet --no-confirm -- "$archive_directory"

	# prune archive if desired
	if test "$prune" = 'yes'; then
		fs-rm --quiet --no-confirm -- "$archive"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	unziptar_ "$@"
fi
