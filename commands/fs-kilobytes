#!/usr/bin/env bash

function fs_kilobytes_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	eval-tester --name='ok using arguments' --ignore-stdout \
		-- fs-kilobytes -- "$DOROTHY/commands/fs-bytes"

	echo-style --g1="TEST: $0"
	return 0
)
function fs_kilobytes() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the size of a path in kilobytes.

			USAGE:
			fs-kilobytes [--] ...<path>
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# options
	local item option_paths=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if test "${#option_paths[@]}" -eq 0; then
		help 'No <path>s provided.'
	fi

	# =====================================
	# Dependencies

	setup-util-dust --quiet

	# =====================================
	# Action

	# get apparent size in bytes
	local path
	for path in "${option_paths[@]}"; do
		# trunk-ignore(shellcheck/SC2016)
		dust -sbcP -ok -d0 "$path" | echo-regexp -fo '^(\d+)K' '$1'
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		fs_kilobytes_test
	else
		fs_kilobytes "$@"
	fi
fi
