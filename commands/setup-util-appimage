#!/usr/bin/env bash

# https://github.com/probonopd/go-appimage/releases
# appimaged-715-aarch64.AppImage
# appimaged-715-armhf.AppImage
# appimaged-715-i686.AppImage
# appimaged-715-x86_64.AppImage
# appimagetool-715-aarch64.AppImage
# appimagetool-715-armhf.AppImage
# appimagetool-715-i686.AppImage
# appimagetool-715-x86_64.AppImage
# mkappimage-715-aarch64.AppImage
# mkappimage-715-armhf.AppImage
# mkappimage-715-i686.AppImage
# mkappimage-715-x86_64.AppImage

function setup_util_appimage() (
	source "$DOROTHY/sources/bash.bash"

	# checks
	if ! is-linux; then
		echo-style --notice="[$0] is only intended to be run on Linux systems, skipping." >/dev/stderr
		return 0
	fi

	# appimage is split into 3 different binaries
	local arch bin options=() tools=(
		'appimaged'
		'appimagetool'
		'mkappimage'
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='probonopd/go-appimage' \
			--tag='continuous' \
			--asset-regexp="$1" | echo-first-line || : # don't escape, we actually use a regex
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
		)
	}
	arch="$(get-arch)"
	for bin in "${tools[@]}"; do
		# improve performance
		if setup-util "$@" --check --cli="$bin"; then
			return 0
		fi

		# setup
		options=(
			--cli="$bin"
			"$@"
		)
		if test "$arch" = 'a64'; then
			add_download_option "^$bin-.*?-aarch64.AppImage$"
		elif test "$arch" = 'a32'; then
			add_download_option "^$bin-.*?-armhf.AppImage$"
		elif test "$arch" = 'x64'; then
			add_download_option "^$bin-.*?-x86_64.AppImage$"
		elif test "$arch" = 'x32'; then
			add_download_option "^$bin-.*?-i686.AppImage$"
		fi
		setup-util "${options[@]}"
	done
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_appimage "$@"
fi
