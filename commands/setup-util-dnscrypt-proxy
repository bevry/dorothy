#!/usr/bin/env bash

# https://github.com/DNSCrypt/dnscrypt-proxy/releases
# dnscrypt-proxy-android_arm-2.1.5.zip
# dnscrypt-proxy-android_arm64-2.1.5.zip
# dnscrypt-proxy-android_i386-2.1.5.zip
# dnscrypt-proxy-android_x86_64-2.1.5.zip
# dnscrypt-proxy-dragonflybsd_amd64-2.1.5.tar.gz
# dnscrypt-proxy-freebsd_amd64-2.1.5.tar.gz
# dnscrypt-proxy-freebsd_arm-2.1.5.tar.gz
# dnscrypt-proxy-freebsd_i386-2.1.5.tar.gz
# dnscrypt-proxy-linux_arm-2.1.5.tar.gz
# dnscrypt-proxy-linux_arm64-2.1.5.tar.gz
# dnscrypt-proxy-linux_i386-2.1.5.tar.gz
# dnscrypt-proxy-linux_mips-2.1.5.tar.gz
# dnscrypt-proxy-linux_mips64-2.1.5.tar.gz
# dnscrypt-proxy-linux_mips64le-2.1.5.tar.gz
# dnscrypt-proxy-linux_mipsle-2.1.5.tar.gz
# dnscrypt-proxy-linux_riscv64-2.1.5.tar.gz
# dnscrypt-proxy-linux_x86_64-2.1.5.tar.gz
# dnscrypt-proxy-macos_arm64-2.1.5.zip
# dnscrypt-proxy-macos_x86_64-2.1.5.zip
# dnscrypt-proxy-netbsd_amd64-2.1.5.tar.gz
# dnscrypt-proxy-netbsd_i386-2.1.5.tar.gz
# dnscrypt-proxy-openbsd_amd64-2.1.5.tar.gz
# dnscrypt-proxy-openbsd_i386-2.1.5.tar.gz
# dnscrypt-proxy-solaris_amd64-2.1.5.tar.gz
# dnscrypt-proxy-win32-2.1.5.zip
# dnscrypt-proxy-win64-2.1.5.zip

function setup_util_dnscrypt_proxy() (
	source "$DOROTHY/sources/bash.bash"

	local arch dnscrypt_installer=''
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			dnscrypt_installer='dnscrypt-proxy-macos_arm64' # ... .zip
		elif test "$arch" = 'x64'; then
			dnscrypt_installer='dnscrypt-proxy-macos_x86_64' # ... .zip
		fi
	elif is-linux; then
		if test "$arch" = 'a64'; then
			dnscrypt_installer='dnscrypt-proxy-linux_arm64' # ... .tar.gz
		elif test "$arch" = 'x64'; then
			dnscrypt_installer='dnscrypt-proxy-linux_x86_64' # ... .tar.gz
		elif test "$arch" = 'x32'; then
			dnscrypt_installer='dnscrypt-proxy-linux_i386' # ... .tar.gz
		fi
	fi

	# =====================================
	# DNS Service: Custom: DNSCrypt Proxy
	# https://github.com/DNSCrypt/dnscrypt-proxy/wiki/Installation-linux

	local dnscrypt_title='DNSCrypt Proxy'
	local dnscrypt_id='dnscrypt-proxy'
	local dnscrypt_brew_id="$dnscrypt_id"
	local dnscrypt_bin_file="${BIN_DIR}/$dnscrypt_id"
	local dnscrypt_conf_dir="${CONF_DIR}/$dnscrypt_id"
	local dnscrypt_conf_file="$dnscrypt_conf_dir/$dnscrypt_id.toml"
	local dnscrypt_bin_cmd=(
		"$dnscrypt_bin_file"
		'-config' "$dnscrypt_conf_file"
	)
	local dnscrypt_service_id dnscrypt_service_file
	if is-mac; then
		# launchctl
		dnscrypt_service_id="$dnscrypt_id" # @todo assumed
		dnscrypt_service_file="$SERVICE_DIR/$dnscrypt_service_id.plist"
	else
		# systemctl
		dnscrypt_service_id="$dnscrypt_id"
		dnscrypt_service_file="$SERVICE_DIR/$dnscrypt_service_id.service"
	fi
	function __dnscrypt_exists {
		test -x "$dnscrypt_bin_file"
	}
	function dnscrypt_install {
		local action action_title temp_bin_file
		action='install'
		if __dnscrypt_exists; then
			action='upgrade'
		fi
		action_title="$(__uppercase_first_letter "$action")"

		# check
		if test -z "$dnscrypt_installer"; then
			die_incompatible_service "$dnscrypt_title"
		fi

		# prepare and log
		echo-style --h1="$action_title $dnscrypt_title"

		# download the upgrade, prior to disabling
		temp_bin_file="$(
			fs-temp \
				--directory='setup-dns' \
				--file='dnscrypt-proxy'
		)"
		github-download \
			--slug='DNSCrypt/dnscrypt-proxy' \
			--latest \
			--asset-regexp="$dnscrypt_installer" \
			--archive-glob='**/dnscrypt-proxy' \
			--filepath="$temp_bin_file"

		# don't use brew for this, as we want complete control
		if is-brew; then
			brew uninstall "$dnscrypt_brew_id" &>/dev/null || :
		fi
		check_installation "$dnscrypt_id" "$dnscrypt_bin_file"

		# ensure directories
		sudo-helper -- mkdir -p "$dnscrypt_conf_dir"

		# if downloaded, stop and install
		if test -f "$temp_bin_file"; then
			if test -x "$dnscrypt_bin_file"; then
				# only tell prior cmd to stop if the prior cmd exists
				sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service stop || :
			fi
			sudo-helper -- mv "$temp_bin_file" "$dnscrypt_bin_file" || :
			sudo-helper -- chmod +x "$dnscrypt_bin_file" || :
			# ^ allow failure,s as we will check this later
		fi

		# download the configuration if it doesn't exist
		# https://github.com/DNSCrypt/dnscrypt-proxy/blob/master/dnscrypt-proxy/example-dnscrypt-proxy.toml
		if test ! -f "$dnscrypt_conf_file"; then
			temp_conf_file="$(
				fs-temp \
					--directory='setup-dns' \
					--file='dnscrypt-proxy.toml'
			)"
			github-download \
				--slug='DNSCrypt/dnscrypt-proxy' \
				--head \
				--pathname='dnscrypt-proxy/example-dnscrypt-proxy.toml' \
				--filepath="$temp_conf_file"
			sudo-helper -- mv "$temp_conf_file" "$dnscrypt_conf_file"
		fi

		# confirm success
		if test -x "$dnscrypt_bin_file"; then
			echo-style --g1="$action_title $dnscrypt_title"
		else
			echo-style --error="Unable to make executable: $dnscrypt_bin_file" >/dev/stderr
			echo-style --e1="$action_title $dnscrypt_title"
			return 1
		fi
	}
	function dnscrypt_uninstall {
		# check
		if ! __dnscrypt_exists; then
			return 0
		fi

		# log
		echo-style --h1="Uninstall $dnscrypt_title"

		# stop and uninstall the service
		sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service stop || :
		sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service uninstall || :

		# ensure adguard home has stopped
		killall "$dnscrypt_id" || :

		# clean it all up
		do_remove --reload --service="$dnscrypt_id" -- "$dnscrypt_bin_file" "$dnscrypt_conf_dir" "$dnscrypt_service_file"

		# log
		echo-style --g1="Uninstall $dnscrypt_title"
	}
	function dnscrypt_configure {
		local action action_title temp_conf_file dnscrypt_options
		action="$1" # enable/disable
		action_title="$(__uppercase_first_letter "$action")"

		# check
		if ! __dnscrypt_exists; then
			return 0
		fi

		# log
		echo-style --h1="Configure and $action_title $dnscrypt_title"

		# if the configuration doesn't exist
		if test ! -f "$dnscrypt_conf_file"; then
			# then give up, as the internet is disabled in this mode
			# as we deactivated the prior service
			echo-style --error="Missing configuration file: $dnscrypt_conf_file" >/dev/stderr
			echo-style --warning='You should attempt reinstallation then try again.' >/dev/stderr
			echo-style --e1="Configure and $action_title $dnscrypt_title"
		fi

		# if [dnscrypt_names] is empty, get the user to decide
		# but only go through the trouble if we are actually intending
		# to use dns-crypt
		if test "${#dnscrypt_names[@]}" -eq 0 -a "$action" = 'enable'; then
			mapfile -t dnscrypt_options < <(
				# trunk-ignore(shellcheck/SC2016)
				fetch 'https://download.dnscrypt.info/resolvers-list/v2/public-resolvers.md' | echo-regexp -ongm --regexp='^## (.+)$' --replace='$1'
			)
			mapfile -t dnscrypt_names < <(
				choose --required --multi --question="Which DNSCrypt Server names do you wish to use?" --
				"${dnscrypt_options[@]}"
			)
		fi

		# stop before config update
		sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service stop || :
		sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service disable || :

		# update the configuration with the new [dnscrypt_names], if any
		if test "${#dnscrypt_names[@]}" -ne 0; then
			sudo-helper --inherit \
				-- config-helper --file="$dnscrypt_conf_file" -- \
				--field='ipv4_servers' --no-quote --value='true' \
				--field='ipv6_servers' --no-quote --value='true' \
				--field='dnscrypt_servers' --no-quote --value='true' \
				--field='doh_servers' --no-quote --value='true' \
				--field='server_names' --no-quote --value="[$(
					echo-join ', ' -- "${dnscrypt_names[@]@Q}"
				)]"
			sudo-helper -- "${dnscrypt_bin_cmd[@]}" --check -config "$dnscrypt_conf_file"
		fi

		# enable or disable
		if test "$action" = 'enable'; then
			sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service install || :
			sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service enable || :
			sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service start || :
		else
			sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service stop || :
			sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service disable || :
			sudo-helper -- "${dnscrypt_bin_cmd[@]}" --service uninstall || :
		fi

		# log
		echo-style --g1="Configure and $action_title $dnscrypt_title"
	}
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_dnscrypt_proxy "$@"
fi
