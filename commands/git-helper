#!/usr/bin/env bash

function git_helper() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Helpers for working with git repositories.

			USAGE:
			git-helper [...options] <action> [--] [...args]

			OPTIONS:
			--path=<path>
			    Instead of the current working directory, use this path as the git repository.

			ACTIONS:
			authors
			    Output all authors (contributors) within this git repository.

			author-update [old-email] [new-email] [new-name]
			    Update an author's name and email.

			current-branch
			    Output the current branch of this repository, including support for HEAD.

			default-branch
			    Output the default branch for this repository.

			first-commit | first-commit-entry
			    Output the first commit entry of this repository.

			first-commit-hash
			    Output the first commit hash of this repository.

			first-commit-url
			    Output the first commit url of this repository.

			github-slug
			    Output the github slug for this repository.

			is-shallow
			    Is the repository a shallow clone?

			protocol-update <remote> [<protocol>]
			    Set the <remote> to use the <protocol>.
			    If no <protocol> is specified, the preferred protocol will be selected.

			protocol-format <url> [<protocol>]
			    Format the <url> to the specified <protocol>.
			    If no <protocol> is specified, the preferred protocol will be selected.

			review
			    Open the git repositorty in your desired git reviewer, supported:
			    Gitfox.app/gf
			    Tower.app/tower

			unstage [...<file>]
			    Unstage all staged changes, without deleting or removing anything.

			update [<path>] [<remote>]
			    Update the git repository inside <path>.
			    Outputs to stdout either:
			        failure    exit code 1
			        current    exit code 0
			        updated    exit code 0

			wipe
			    Wipe the current working directory to the state of the last commit.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_path='' option_args=()
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--path='*) option_path="${item#*=}" ;;
		'--')
			option_args+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$action"; then
				action="$item"
			else
				option_args+=("$item" "$@")
				shift "$#"
				break
			fi
			;;
		esac
	done

	# ensure path, and verify
	if test -z "$option_path"; then
		option_path="$(pwd)"
	elif test ! -d "$option_path"; then
		echo-error "$0: No directory at $option_path"
		return 1
	fi

	# check
	if test -z "$action"; then
		help "No <action> was provided."
	fi

	# =====================================
	# Dependencies

	setup-util-sd --quiet

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# git.bash provides:
	local GIT_DEFAULT_BRANCH='main'
	local GIT_PROTOCOL='' # 'https', or 'ssh'
	load_dorothy_config 'git.bash'

	# ensure
	if test -z "$GIT_DEFAULT_BRANCH"; then
		# try local first, then global
		GIT_DEFAULT_BRANCH="$(
			git config --local init.defaultBranch || git config --global init.defaultBranch || :
		)"
	fi

	# =====================================
	# Adjustments

	# enter path for the remainder of this command's subshell
	# so that git commands work correctly
	cd "$option_path"

	# seed protocols, must be done here, as subshells prevent sharing later
	local protocols=()
	if test "${#protocols[@]}" -eq 0; then
		if ssh-helper test &>/dev/null; then
			protocols+=('ssh')
		fi
		protocols+=('https')
	fi

	# =====================================
	# Helpers

	function get_protocol {
		local protocol="${1:-"$GIT_PROTOCOL"}"
		if test -n "$protocol"; then
			print_line "$protocol"
		else
			choose-option \
				--question='Which git protocol to use?' \
				--filter="$protocol" -- "${protocols[@]}"
		fi
	}
	function get_remote {
		local remote="${1-}" question="${2:-"Which remote to use?"}" remotes
		if test -n "$remote"; then
			print_line "$remote"
		else
			mapfile -t remotes < <(git remote)
			choose-option --required \
				--question="$question" \
				-- "${remotes[@]}"
		fi
	}
	function __test_remote {
		local remote="$1"
		git fetch "$remote"
	}
	function get_remote_url {
		local remote="$1"
		git remote get-url "$remote"
	}
	function set_remote_url {
		local remote="$1" url="$2" applied_url
		git remote remove "$remote"
		git remote add "$remote" "$url"

		# ensure it changed, as git rules may have prevented it
		applied_url="$(get_remote_url "$remote")"
		if test "$applied_url" != "$url"; then
			# it did not change, failure condition

			# output details
			cat <<-EOF
				Failed to update the remote [$remote]:
				Applied:    $url
				Received:   $applied_url
			EOF

			# and check to see if it was git config rewrite rules to blame
			local global_lines='' local_lines=''
			global_lines="$(git config --global --list | grep --fixed-strings --regexp='.insteadof=')"
			if test -n "$global_lines"; then
				cat <<-EOF

					you have replacement rules in your global git config, remove them if you want this to work:
					$global_lines
				EOF
			fi
			local_lines="$(git config --list | grep --fixed-strings --regexp='.insteadof=')"
			if test -n "$local_lines"; then
				cat <<-EOF

					you have replacement rules in your local git config, remove them if you want this to work:
					$local_lines
				EOF
			fi
			if test -n "$local_lines" -o -n "$local_lines"; then
				cat <<-EOF

					try run the following and try again:
				EOF
				# trunk-ignore(shellcheck/SC2016)
				print_line "$local_lines" | sd '^(.+)=.*$' 'git config --global --unset $1'
				# trunk-ignore(shellcheck/SC2016)
				print_line "$local_lines" | sd '^(.+)=.*$' 'git config --unset $1'
			fi

			# nore the failure
			return 1
		fi
	}
	function __does_remote_branch_exist {
		git rev-parse --verify --quiet "$1" &>/dev/null
	}
	function __does_local_branch_exist {
		test -n "$(git branch --list "$1")"
	}

	# =====================================
	# Action

	function get_authors {
		git shortlog --summary --email | cut -f2-
	}

	function get_github_slug {
		# dependencies
		source "$DOROTHY/sources/ripgrep.bash"

		# process
		git remote -v | echo-first-line | rg --regexp='.+?github[.]com[:/](.+?)[.]git.+' --replace='$1'
	}

	function get_first_commit_entry {
		git log --reverse --oneline | echo-first-line || : # || : to avoid exit code 141
	}

	function get_first_commit_hash {
		# dependencies
		source "$DOROTHY/sources/ripgrep.bash"

		# process
		get_first_commit_entry | rg --regexp='(.+?) .+' --replace='$1'
	}

	function get_first_commit_url {
		local hash slug
		hash="$(get_first_commit_hash)"
		slug="$(get_github_slug)"
		print_line "https://github.com/$slug/commit/$hash"
	}

	function author_update {
		# dependencies
		source "$DOROTHY/sources/ripgrep.bash"

		# process
		local item old_email='' new_email='' new_name=''
		while test "$#" -ne 0; do
			item="$1"
			shift
			case "$item" in
			'--help' | '-h') help ;;
			'--'*) help "An unrecognised flag was provided: $item" ;;
			*)
				if test -z "$old_email"; then
					old_email="$item"
				elif test -z "$new_email"; then
					new_email="$item"
				elif test -z "$new_name"; then
					new_name="$item"
				else
					help "An unrecognised argument was provided: $item"
				fi
				;;
			esac
		done

		# =====================================
		# Adjustments

		local emails
		mapfile -t emails < <(git shortlog --summary --email | rg --only-matching --regexp='<(.+?)>' --replace='$1')

		old_email="$(
			choose-option --required \
				--question="Which email to update?" \
				--filter="$old_email" \
				-- "${emails[@]}"
		)"
		new_email="$(
			ask --required \
				--question="What is the new email?" \
				--default="$new_email"
		)"
		new_name="$(
			ask --required \
				--question="What is the new name?" \
				--default="$new_name"
		)"

		# =====================================
		# Act

		fs-rm --quiet --no-confirm -- ./.git/refs/original

		git filter-branch --env-filter "
			OLD_EMAIL=\"$old_email\"
			CORRECT_EMAIL=\"$new_email\"
			CORRECT_NAME=\"$new_name\"
			if [ \"\$GIT_COMMITTER_EMAIL\" = \"\$OLD_EMAIL\" ]; then
				export GIT_COMMITTER_NAME=\"\$CORRECT_NAME\"
				export GIT_COMMITTER_EMAIL=\"\$CORRECT_EMAIL\"
			fi
			if [ \"\$GIT_AUTHOR_EMAIL\" = \"\$OLD_EMAIL\" ]; then
				export GIT_AUTHOR_NAME=\"\$CORRECT_NAME\"
				export GIT_AUTHOR_EMAIL=\"\$CORRECT_EMAIL\"
			fi
		" --tag-name-filter cat -- --branches --tags
	}

	function get_current_branch {
		git rev-parse --abbrev-ref HEAD 2>/dev/null || :
	}

	function get_default_branch {
		# remote
		if test -n "$GIT_DEFAULT_BRANCH" && __does_remote_branch_exist "$GIT_DEFAULT_BRANCH"; then
			print_line "$GIT_DEFAULT_BRANCH"
			return 0
		elif __does_remote_branch_exist main; then
			echo main
			return 0
		elif __does_remote_branch_exist master; then
			echo master
			return 0
		fi

		# local
		if test -n "$GIT_DEFAULT_BRANCH" && __does_local_branch_exist "$GIT_DEFAULT_BRANCH"; then
			print_line "$GIT_DEFAULT_BRANCH"
			return 0
		elif __does_local_branch_exist main; then
			echo main
			return 0
		elif __does_local_branch_exist master; then
			echo master
			return 0
		fi

		# no branches?
		if test -z "$(git branch -a)"; then
			# use default
			if test -n "$GIT_DEFAULT_BRANCH"; then
				git checkout -b "$GIT_DEFAULT_BRANCH" &>/dev/null
				print_line "$GIT_DEFAULT_BRANCH"
				return 0
			else
				cat <<-EOF >/dev/stderr
					No branches exist locally or remotely and [GIT_DEFAULT_BRANCH] is not specified, so no default branch was created.

					Inside your [git.bash] configuration file, set [GIT_DEFAULT_BRANCH] to your desired default branch, then try again.
				EOF
				return 1
			fi
		else
			cat <<-EOF >/dev/stderr
				No default branch exists within the available branches:
				$(git branch -a)

				If one of these is a default branch, then
				inside your [git.bash] configuration file, set [GIT_DEFAULT_BRANCH] to the default branch, then try again.

				Currently, [GIT_DEFAULT_BRANCH] = [$GIT_DEFAULT_BRANCH]
			EOF
			return 1
		fi
	}

	function is_shallow_clone {
		test "$(git rev-parse --is-shallow-repository || :)" != 'false'
	}

	function update_protocol {
		local remote="${1-}" protocol="${2-}"
		remote="$(get_remote "$remote" "Which remote to configure?")"
		protocol="$(get_protocol "$protocol")"

		# process
		local original_url https_url ssh_url proposed_url=''
		original_url="$(get_remote_url "$remote")"
		https_url="$(format_protocol "$original_url" https)"
		ssh_url="$(format_protocol "$original_url" ssh)"
		proposed_url="$(format_protocol "$original_url" "$protocol")"

		# log
		cat <<-EOF
			Git Repository:     $(pwd)
			Remote:             $remote
			Current URL:        $original_url
			SSH URL:            $ssh_url
			HTTPS URL:          $https_url
			Proposed Protocol:  $protocol
			Proposed URL:       $proposed_url
		EOF

		# apply difference if necessary
		if test "$proposed_url" != "$original_url"; then
			set_remote_url "$remote" "$proposed_url"
		fi

		# test application
		function test_with_fallback {
			local protocol="$1"
			print_line "Testing remote=[$remote] protocol=[$protocol] url=[$proposed_url] ..."
			if __test_remote "$remote"; then
				return 0
			else
				if test "$protocol" = 'ssh'; then
					if confirm --positive --ppid=$$ -- "Protocol [$protocol] failed, try HTTPS?"; then
						set_remote_url "$remote" "$https_url"
						test_with_fallback 'https'
					else
						return 1
					fi
				else
					if confirm --positive --ppid=$$ -- "Protocol [$protocol] failed, try SSH?"; then
						set_remote_url "$remote" "$ssh_url"
						test_with_fallback 'ssh'
					else
						return 1
					fi
				fi
			fi
		}
		test_with_fallback "$protocol"
	}

	function format_protocol {
		local url="$1" protocol="${2-}" domain='' path=''
		protocol="$(get_protocol "$protocol")"

		# remove ssh prefix
		url="${url#*git@}"
		# remove https prefix
		url="${url#*://}"
		# remove .git suffix
		url="${url%.git*}"

		# fetch domain
		domain="${url%:*}"
		if test -z "$domain" -o "$domain" = "$url"; then
			domain="${url%/*}"    # trims repo
			domain="${domain%/*}" # trims user
		fi
		# print_line "domain=$domain"

		# fetch path
		path="${url#*:}"
		if test -z "$path" -o "$path" = "$url"; then
			path="${url#*/}"
		fi

		if test "$protocol" = 'https'; then
			print_line "https://$domain/$path.git"
		elif test "$protocol" = 'ssh'; then
			# ssh://git@github.com/balupton/dotfiles.git
			# and
			# git@github.com:balupton/dotfiles.git
			# are both SSH urls
			print_line "git@$domain:$path.git"
		else
			return 1
		fi
	}

	function git_review {
		if command-exists gf; then
			gf "$@"
		elif get-app --quiet -- 'Gitfox'; then
			open-app 'Gitfox' -- "$@"
		elif command-exists tower; then
			tower "$@"
		elif get-app --quiet -- 'Tower'; then
			open-app 'Tower' -- "$@"
		else
			help "No supported git reviewers installed."
		fi
	}

	function git_unstage {
		# https://stackoverflow.com/a/6919257
		git reset HEAD "$@"
	}

	function git_update {
		# verify path, assumed verified for other actions
		local BODY=''
		BODY="$(mktemp)"
		if ! git remote &>"$BODY"; then
			echo-error "$0: No git repository at $option_path"
			return 1
		elif test -z "$(cat "$BODY")"; then
			echo-error "$0: No git remotes found at $option_path"
			return 1
		fi

		# continue with the actual command
		local remote="${1-}"
		remote="$(get_remote "$remote")"

		# helper
		function do_update {
			update_protocol "$remote"
			git config pull.ff only
			git pull "$remote" "$(get_default_branch)" | tee "$BODY"
		}

		# write to BODY so that already updated can be detected
		# write to stderr so that [git_update] returns only [failure|current|updated]
		local update_status
		eval_capture --statusvar=update_status --outputpipe=/dev/stderr -- do_update
		if test "$update_status" -ne 0; then
			# update failed
			print_line 'failure'
			return 1
		elif grep --quiet --fixed-strings --regexp='Already' <"$BODY"; then
			# already up to date
			print_line 'current'
		else
			# updated successfully
			print_line 'updated'
		fi
	}

	function git_wipe {
		if confirm --positive --ppid=$$ -- "Are you sure you want to wipe [$(pwd)] to the last commit state, reverting all uncommitted files and changes?"; then
			git reset --hard
			git clean -f
		fi
	}

	# =====================================
	# Act

	case "$action" in
	'authors') get_authors "${option_args[@]}" ;;
	'author-update') author_update "${option_args[@]}" ;;
	'current-branch') get_current_branch "${option_args[@]}" ;;
	'default-branch') get_default_branch "${option_args[@]}" ;;
	'github-slug') get_github_slug "${option_args[@]}" ;;
	'first-commit') get_first_commit_entry "${option_args[@]}" ;;
	'first-commit-entry') get_first_commit_entry "${option_args[@]}" ;;
	'first-commit-hash') get_first_commit_hash "${option_args[@]}" ;;
	'first-commit-url') get_first_commit_url "${option_args[@]}" ;;
	'is-shallow') is_shallow_clone "${option_args[@]}" ;;
	'protocol-update') update_protocol "${option_args[@]}" ;;
	'protocol-format') format_protocol "${option_args[@]}" ;;
	'review') git_review "${option_args[@]}" ;;
	'unstage') git_unstage "${option_args[@]}" ;;
	'update') git_update "${option_args[@]}" ;;
	'wipe') git_wipe "${option_args[@]}" ;;
	*) help "Unknown <action>." ;;
	esac
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	git_helper "$@"
fi
