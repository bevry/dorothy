#!/usr/bin/env bash

function git_helper() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Helpers for working with git repositories.

			USAGE:
			git-helper [...options] <action> [--] [...args]

			OPTIONS:
			--path=<path>
			    Instead of the current working directory, use this path as the git repository.
			--no-path
			    Use a temporary directory as the container for the git repository.
			--verify
			    Verify the <path> contains an initialised git repository before proceeding with the <action>.

			ACTIONS:
			authors
			    Output all authors (contributors) within this git repository.

			author-update -- [old-email] [new-email] [new-name]
			    Update an author's name and email.

			current-branch
			    Output the current branch of this repository, including support for HEAD.

			default-branch
			    Output the default branch for this repository.

			first-commit | first-commit-entry
			    Output the first commit entry of this repository.

			first-commit-hash
			    Output the first commit hash of this repository.

			first-commit-url
			    Output the first commit url of this repository.

			get-remote-file -- [<remote-name>] <file>
			    Output the contents of a file from a remote repository.

			github-slug
			    Output the github slug for this repository.

			has-remote-file -- [<remote-name>] <file>
			    Check if the remote repository has a file.

			is-dorothy -- [--no-remote] [<remote-name>]
			    Is the repository a Dorothy repository?

			is-shallow
			    Is the repository a shallow clone?

			is-strongbox -- [--no-remote] [<remote-name>]
			    Does the repository contain configuration to encrypt files with Strongbox?

			protocol-update -- <remote-name> [<protocol>]
			    Set the <remote-name> to use the <protocol>.
			    If no <protocol> is specified, the preferred protocol will be selected.

			protocol-format -- <url> [<protocol>]
			    Format the <url> to the specified <protocol>.
			    If no <protocol> is specified, the preferred protocol will be selected.

			remotes
			    Output each git remote on a newline, same as [git remote] but with verbose repository checks.

			review
			    Open the git repository in your desired git reviewer, supported:
			    Gitfox.app/gf
			    Tower.app/tower

			unstage -- [...<file>]
			    Unstage all staged changes, without deleting or removing anything.

			update -- [[--remote-name=]<remote-name>] [[--remote-url=]<remote-url>]
			    Update the git repository inside <path>.
			    Outputs to stdout either:
			        failure    exit code 1
			        current    exit code 0
			        updated    exit code 0

			upstream-modification-times | umt
			    Update the modification times of cloned files to that of their commits, rather than the time of cloning.

			verify
			    Verify the <path> contains an initialised git repository.

			wipe
			    Wipe the current working directory to the state of the last commit.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item action='' option_path='' option_verify='no' option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--path='*) option_path="${item#*=}" ;;
		'--no-path') option_path="$(fs-temp --directory='git-helper' --directory --touch)" ;;
		'--no-verify'* | '--verify'*)
			option_verify="$(get-flag-value --affirmative --fallback="$option_verify" -- "$item")"
			;;
		'--')
			option_args+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if [[ -z $action ]]; then
				action="$item"
			else
				option_args+=("$item" "$@")
				shift "$#"
				break
			fi
			;;
		esac
	done

	# ensure path, and verify
	if [[ -z $option_path ]]; then
		option_path="$(pwd)"
	elif [[ ! -d $option_path ]]; then
		echo-style --error1='Unable to use git-helper on a non-existent directory: ' --code-error1="$option_path" >/dev/stderr
		return 2 # ENOENT 2 No such file or directory
	fi

	# check
	if [[ -z $action ]]; then
		help "No <action> was provided."
	fi

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# git.bash provides:
	local GIT_DEFAULT_BRANCH='main'
	local GIT_PROTOCOL='' # 'https', or 'ssh'
	load_dorothy_config 'git.bash'

	# ensure
	if [[ -z $GIT_DEFAULT_BRANCH ]]; then
		# try local first, then global
		GIT_DEFAULT_BRANCH="$(
			git config --local init.defaultBranch || git config --global init.defaultBranch || :
		)"
	fi

	# =====================================
	# Helpers

	local protocols=()
	function verify_repository {
		# verify repository
		local git_status git_output
		eval_capture --statusvar=git_status --outputvar=git_output -- git status
		if [[ $git_status -eq 128 ]]; then
			echo-style --error1='The directory is not a git repository: ' --code-error1="$option_path" >/dev/stderr
			if [[ -n $git_output ]]; then
				__print_lines "$git_output" >/dev/stderr
			fi
			return "$git_status" # makes more sense to continue inheriting the git exit status 128 than converting it to EFTYPE 79 Inappropriate file type or format
		elif [[ $git_status -ne 0 ]]; then
			echo-style --error1='Encountered an unknown git exit status ' --code-error1="$git_status" --error1=' when fetching the git status of the directory:' --code-error1="$option_path" >/dev/stderr
			if [[ -n $git_output ]]; then
				__print_lines "$git_output" >/dev/stderr
			fi
			return "$git_status"
		fi

		# done
		return 0
	}
	function load_protocols {
		if [[ ${#protocols[@]} -eq 0 ]]; then
			if ssh-helper test &>/dev/null; then
				protocols+=('ssh')
			fi
			protocols+=('https')
		fi
	}
	function get_protocol {
		local protocol="${1:-"$GIT_PROTOCOL"}"
		if [[ -n $protocol ]]; then
			__print_lines "$protocol"
		else
			load_protocols
			choose --required \
				--question='Which git protocol to use?' \
				--default="$protocol" -- "${protocols[@]}"
		fi
	}
	function get_remotes {
		# verify path, assumed verified for other actions
		local remote_status remote_output
		eval_capture --statusvar=remote_status --outputvar=remote_output -- git remote
		if [[ $remote_status -eq 128 ]]; then
			echo-style --error1='The directory is not a git repository: ' --code-error1="$option_path" >/dev/stderr
			if [[ -n $remote_output ]]; then
				__print_lines "$remote_output" >/dev/stderr
			fi
			return "$status" # makes more sense to continue inheriting the git exit status 128 than converting it to EFTYPE 79 Inappropriate file type or format
		elif [[ -z $remote_output ]]; then
			echo-style --error1='The directory is a git repository without any remotes: ' --code-error1="$option_path" >/dev/stderr
			return 91 # ENOMSG 91 No message of desired type
		elif [[ $remote_status -ne 0 ]]; then
			echo-style --error1='Encountered an unknown git exit status ' --code-error1="$remote_status" --error1=' when fetching the remotes of the directory:' --code-error1="$option_path" >/dev/stderr
			if [[ -n $remote_output ]]; then
				__print_lines "$remote_output" >/dev/stderr
			fi
			return "$remote_status"
		else
			__print_lines "$remote_output"
		fi
	}
	function get_remote_name {
		local remote="${1-}" question="${2:-"Which remote to use?"}" remotes
		if [[ -n $remote ]]; then
			__print_lines "$remote"
		else
			# assume verified
			mapfile -t remotes < <(get_remotes)
			choose --required --no-confirm-solo \
				--question="$question" \
				-- "${remotes[@]}"
		fi
	}
	function __test_remote_name {
		local remote_name="$1"
		git fetch "$remote_name"
	}
	function get_remote_url {
		local remote_name="$1"
		git remote get-url "$remote_name"
	}
	function set_remote_url {
		local remote_name="$1" remote_url="$2" applied_url
		git remote remove "$remote_name" 2>/dev/null || : # don't care if doesn't exist, and remove to ensure desired URL is applied
		git remote add "$remote_name" "$remote_url"

		# ensure it changed, as git rules may have prevented it
		applied_url="$(get_remote_url "$remote_name")"
		if [[ $applied_url != "$remote_url" ]]; then
			# it did not change, failure condition

			# output details
			# @todo style with var_dump or something
			cat <<-EOF
				Failed to update the remote [$remote_name]:
				Applied:    $remote_url
				Received:   $applied_url
			EOF

			# and check to see if it was git config rewrite rules to blame
			local global_lines='' local_lines=''
			global_lines="$(git config --global --list | grep --fixed-strings --regexp='.insteadof=')"
			if [[ -n $global_lines ]]; then
				cat <<-EOF

					you have replacement rules in your global git config, remove them if you want this to work:
					$global_lines
				EOF
			fi
			local_lines="$(git config --list | grep --fixed-strings --regexp='.insteadof=')"
			if [[ -n $local_lines ]]; then
				cat <<-EOF

					you have replacement rules in your local git config, remove them if you want this to work:
					$local_lines
				EOF
			fi
			if [[ -n $local_lines || -n $local_lines ]]; then
				cat <<-EOF

					try run the following and try again:
				EOF
				echo-regexp -gomn '^(.+)=.*$' 'git config --global --unset $1' -- "$local_lines"
				echo-regexp -gomn '^(.+)=.*$' 'git config --unset $1' -- "$local_lines"
			fi

			# note the failure
			return 1
		fi
	}
	function __does_remote_branch_exist {
		git rev-parse --verify --quiet "$1" &>/dev/null
		return
	}
	function __does_local_branch_exist {
		[[ -n "$(git branch --list "$1")" ]]
		return # explicit return with [[ required for bash v3
	}

	# =====================================
	# Action

	function get_authors {
		git shortlog --summary --email | cut -f2-
		return
	}

	function has_remote_file {
		local remote file
		if [[ $# -eq 1 ]]; then
			remote=''
			file="$1"
		elif [[ $# -eq 2 ]]; then
			remote="$1"
			file="$2"
		else
			help "has-remote-file: invalid arguments: $*"
		fi
		if [[ -z $file ]]; then
			help 'has-remote-file: requires <file>'
		fi
		remote="$(get_remote_name "$remote" "Which remote to check for $file?")"
		git cat-file -e "$remote:$file" 2>/dev/null
		return
	}

	function get_remote_file {
		local remote file
		if [[ $# -eq 1 ]]; then
			remote=''
			file="$1"
		elif [[ $# -eq 2 ]]; then
			remote="$1"
			file="$2"
		else
			help "get-remote-file: invalid arguments: $*"
		fi
		if [[ -z $file ]]; then
			help 'get-remote-file: requires <file>'
		fi
		remote="$(get_remote_name "$remote" "Which remote to get $file?")"
		git cat-file -p "$remote:$file" 2>/dev/null
		return
	}

	function __dorothy_grep {
		grep --quiet --fixed-strings \
			--regexp='Dorothy User Configuration' \
			--regexp='https://github.com/bevry/dorothy' \
			--regexp='https://dorothy.bevry.me'
		return
	}

	function is_dorothy {
		# check local
		if [[ -f 'README.md' ]]; then
			if __dorothy_grep 2>/dev/null <'README.md'; then
				return 0
			fi
		fi
		# check remote if desired
		if [[ ${1-} == '--no-remote' ]]; then
			return 1
		fi
		get_remote_file "$@" 'README.md' 2>/dev/null | __dorothy_grep
		return
	}

	function is_strongbox {
		# check local
		if [[ -f '.strongbox-keyid' ]]; then
			return 0
		fi
		# check remote if desired
		if [[ ${1-} == '--no-remote' ]]; then
			return 1
		fi
		has_remote_file "$@" '.strongbox-keyid'
		return
	}

	function get_github_slug {
		git remote -v | echo-regexp -o --regexp='.+?github[.]com[:/](.+?)[.]git.+' --replace='$1'
		return
	}

	function get_first_commit_entry {
		git log --reverse --oneline | echo-first-line || : # || : to avoid exit code 141
		return
	}

	function get_first_commit_hash {
		get_first_commit_entry | echo-regexp -o --regexp='(.+?) .+' --replace='$1'
		return
	}

	function get_first_commit_url {
		local hash slug
		hash="$(get_first_commit_hash)"
		slug="$(get_github_slug)"
		__print_lines "https://github.com/$slug/commit/$hash"
	}

	function author_update {
		# process
		local item old_email='' new_email='' new_name=''
		while [[ $# -ne 0 ]]; do
			item="$1"
			shift
			case "$item" in
			'--help' | '-h') help ;;
			'--'*) help "An unrecognised flag was provided: $item" ;;
			*)
				if [[ -z $old_email ]]; then
					old_email="$item"
				elif [[ -z $new_email ]]; then
					new_email="$item"
				elif [[ -z $new_name ]]; then
					new_name="$item"
				else
					help "An unrecognised argument was provided: $item"
				fi
				;;
			esac
		done

		# =====================================
		# Adjustments

		local emails
		mapfile -t emails < <(git shortlog --summary --email | echo-regexp -ong --regexp='<(.+?)>' --replace='$1')

		old_email="$(
			choose --linger --required \
				--question='Which email to update?' \
				--default="$old_email" \
				-- "${emails[@]}"
		)"
		new_email="$(
			ask --linger --required \
				--question='What is the new email?' \
				--default="$new_email"
		)"
		new_name="$(
			ask --linger --required \
				--question='What is the new name?' \
				--default="$new_name"
		)"

		# =====================================
		# Act

		fs-rm --quiet --no-confirm -- ./.git/refs/original

		git filter-branch --env-filter "
			OLD_EMAIL=\"$old_email\"
			CORRECT_EMAIL=\"$new_email\"
			CORRECT_NAME=\"$new_name\"
			if [ \"\$GIT_COMMITTER_EMAIL\" = \"\$OLD_EMAIL\" ]; then
				export GIT_COMMITTER_NAME=\"\$CORRECT_NAME\"
				export GIT_COMMITTER_EMAIL=\"\$CORRECT_EMAIL\"
			fi
			if [ \"\$GIT_AUTHOR_EMAIL\" = \"\$OLD_EMAIL\" ]; then
				export GIT_AUTHOR_NAME=\"\$CORRECT_NAME\"
				export GIT_AUTHOR_EMAIL=\"\$CORRECT_EMAIL\"
			fi
		" --tag-name-filter cat -- --branches --tags
	}

	function get_current_branch {
		git rev-parse --abbrev-ref HEAD 2>/dev/null || :
		return
	}

	function get_default_branch {
		# remote
		if [[ -n $GIT_DEFAULT_BRANCH ]] && __does_remote_branch_exist "$GIT_DEFAULT_BRANCH"; then
			__print_lines "$GIT_DEFAULT_BRANCH"
			return 0
		elif __does_remote_branch_exist main; then
			__print_lines main
			return 0
		elif __does_remote_branch_exist master; then
			__print_lines master
			return 0
		fi

		# local
		if [[ -n $GIT_DEFAULT_BRANCH ]] && __does_local_branch_exist "$GIT_DEFAULT_BRANCH"; then
			__print_lines "$GIT_DEFAULT_BRANCH"
			return 0
		elif __does_local_branch_exist main; then
			__print_lines main
			return 0
		elif __does_local_branch_exist master; then
			__print_lines master
			return 0
		fi

		# no branches?
		if [[ -z "$(git branch -a)" ]]; then
			# use default
			if [[ -n $GIT_DEFAULT_BRANCH ]]; then
				git checkout -b "$GIT_DEFAULT_BRANCH" &>/dev/null
				__print_lines "$GIT_DEFAULT_BRANCH"
				return 0
			else
				cat <<-EOF >/dev/stderr
					No branches exist locally or remotely and [GIT_DEFAULT_BRANCH] is not specified, so no default branch was created.

					Inside your [git.bash] configuration file, set [GIT_DEFAULT_BRANCH] to your desired default branch, then try again.
				EOF
				return 1
			fi
		else
			cat <<-EOF >/dev/stderr
				No default branch exists within the available branches:
				$(git branch -a)

				If one of these is a default branch, then
				inside your [git.bash] configuration file, set [GIT_DEFAULT_BRANCH] to the default branch, then try again.

				Currently, [GIT_DEFAULT_BRANCH] = [$GIT_DEFAULT_BRANCH]
			EOF
			return 1
		fi
	}

	function is_shallow_clone {
		[[ "$(git rev-parse --is-shallow-repository || :)" != 'false' ]]
		return # explicit return with [[ required for bash v3
	}

	function update_protocol {
		local remote="${1-}" protocol="${2-}"
		remote="$(get_remote_name "$remote" 'Which remote to configure?')"
		protocol="$(get_protocol "$protocol")"

		# process
		local original_url https_url ssh_url proposed_url=''
		original_url="$(get_remote_url "$remote" || :)"
		https_url="$(format_protocol "$original_url" https)"
		ssh_url="$(format_protocol "$original_url" ssh)"
		proposed_url="$(format_protocol "$original_url" "$protocol")"

		# @todo style with var_dump or something
		cat <<-EOF
			Git Repository:     $(pwd)
			Remote:             $remote
			Current URL:        $original_url
			SSH URL:            $ssh_url
			HTTPS URL:          $https_url
			Proposed Protocol:  $protocol
			Proposed URL:       $proposed_url
		EOF

		# apply difference if necessary
		if [[ $proposed_url != "$original_url" ]]; then
			set_remote_url "$remote" "$proposed_url" # this will set a non-existent remote
		fi
		# @todo there is an [else] edge case here where the remote does not exist, in which the below will fail

		# test application
		function test_with_fallback {
			local protocol="$1"
			# @todo style this with eval-helper pending/success/failure
			__print_lines "Testing remote=[$remote] protocol=[$protocol] url=[$proposed_url] ..."
			if __test_remote_name "$remote"; then
				return 0
			else
				if [[ $protocol == 'ssh' ]]; then
					if confirm --positive --ppid=$$ -- "Protocol [$protocol] failed, try HTTPS?"; then
						set_remote_url "$remote" "$https_url"
						test_with_fallback 'https'
					else
						return 1
					fi
				else
					if confirm --positive --ppid=$$ -- "Protocol [$protocol] failed, try SSH?"; then
						set_remote_url "$remote" "$ssh_url"
						test_with_fallback 'ssh'
					else
						return 1
					fi
				fi
			fi
		}
		test_with_fallback "$protocol"
	}

	function format_protocol {
		local url="$1" protocol="${2-}" domain='' path=''
		protocol="$(get_protocol "$protocol")"

		# remove ssh prefix
		url="${url#*git@}"
		# remove https prefix
		url="${url#*://}"
		# remove .git suffix
		url="${url%.git*}"

		# fetch domain
		domain="${url%:*}"
		if [[ -z $domain || $domain == "$url" ]]; then
			domain="${url%/*}"    # trims repo
			domain="${domain%/*}" # trims user
		fi
		# __print_lines "domain=$domain"

		# fetch path
		path="${url#*:}"
		if [[ -z $path || $path == "$url" ]]; then
			path="${url#*/}"
		fi

		if [[ $protocol == 'https' ]]; then
			__print_lines "https://$domain/$path.git"
		elif [[ $protocol == 'ssh' ]]; then
			# ssh://git@github.com/balupton/dotfiles.git
			# and
			# git@github.com:balupton/dotfiles.git
			# are both SSH urls
			__print_lines "git@$domain:$path.git"
		else
			return 1
		fi
	}

	function git_review {
		# @todo make this configurable
		if __command_exists -- gf; then
			gf "$option_path" "$@"
		elif get-app --quiet -- 'Gitfox'; then
			open-app 'Gitfox' -- "$option_path" "$@"
		elif __command_exists -- tower; then
			tower "$option_path" "$@"
		elif get-app --quiet -- 'Tower'; then
			open-app 'Tower' -- "$option_path" "$@"
		else
			help 'No supported git reviewers installed.'
		fi
	}

	function git_unstage {
		# https://stackoverflow.com/a/6919257
		git reset HEAD "$@"
	}

	function git_update {
		local item option_remote_name='' option_remote_url=''
		while [[ $# -ne 0 ]]; do
			item="$1"
			shift
			case "$item" in
			'--help' | '-h') help ;;
			'--remote='* | '--remote-name='*) option_remote_name="${item#*=}" ;;
			'--remote-url='*) option_remote_url="${item#*=}" ;;
			*)
				if [[ -z $option_remote_name ]]; then
					option_remote_name="$item"
				elif [[ -z $option_remote_url ]]; then
					option_args+=("$item" "$@")
					shift "$#"
					break
				fi
				;;
			esac
		done

		# ensure remote in case it was empty
		option_remote_name="$(get_remote_name "$option_remote_name" 'Which remote to pull?')"

		# helper
		local PULL_OUTPUT_FILE
		PULL_OUTPUT_FILE="$(mktemp)"
		function do_update {
			# avoid merge conflicts
			git config pull.ff only
			# add/update the remote url if specified
			if [[ -n $option_remote_url ]]; then
				set_remote_url "$option_remote_name" "$option_remote_url"
			fi
			# now that we know the remote name should exist, ensure it is the preferred protocol
			update_protocol "$option_remote_name"
			# update all origins, branches, and prune remote deleted branches
			git fetch --all --prune
			# apply the remote changes to the local branch
			git pull "$option_remote_name" "$(get_default_branch)" | tee -- "$PULL_OUTPUT_FILE"
		}

		# write to PULL_OUTPUT_FILE so that already updated can be detected
		# write to stderr so that [git_update] returns only [failure|current|updated]
		# @todo style this with eval-helper pending/success/failure
		local update_status
		eval_capture --statusvar=update_status --outputpipe=/dev/stderr -- do_update
		if [[ $update_status -ne 0 ]]; then
			# update failed
			echo-style --error1='git failed with exit status: ' --code-error1="$update_status" >/dev/stderr
			__print_lines 'failure'
			return 1
		elif grep --quiet --fixed-strings --regexp='Already' -- "$PULL_OUTPUT_FILE"; then
			# already up to date
			__print_lines 'current'
		else
			# updated successfully
			__print_lines 'updated'
		fi
	}

	function git_umt {
		# https://serverfault.com/a/1031956
		# git ls-tree -r --name-only HEAD -z | TZ=UTC xargs -0n1 -I_ git --no-pager log -1 --date=iso-local --format="%ad _" -- _
		# git ls-tree -r --name-only HEAD -z | TZ=UTC xargs -0n1 git --no-pager log -1 --date=iso-local --name-only -z --format='format:%ad' | perl -npe "INIT {\$/ = \"\\0\"} s@^(.*? .*?) .*?\n(.*)\$@\$date=\$1; \$name=\$2; \$name =~ s/'/'\"'\"'/sg; \"TZ=UTC touch -m --date '\$date' '\$name';\n\"@se" | bash
		# git ls-tree -r --name-only HEAD -z | TZ=UTC xargs -0n1 -I_ git --no-pager log -1 --date=iso-local --format='%ad _' -- _ | echo-wait | echo-regexp -gonm '^(.+?) \+0000 (.+)$' "TZ=UTC touch -md '\$1' '\$2'" | bash
		# ^ these all produce: xargs: warning: options --max-args and --replace/-I/-i are mutually exclusive, ignoring previous --max-args value
		# this solves it:
		# git ls-tree -r --name-only HEAD -z | TZ=UTC xargs -0 -I_ git --no-pager log -1 --date=iso-local --format='%ad _' -- _ | echo-wait | echo-regexp -gonm '^(.+?) \+0000 (.+)$' "TZ=UTC touch -md '\$1' '\$2'" | bash
		# however this is far easier, more understandable, just as quick, and supports paths with % and quotes:
		local subfiles=() subfile timestamp
		mapfile -t subfiles < <(git ls-tree -r --name-only HEAD)
		for subfile in "${subfiles[@]}"; do
			timestamp="$(TZ=UTC git --no-pager log -1 --date=iso-local --format='%ad' -- "$subfile")"
			# trim trailing +0000
			timestamp="${timestamp% +0000}"
			TZ=UTC touch -md "$timestamp" -- "$subfile"
		done
	}

	function git_wipe {
		if confirm --positive --ppid=$$ -- "Are you sure you want to wipe [$(pwd)] to the last commit state, reverting all uncommitted files and changes?"; then
			git reset --hard
			git clean -f
		fi
	}

	# =====================================
	# Act

	# enter the path so that git commands work correctly
	cd "$option_path"

	# verify?
	if [[ $option_verify == 'yes' ]]; then
		verify_repository
	fi

	# perform the action
	case "$action" in
	'authors') get_authors "${option_args[@]}" ;;
	'author-update') author_update "${option_args[@]}" ;;
	'current-branch') get_current_branch "${option_args[@]}" ;;
	'default-branch') get_default_branch "${option_args[@]}" ;;
	'has-remote-file') has_remote_file "${option_args[@]}" ;;
	'get-remote-file') get_remote_file "${option_args[@]}" ;;
	'github-slug') get_github_slug "${option_args[@]}" ;;
	'first-commit') get_first_commit_entry "${option_args[@]}" ;;
	'first-commit-entry') get_first_commit_entry "${option_args[@]}" ;;
	'first-commit-hash') get_first_commit_hash "${option_args[@]}" ;;
	'first-commit-url') get_first_commit_url "${option_args[@]}" ;;
	'is-dorothy') is_dorothy "${option_args[@]}" ;;
	'is-shallow') is_shallow_clone "${option_args[@]}" ;;
	'is-strongbox') is_strongbox "${option_args[@]}" ;;
	'protocol-update') update_protocol "${option_args[@]}" ;;
	'protocol-format') format_protocol "${option_args[@]}" ;;
	'remotes') get_remotes "${option_args[@]}" ;;
	'review') git_review "${option_args[@]}" ;;
	'unstage') git_unstage "${option_args[@]}" ;;
	'update') git_update "${option_args[@]}" ;;
	'umt' | 'upstream-modification-times') git_umt "${option_args[@]}" ;;
	'verify') verify_repository "${option_args[@]}" ;;
	'wipe') git_wipe "${option_args[@]}" ;;
	*) help "Unknown <action>: $action" ;;
	esac
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	git_helper "$@"
fi
