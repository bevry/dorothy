#!/usr/bin/env bash

function get_github_release_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	# prepare
	local expected
	local slug='uw-labs/strongbox' alias='latest' tag='v1.0.0' id='53658169'
	# don't use jqlang/jq for release test as it is too popular, so between requests values like download counts can change
	# slug='jqlang/jq' alias='latest' tag='jq-1.7rc2' id='118848514'
	# slug='probonopd/go-appimage' tag='continuous'

	# install dependencies
	setup-util-jq --quiet
	setup-util-gh --quiet

	## release ##

	# release from default
	expected="$(get-github-release --jq --release --slug="$slug")"
	eval-tester --name='release from default via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --release --slug="$slug"
	eval-tester --name='release from default via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --release --slug="$slug"

	# release from alias
	# default and alias are the same release, so data should be the same
	eval-tester --name='release from alias via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --release --slug="$slug" --alias="$alias"
	eval-tester --name='release from alias via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --release --slug="$slug" --alias="$alias"

	# release from tag
	expected="$(get-github-release --jq --release --slug="$slug" --tag="$tag")"
	eval-tester --name='release from tag via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --release --slug="$slug" --tag="$tag"
	eval-tester --name='release from tag via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --release --slug="$slug" --tag="$tag"

	# release from id
	# tag and id are the same release, so data should be the same
	eval-tester --name='release from id via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --release --slug="$slug" --id="$id"
	eval-tester --name='release from id via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --release --slug="$slug" --id="$id"

	## api-url ##

	# api-url from default
	expected="$(get-github-release --jq --api-url --slug="$slug")"
	eval-tester --name='api-url from default via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --api-url --slug="$slug"
	eval-tester --name='api-url from default via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --api-url --slug="$slug"

	# api-url from alias
	# default and alias are the same release, so data should be the same
	eval-tester --name='api-url from alias via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --api-url --slug="$slug" --alias="$alias"
	eval-tester --name='api-url from alias via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --api-url --slug="$slug" --alias="$alias"

	# api-url from tag
	expected="$(get-github-release --jq --api-url --slug="$slug" --tag="$tag")"
	eval-tester --name='api-url from tag via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --api-url --slug="$slug" --tag="$tag"
	eval-tester --name='api-url from tag via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --api-url --slug="$slug" --tag="$tag"

	# api-url from id
	# tag and id are the same release, so data should be the same
	eval-tester --name='api-url from id via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --api-url --slug="$slug" --id="$id"
	eval-tester --name='api-url from id via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --api-url --slug="$slug" --id="$id"

	## tag ##

	# tag from default
	expected="$(get-github-release --jq --tag --slug="$slug")"
	eval-tester --name='tag from default via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --tag --slug="$slug"
	eval-tester --name='tag from default via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --tag --slug="$slug"

	# tag from alias
	# default and alias are the same release, so data should be the same
	eval-tester --name='tag from alias via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --tag --slug="$slug" --alias="$alias"
	eval-tester --name='tag from alias via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --tag --slug="$slug" --alias="$alias"

	# tag from tag
	expected="$(get-github-release --jq --tag --slug="$slug" --tag="$tag")"
	eval-tester --name='tag from tag via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --tag --slug="$slug" --tag="$tag"
	eval-tester --name='tag from tag via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --tag --slug="$slug" --tag="$tag"

	# tag from id
	# tag and id are the same release, so data should be the same
	eval-tester --name='tag from id via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --tag --slug="$slug" --id="$id"
	# gh doesn't support ids

	## assets ##

	# assets from default
	expected="$(get-github-release --jq --assets --slug="$slug")"
	eval-tester --name='assets from default via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --assets --slug="$slug"
	eval-tester --name='assets from default via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --assets --slug="$slug"

	# assets from alias
	# default and alias are the same release, so data should be the same
	eval-tester --name='assets from alias via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --assets --slug="$slug" --alias="$alias"
	eval-tester --name='assets from alias via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --assets --slug="$slug" --alias="$alias"

	# assets from tag
	expected="$(get-github-release --jq --assets --slug="$slug" --tag="$tag")"
	eval-tester --name='assets from tag via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --assets --slug="$slug" --tag="$tag"
	eval-tester --name='assets from tag via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --assets --slug="$slug" --tag="$tag"

	# assets from id
	# tag and id are the same release, so data should be the same
	eval-tester --name='assets from id via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --assets --slug="$slug" --id="$id"
	# gh doesn't support ids

	## tar ##

	# tar from default
	expected="$(get-github-release --jq --tar --slug="$slug")"
	eval-tester --name='tar from default via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --tar --slug="$slug"
	eval-tester --name='tar from default via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --tar --slug="$slug"

	# tar from alias
	# default and alias are the same release, so data should be the same
	eval-tester --name='tar from alias via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --tar --slug="$slug" --alias="$alias"
	eval-tester --name='tar from alias via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --tar --slug="$slug" --alias="$alias"

	# tar from tag
	expected="$(get-github-release --jq --tar --slug="$slug" --tag="$tag")"
	eval-tester --name='tar from tag via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --tar --slug="$slug" --tag="$tag"
	eval-tester --name='tar from tag via gh was same as via jq' --stdout="$expected" \
		-- get-github-release --gh --tar --slug="$slug" --tag="$tag"

	# tar from id
	# tag and id are the same release, so data should be the same
	eval-tester --name='tar from id via diy was same as via jq' --stdout="$expected" \
		-- get-github-release --diy --tar --slug="$slug" --id="$id"
	# gh doesn't support ids
)
function get_github_release() (
	source "$DOROTHY/sources/bash.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get the latest release of a GitHub repository.

			USAGE:
			get-github-release [<org>/<repo>] [...options]

			OPTIONS:
			--slug=<org>/<repo> | <org>/<repo>
			    Use this repository, e.g. 'jqlang/jq'

			--latest
			    Use the latest release. Alias for ---alias=latest
			--alias=<alias>
			    Use this release alias, e.g. 'latest'
			--tag=<tag>
			    Use this release tag name, e.g. 'jq-1.7rc2'
			--id=<id>
			    Use this release id, e.g. '118848514'
			--release=<alias,tag,id>
			    Deprecated alias for either --alias=<alias>, --tag=<tag>, --id=<id>
			> If no specific selection is provided, then --latest is used.

			--tag
			    Fetch the tag name of the release.
			--assets
			    Fetch the assets of the release.
			--tar
			    Fetch the tarball of the release.
			--api-url
			    Fetch the api url of the release.
			--release
			    Fetch the json of the release.
			--releases
			    Fetch the releases of the repository.
			--rate-limit
				Fetch the current rate limits.
			> If no specific action is provided, then --tag is used.

			--gh
			    Enable using the GitHub CLI to fetch the release.
			--jq
			    Enable using jq to fetch the release.
			--diy
			    Enable using curl and awk to fetch the release.
			> If no specific techniques are specified, then autodetection is used.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process, @todo rewrite with option_ prefix
	local item slug='' alias='' tag='' id='' release='' action='' techniques=() technique=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		# repo
		'--slug='*) slug="${item#*=}" ;;
		# release
		'--latest') alias='latest' ;;
		'--alias='*) alias="${item#*=}" ;;
		'--tag='*) tag="${item#*=}" ;;
		'--id='*) id="${item#*=}" ;;
		'--release='*) release="${item#*=}" ;;
		# action
		'--tag') action='tag' ;;
		'--assets') action='assets' ;;
		'--tar') action='tar' ;;
		'--api-url') action='api-url' ;;
		'--release') action='release' ;;
		'--releases') action='releases' ;;
		'--rate-limit') action='rate-limit' ;;
		# technique
		'--gh') techniques+=('gh') ;;
		'--jq') techniques+=('jq') ;;
		'--diy') techniques+=('diy') ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			if test -z "$slug"; then
				slug="$item"
			else
				help "An unrecognised argument was provided: $item"
			fi
			;;
		esac
	done

	# GITHUB_API_URL
	# https://docs.github.com/en/actions/learn-github-actions/variables#default-environment-variables
	# default to the default
	if test -z "${GITHUB_API_URL-}"; then
		GITHUB_API_URL='https://api.github.com' # encounters rate limits when testing, even with authorization
	fi
	# if default, and if our CI, then use our caching proxy (however it currently doesn't return the same http error codes so ignore)
	# if test "$GITHUB_API_URL" = 'https://api.github.com' -a "${GITHUB_ACTIONS-}" -a "${GITHUB_REPOSITORY-}" = 'bevry/dorothy'; then
	# 	GITHUB_API_URL='https://bevry.me/api/github' # caches results, to avoid rate limits
	# fi

	# GITHUB_TOKEN
	if test -z "${GITHUB_TOKEN-}"; then
		GITHUB_TOKEN=''
		if command-exists gh; then
			GITHUB_TOKEN="$(gh auth token --hostname "$GITHUB_API_URL" 2>/dev/null || :)"
		fi
	fi

	# essential helpers
	function fetch_json {
		fetch --bearer-token="$GITHUB_TOKEN" "$1"
	}
	function fetch_json_of_rate_limit {
		fetch_json "$GITHUB_API_URL/rate_limit"
	}
	function extract_value_from_json_property_from_stdin {
		local property="$1"
		tr -d '\n' | awk -v property="$property" '
			{
				while ( match($0,/"[^"]*"|: false|: true|: [0-9]+/) ) {
					inner = substr($0,RSTART,RLENGTH)
					if ( inner ~ /^: / ) {
						inner = substr(inner,3)
					} else if ( inner ~ /^"/ ) {
						inner = substr(inner,2,length(inner)-2)
					}
					if ( inner == property ) {
						found = 1
					} else if ( found ) {
						print inner
						exit
					}
					$0 = substr($0,RSTART+RLENGTH)
				}
			}'
	}
	function wait_on_rate_limit {
		local json
		local now remaining reset seconds
		json="$(fetch_json_of_rate_limit)"
		# limit="$(extract_value_from_json_property_from_stdin 'limit' <<<"$json")"
		remaining="$(extract_value_from_json_property_from_stdin 'remaining' <<<"$json")"
		if test "$remaining" -gt 5; then # we need at least a few requests to do anything, so 5 seems a reasonable limit
			return 0
		fi
		now="$(date-helper --unix)"
		reset="$(extract_value_from_json_property_from_stdin 'reset' <<<"$json")"
		seconds="$((reset - now))"
		waiter "$seconds" --message="$(echo-style --notice='Waiting for the GitHub API Rate Limit to reset...' ' ' --code_notice+blink="%s remaining")"
	}

	# rate-limit action is here, to avoid the slug check for everything else
	if test "$action" = 'rate-limit'; then
		fetch_json_of_rate_limit
		return
	fi

	# enforcements
	if test -z "$slug"; then
		help 'A GitHub repository slug is required.'
	fi
	if test -n "$release"; then
		# convert release into its modern format
		if test "$release" = 'latest'; then
			echo-style --notice='deprecation warning:' ' ' --code_notice="--release=$release → --latest" >/dev/tty
			if test -n "$alias"; then
				help "[--release=latest] and [--alias=$alias] are mutually exclusive, you should only use: --alias=$alias"
			fi
			alias='latest'
		elif is-integer -- "$release"; then
			echo-style --notice='deprecation warning:' ' ' --code_notice="--release=$release → --id=$release" >/dev/tty
			if test -n "$id"; then
				help "[--release=$release] and [--id=$id] are mutually exclusive, you should only use: --id=$id"
			fi
			id="$release"
		else
			echo-style --notice='deprecation warning:' ' ' --code_notice="--release=$release → --tag=$release" >/dev/tty
			if test -n "$tag"; then
				help "[--release=$release] and [--tag=$tag] are mutually exclusive, you should only use: --tag=$tag"
			fi
			tag="$release"
		fi
	fi
	if test -n "$alias" -a "$alias" != 'latest'; then
		help '<alias> can only be ' --code='latest'
	fi
	if test -z "$alias" -a -z "$tag" -a -z "$id"; then
		# set default
		alias='latest'
	fi

	# defaults
	if test -z "$action"; then
		action='tag'
	fi
	if test "${#techniques[@]}" -eq 0; then
		if command-exists gh; then
			techniques+=('gh')
		fi
		if command-exists jq; then
			techniques+=('jq')
		fi
		techniques+=('diy')
	else
		for technique in "${techniques[@]}"; do
			if test "$technique" = 'gh'; then
				if command-missing gh; then
					echo-error 'The GitHub CLI is required for the gh technique.'
					return 1
				fi
			elif test "$technique" = 'jq'; then
				if command-missing jq; then
					echo-error 'The jq utility is required for the jq technique.'
					return 1
				fi
			fi
		done
	fi

	# =====================================
	# Helpers

	# fetch releases
	local RELEASES_API_URL="$GITHUB_API_URL/repos/$slug/releases"
	local RELEASE_API_URL_FROM_ALIAS="$GITHUB_API_URL/repos/$slug/releases/$alias"
	local RELEASE_API_URL_FROM_ID="$GITHUB_API_URL/repos/$slug/releases/$id"
	function fetch_json_of_releases {
		fetch_json "$RELEASES_API_URL"
	}
	function fetch_table_of_releases {
		gh release list --repo "$slug" --limit 100 # @todo convert into json
	}

	# fetch json of release
	function fetch_json_of_release_from_tag_via_gh {
		fetch_json "$(fetch_api_url_of_release_from_tag_via_gh)"
	}
	function fetch_json_of_release_from_tag_via_jq {
		fetch_json_of_releases | jq -r ".[] | select(.tag_name==\"$tag\")"
	}
	function fetch_json_of_release_from_tag_via_diy {
		fetch_json "$(fetch_api_url_of_release_from_tag_via_gh)"
	}

	# fetch api url
	function fetch_api_url_of_release_from_alias_via_gh {
		gh release view --repo "$slug" --json apiUrl --jq '.apiUrl'
	}
	function fetch_api_url_of_release_from_alias_via_jq {
		fetch_json "$RELEASE_API_URL_FROM_ALIAS" | jq -r '.url'
	}
	function fetch_api_url_of_release_from_alias_via_diy {
		fetch_json "$RELEASE_API_URL_FROM_ALIAS" | extract_value_from_json_property_from_stdin 'url'
	}
	function fetch_api_url_of_release_from_tag_via_gh {
		gh release view --repo "$slug" --json apiUrl --jq '.apiUrl' "$tag"
	}
	function fetch_api_url_of_release_from_tag_via_jq {
		fetch_json_of_releases | jq -r ".[] | select(.tag_name==\"$tag\") | .url"
	}
	function fetch_api_url_of_release_from_tag_via_diy {
		# this depends on tag_name being after url
		fetch_json_of_releases | tr -d '\n' | awk -v tag="$tag" '
			{
				last_innner = ""
				url = ""
				while ( match($0,/"[^"]*"/) ) {
					inner = substr($0,RSTART+1,RLENGTH-2)
					if ( last_inner == "url" && inner ~ /\/releases\/[0-9]+$/ ) {
						url = inner
					} else if ( last_inner == "tag_name" && inner == tag ) {
						print url
						exit
					}
					last_inner = inner
					$0 = substr($0,RSTART+RLENGTH)
				}
			}'
	}

	# fetch tag name
	function fetch_tag_of_release_from_alias_via_gh {
		gh release view --repo "$slug" --json tagName --jq '.tagName'
	}
	function fetch_tag_of_release_from_alias_via_jq {
		fetch_json "$RELEASE_API_URL_FROM_ALIAS" | jq -r '.tag_name'
	}
	function fetch_tag_of_release_from_alias_via_diy {
		fetch_json "$RELEASE_API_URL_FROM_ALIAS" | extract_value_from_json_property_from_stdin 'tag_name'
	}
	function fetch_tag_of_release_from_id_via_jq {
		fetch_json "$RELEASE_API_URL_FROM_ID" | jq -r '.tag_name'
	}
	function fetch_tag_of_release_from_id_via_diy {
		fetch_json "$RELEASE_API_URL_FROM_ID" | extract_value_from_json_property_from_stdin 'tag_name'
	}

	# fetch assets
	function fetch_assets_of_release_from_api_url_via_jq {
		fetch_json "$1" | jq -r '.assets[] | (.name, .browser_download_url)'
	}
	function fetch_assets_of_release_from_api_url_via_diy {
		# don't use jq, rg, or sd to accomplish this, as none of them would be installed
		# [tail -n+2] excludes the first line, which is the name of the repo
		# this is fragile as if the order of arguments change, it is all over
		# sed fixes minified json such as `},{` and `","`
		fetch_json "$1" | sed -E $'s/,/,\\\n/g' | grep --extended-regexp --regexp='"(name|browser_download_url)":' | tail -n+2 | sed -E 's/.+: *"(.+)".*/\1/'
	}
	function fetch_assets_of_release_from_alias_via_gh {
		gh release view --repo "$slug" --json assets --jq '.assets[] | (.name, .url)'
	}
	function fetch_assets_of_release_from_alias_via_jq {
		fetch_assets_of_release_from_api_url_via_jq "$RELEASE_API_URL_FROM_ALIAS"
	}
	function fetch_assets_of_release_from_alias_via_diy {
		fetch_assets_of_release_from_api_url_via_diy "$RELEASE_API_URL_FROM_ALIAS"
	}
	function fetch_assets_of_release_from_id_via_jq {
		fetch_assets_of_release_from_api_url_via_jq "$RELEASE_API_URL_FROM_ID"
	}
	function fetch_assets_of_release_from_id_via_diy {
		fetch_assets_of_release_from_api_url_via_diy "$RELEASE_API_URL_FROM_ID"
	}
	function fetch_assets_of_release_from_tag_via_gh {
		gh release view --repo "$slug" --json assets --jq '.assets[] | (.name, .url)' "$tag"
	}
	function fetch_assets_of_release_from_tag_via_jq {
		fetch_assets_of_release_from_api_url_via_jq "$(fetch_api_url_of_release_from_tag_via_jq)"
	}
	function fetch_assets_of_release_from_tag_via_diy {
		fetch_assets_of_release_from_api_url_via_diy "$(fetch_api_url_of_release_from_tag_via_diy)"
	}

	# fetch tar
	function fetch_tar_of_release_from_api_url_via_jq {
		fetch_json "$1" | jq -r '.tarball_url'
	}
	function fetch_tar_of_release_from_api_url_via_diy {
		fetch_json "$1" | extract_value_from_json_property_from_stdin 'tarball_url'
	}
	function fetch_tar_of_release_from_alias_via_gh {
		gh release view --repo "$slug" --json tarballUrl --jq '.tarballUrl'
	}
	function fetch_tar_of_release_from_alias_via_jq {
		fetch_tar_of_release_from_api_url_via_jq "$RELEASE_API_URL_FROM_ALIAS"
	}
	function fetch_tar_of_release_from_alias_via_diy {
		fetch_tar_of_release_from_api_url_via_diy "$RELEASE_API_URL_FROM_ALIAS"
	}
	function fetch_tar_of_release_from_id_via_jq {
		fetch_tar_of_release_from_api_url_via_jq "$RELEASE_API_URL_FROM_ID"
	}
	function fetch_tar_of_release_from_id_via_diy {
		fetch_tar_of_release_from_api_url_via_diy "$RELEASE_API_URL_FROM_ID"
	}
	function fetch_tar_of_release_from_tag_via_gh {
		gh release view --repo "$slug" --json tarballUrl --jq '.tarballUrl' "$tag"
	}
	function fetch_tar_of_release_from_tag_via_jq {
		fetch_tar_of_release_from_api_url_via_jq "$(fetch_api_url_of_release_from_tag_via_jq)"
	}
	function fetch_tar_of_release_from_tag_via_diy {
		fetch_tar_of_release_from_api_url_via_diy "$(fetch_api_url_of_release_from_tag_via_diy)"
	}

	# =====================================
	# Action

	# wait on rate limits if necessary
	wait_on_rate_limit

	# continue with the action
	if test "$action" = 'releases'; then
		for technique in "${techniques[@]}"; do
			if test "$technique" = 'gh'; then
				fetch_table_of_releases
				return
			else
				fetch_json_of_releases
				return
			fi
		done
		help "Unable to fetch the releases [slug = $slug, id = $id, alias = $alias, tag = $tag]"
	elif test "$action" = 'release'; then
		# used to debug the other actions
		if test -n "$id"; then
			fetch_json "$RELEASE_API_URL_FROM_ID"
			return
		fi
		if test -n "$alias"; then
			fetch_json "$RELEASE_API_URL_FROM_ALIAS"
			return
		fi
		if test -n "$tag"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'gh'; then
					fetch_json_of_release_from_tag_via_gh
					return
				elif test "$technique" = 'jq'; then
					fetch_json_of_release_from_tag_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_json_of_release_from_tag_via_diy
					return
				fi
			done
		fi
		help "Unable to fetch the release json [slug = $slug, id = $id, alias = $alias, tag = $tag]"
	elif test "$action" = 'api-url'; then
		# used to debug the other actions
		if test -n "$id"; then
			print_line "$RELEASE_API_URL_FROM_ID"
			return
		fi
		if test -n "$alias"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'gh'; then
					fetch_api_url_of_release_from_alias_via_gh
					return
				elif test "$technique" = 'jq'; then
					fetch_api_url_of_release_from_alias_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_api_url_of_release_from_alias_via_diy
					return
				fi
			done
		fi
		if test -n "$tag"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'gh'; then
					fetch_api_url_of_release_from_tag_via_gh
					return
				elif test "$technique" = 'jq'; then
					fetch_api_url_of_release_from_tag_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_api_url_of_release_from_tag_via_diy
					return
				fi
			done
		fi
		help "Unable to fetch the api url [slug = $slug, id = $id, alias = $alias, tag = $tag]"
	elif test "$action" = 'tag'; then
		# used by setup-util-elvish to fetch the latest tag name to then do a download from its website
		if test -n "$tag"; then
			print_line "$tag"
			return
		fi
		if test -n "$id"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'jq'; then
					fetch_tag_of_release_from_id_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_tag_of_release_from_id_via_diy
					return
				fi
			done
		fi
		if test -n "$alias"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'gh'; then
					fetch_tag_of_release_from_alias_via_gh
					return
				elif test "$technique" = 'jq'; then
					fetch_tag_of_release_from_alias_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_tag_of_release_from_alias_via_diy
					return
				fi
			done
		fi
		help "Unable to fetch the tag, likely because only a id with provided with gh [slug = $slug, id = $id, alias = $alias, tag = $tag]"
	elif test "$action" = 'assets'; then
		# used by setup-util-* to grab the appropriate asset for the current platform
		# id is first here, as id will incur less api calls
		if test -n "$id"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'jq'; then
					fetch_assets_of_release_from_id_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_assets_of_release_from_id_via_diy
					return
				fi
			done
		fi
		if test -n "$alias"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'gh'; then
					fetch_assets_of_release_from_alias_via_gh
					return
				elif test "$technique" = 'jq'; then
					fetch_assets_of_release_from_alias_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_assets_of_release_from_alias_via_diy
					return
				fi
			done
		fi
		if test -n "$tag"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'gh'; then
					fetch_assets_of_release_from_tag_via_gh
					return
				elif test "$technique" = 'jq'; then
					fetch_assets_of_release_from_tag_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_assets_of_release_from_tag_via_diy
					return
				fi
			done
		fi
		help "Unable to fetch the assets, likely because only a id was provided with gh [slug = $slug, id = $id, alias = $alias, tag = $tag]"
	elif test "$action" = 'tar'; then
		if test -n "$id"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'jq'; then
					fetch_tar_of_release_from_id_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_tar_of_release_from_id_via_diy
					return
				fi
			done
		fi
		if test -n "$alias"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'gh'; then
					fetch_tar_of_release_from_alias_via_gh
					return
				elif test "$technique" = 'jq'; then
					fetch_tar_of_release_from_alias_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_tar_of_release_from_alias_via_diy
					return
				fi
			done
		fi
		if test -n "$tag"; then
			for technique in "${techniques[@]}"; do
				if test "$technique" = 'gh'; then
					fetch_tar_of_release_from_tag_via_gh
					return
				elif test "$technique" = 'jq'; then
					fetch_tar_of_release_from_tag_via_jq
					return
				elif test "$technique" = 'diy'; then
					fetch_tar_of_release_from_tag_via_diy
					return
				fi
			done
		fi
		help "Unable to fetch the tarball, likely because only a id was provided with gh [slug = $slug, id = $id, alias = $alias, tag = $tag]"
	else
		help "Invalid action: $action [slug = $slug, id = $id, alias = $alias, tag = $tag]"
	fi
	help "Unable to resolve the $action for an unknown reason [slug = $slug, id = $id, alias = $alias, tag = $tag]"
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		get_github_release_test
	else
		get_github_release "$@"
	fi
fi
