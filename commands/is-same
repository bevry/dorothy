#!/usr/bin/env bash

function is_same() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Compares two paths to determine if their contents are identical, compares:
			- paths
			- real paths, via [fs-realpath]
			- structure, via [fs-structure]
			- checksum, via [checksum]

			USAGE:
			is-same [...options] -- <first path> <second path>

			OPTIONS:
			--algorithm=<algorithm>
			    The algorithm to use for checksumming.
			    See [checksum --help] for details.

			RETURNS:
			[0] if the same.
			[1] if different.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_algorithm='' option_paths=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--algorithm='*) option_algorithm="${item#*=}" ;;
		'--')
			option_paths+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# verify
	if [[ ${#option_paths[@]} -ne 2 ]]; then
		help "Not enough <path>s provided."
	fi

	# =====================================
	# Action

	# extract and absolute the paths
	local first_path second_path
	first_path="$(fs-absolute -- "${option_paths[0]}")"
	second_path="$(fs-absolute -- "${option_paths[1]}")"

	# same path
	if [[ $first_path == "$second_path" ]]; then
		echo-style \
			--header1="$first_path" $'\n' \
			$'\n' \
			--header1="$second_path" $'\n' \
			$'\n' \
			--good1="^ same because they are the same path"
		return 0
	fi

	# same target
	if [[ "$(fs-realpath -- "$first_path")" == "$(fs-realpath -- "$second_path")" ]]; then
		echo-style \
			--header1="$first_path" $'\n' \
			$'\n' \
			--header1="$second_path" $'\n' \
			$'\n' \
			--good1="^ same because they are are symlinked"
		return 0
	fi

	# same structure
	local first_structure second_structure
	first_structure="$(fs-structure --no-perms --no-time -- "$first_path")"
	second_structure="$(fs-structure --no-perms --no-time -- "$second_path")"
	if [[ $first_structure != "$second_structure" ]]; then
		echo-style \
			--header1="$first_path" $'\n' \
			--dim="$first_structure" $'\n' \
			$'\n' \
			--header1="$second_path" $'\n' \
			--dim="$second_structure" $'\n' \
			$'\n' \
			--error1='^ different because their structures differ'
		return 1
	fi

	# checksum
	local checksums
	mapfile -t checksums < <(checksum --untitled --summary --algorithm="$option_algorithm" -- "$first_path" "$second_path")

	# sanity
	if [[ ${#checksums[@]} -ne 2 ]]; then
		echo-error "Invalid amount of checksums, there should only be two, a summary checksum for each directory, instead there were ${#checksums[@]}:" $'\n' "$(echo-verbose -- "${checksums[@]}")"
		return 1
	fi

	# inform
	__print_lines "${checksums[@]}"

	# same checksum
	if [[ ${checksums[0]} == "${checksums[1]}" ]]; then
		echo-style --good1="^ same because their checksums match"
		return 0
	fi

	# otherwise
	echo-style --error1="^ different"
	return 1
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	is_same "$@"
fi
