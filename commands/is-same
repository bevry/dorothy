#!/usr/bin/env bash
source "$DOROTHY/sources/strict.bash"

# options
mapfile -t options < <(echo-before-separator "$@")
option_algorithm="$(get-flag-value algorithm -- "${options[@]}")"
mapfile -t option_paths < <(echo-after-separator "$@")

# verify
if test "${#option_paths[@]}" -ne 2 || is-help "$@"; then
	stderr cat <<-EOF
		ABOUT:
		Compares two paths to determine if their contents are identical, compares:
		- paths
		- real paths, via [fs-realpath]
		- structure, via [fs-structure]
		- checksum, via [checksum]

		USAGE:
		is-same [--algorithm=...] -- <first path> <second path>

		FLAGS:
		Provide [--algorithm=...] to pre-specify a checksum algorithm. See [checksum --help] for details.

		RETURNS:
		Exit code [0] if the same.
		Exit code [1] if different.
	EOF
	exit 22 # Invalid argument
fi

# path checks
first_path="$(fs-absolute "${option_paths[0]}")"
second_path="$(fs-absolute "${option_paths[1]}")"

# same path
if test "$first_path" = "$second_path"; then
	echo-color \
		--h1="$first_path" $'\n' \
		$'\n' \
		--h1="$second_path" $'\n' \
		$'\n' \
		--g1="^ same because they are the same path"
	exit 0
fi

# same target
if test "$(fs-realpath "$first_path")" = "$(fs-realpath "$second_path")"; then
	echo-color \
		--h1="$first_path" $'\n' \
		$'\n' \
		--h1="$second_path" $'\n' \
		$'\n' \
		--g1="^ same because they are are symlinked"
	exit 0
fi

# same structure
first_structure="$(fs-structure "$first_path")"
second_structure="$(fs-structure "$second_path")"
if test "$first_structure" != "$second_structure"; then
	echo-color \
		--h1="$first_path" $'\n' \
		--dim="$first_structure" $'\n' \
		$'\n' \
		--h1="$second_path" $'\n' \
		--dim="$second_structure" $'\n' \
		$'\n' \
		--e1='^ different because their structures differ'
	exit 1
fi

# checksum
mapfile -t checksums < <(checksum --untitled --summary --algorithm="$option_algorithm" -- "$first_path" "$second_path")
echo-lines "${checksums[@]}"

# sanity
if test "${#checksums[@]}" -ne 2; then
	echo-color --error "invalid amount of checksums, there should only be two, a summary checksum for each directory, instead there were: ${#checksums[@]}"
	exit 1
fi

# same checksum
if test "${checksums[0]}" = "${checksums[1]}"; then
	echo-color --g1 "^ same because their checksums match"
	exit 0
fi

# otherwise
cho-color --e1 "^ different"
exit 1
