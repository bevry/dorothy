#!/usr/bin/env bash

# basic version:
# https://apple.stackexchange.com/a/335164/15131

# apple provides an official tool now: First appeared in macOS 14.0
# https://apple.stackexchange.com/a/476506/15131

# applescript options:
# https://apple.stackexchange.com/a/310084/15131
# https://apple.stackexchange.com/a/421264/15131

# macOS: this one is the best, but it still doesn't support native put back
# https://github.com/russelldavis/trash101

# macOS: doesn't support unix conventions for avoiding a common bug: https://github.com/macmade/trash/issues/6
# https://github.com/macmade/trash

# macOS: not maintained
# https://github.com/morgant/tools-osx

# macOS: not maintained
# https://github.com/reklis/recycle

# macOS: not maintained: https://superuser.com/questions/116703/move-file-to-trash-on-snow-leopard-from-terminal#comment882991_116788
# http://www.dribin.org/dave/osx-trash/

# Debian, Ubuntu: no macOS: https://github.com/andreafrancia/trash-cli/issues/323#issuecomment-1848345186
# https://github.com/andreafrancia/trash-cli
# https://packages.debian.org/sid/amd64/trash-cli/filelist
# /usr/bin/trash
# /usr/bin/trash-empty
# /usr/bin/trash-list
# /usr/bin/trash-put
# /usr/bin/trash-restore
# /usr/bin/trash-rm

# superior but dead: https://github.com/oberblastmeister/trashy/issues/126
# https://github.com/oberblastmeister/trashy
# https://github.com/oberblastmeister/trashy/releases/tag/v2.0.0
# trash-x86_64-pc-windows-msvc.exe
# trash-x86_64-unknown-linux-gnu.tar.gz
# options=(
# 	--cli='trashy'
# 	--optional
# 	--no-fallback
# 	"$@"
# 	CARGO='trashy'
# 	AUR='trashy'
# )
# setup-util "${options[@]}"

# macOS, Windows, Linux: but cannot use macos system trash
# https://github.com/umlx5h/gtrash

# doesn't actually send to the system trash
# https://github.com/nivekuil/rip

# macOS: poorly maintained: https://github.com/sindresorhus/macos-trash/issues
# doesn't support any put back: https://github.com/sindresorhus/macos-trash/issues/1
# https://github.com/sindresorhus/macos-trash
# https://github.com/sindresorhus/macos-trash/releases/latest
# https://github.com/sindresorhus/macos-trash/releases/download/v1.2.0/trash.zip
# options=(
# 	--cli='trash'
# 	--optional
# 	--no-fallback
# 	"$@"
# 	BREW='macos-trash'
# 	# MINT='sindresorhus/macos-trash'
# )
# setup-util "${options[@]}"

# macOS: code seems too simple to support trash properly
# https://github.com/changkun/rmtrash
# GO='changkun.de/x/rmtrash'
# options=(
# 	--cli='rmtrash'
# 	--optional
# 	--no-fallback
# 	"$@"
# 	GO='changkun.de/x/rmtrash'
# )
# setup-util "${options[@]}"

# macOS: poorly maintained: https://github.com/ali-rantakari/trash/issues
# https://github.com/ali-rantakari/trash
# https://hasseg.org/trash/
# only provides [trash] binary

# macOS, Windows, Linux: poorly maintained: https://github.com/sindresorhus/trash-cli/issues/24
# https://github.com/sindresorhus/trash-cli
# options=(
# 	--cli='trash'
# 	--optional
# 	--no-fallback
# 	"$@"
# 	NPM='trash-cli'
# )
# setup-util "${options[@]}"

# ubuntu also has [gio trash ...]

function setup_util_trash() (
	source "$DOROTHY/sources/bash.bash"
	local options

	# uninstall poorly maintained or conflictual options
	if __command_exists -- rmtrash || __command_exists -- trashy || __command_exists -- trash-put; then #  __command_exists -- trash
		setup-util --quiet --uninstall --optional --cli='rmtrash' GO='changkun.de/x/rmtrash'
		setup-util --quiet --uninstall --optional --cli='trashy' CARGO='trashy'
		if is-mac; then
			setup-util --quiet --uninstall --optional --cli='trash-put' APT='trash-cli' AUR='trash-cli' BREW='trash-cli' DNF='trash-cli' PIP='trash-cli' PIPX='trash-cli'
			setup-util --quiet --uninstall --optional --cli='trash' BREW='macos-trash' NPM='trash-cli'
		fi
	fi

	if is-linux; then
		# https://github.com/andreafrancia/trash-cli
		# installs on macos, but only supports linux
		options=(
			--cli='trash-put'
			"$@"
			APT='trash-cli'
			AUR='trash-cli'
			# BREW='trash-cli' <-- has brew, but does not actually support macos
			DNF='trash-cli'
			PIP='trash-cli'
			PIPX='trash-cli'
		)
		setup-util "${options[@]}"
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	setup_util_trash "$@"
fi
