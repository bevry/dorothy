#!/usr/bin/env bash

function fs_absolute() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output the absolute path of a relative path.

			USAGE:
			fs-absolute [...options] [--] ...<path>

			OPTIONS:
			--sudo
			    If specified, use sudo on filesystem interactions.
			--user=<user>
			--group=<group>
			    If specified use this user and/or group for filesystem interactions.

			EXAMPLES:
			fs-absolute -- ..
			fs-absolute -- .
			fs-absolute -- ./*
			fs-absolute -- /

			QUIRKS:
			Use [fs-realpath] if you want symlinks resolved.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_paths=() option_sudo='no' option_user='' option_group=''
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-sudo'* | '--sudo'*)
			option_sudo="$(get-flag-value --affirmative --fallback="$option_sudo" -- "$item")"
			;;
		'--user='*) option_user="${item#*=}" ;;
		'--group='*) option_group="${item#*=}" ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		help 'No <path>s provided.'
	fi

	# =====================================
	# Act

	# call this again, but inside sudo
	if [[ "$option_sudo" = 'yes' || -n "$option_user" || -n "$option_group" ]]; then
		sudo-helper --inherit --user="$option_user" --group="$option_group" \
			-- fs-absolute -- "${option_paths[@]}"
		return
	fi

	local path filename
	for path in "${option_paths[@]}"; do
		# don't use [pwd -P] as -P resolves symlinks
		# and resolving symlinks is what [fs-realpath] is for
		filename="$(basename "$path")"
		if [[ $filename == '/' ]]; then
			# handles root
			__print_lines '/'
		elif [[ $filename == '..' ]]; then
			# handles parent
			(
				cd "$(dirname "$path")/.."
				pwd
			)
		elif [[ $filename == '.' ]]; then
			# handles cwd
			(
				cd "$(dirname "$path")"
				pwd
			)
		else
			# handles files and directories
			(
				cd "$(dirname "$path")"
				__print_lines "$(pwd)/$filename"
			)
		fi
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	fs_absolute "$@"
fi
