#!/usr/bin/env bash

# https://github.com/uw-labs/strongbox

# https://github.com/uw-labs/strongbox/releases
# strongbox_1.1.0_checksums.txt
# strongbox_1.1.0_darwin_amd64
# strongbox_1.1.0_darwin_arm64
# strongbox_1.1.0_freebsd_386
# strongbox_1.1.0_freebsd_amd64
# strongbox_1.1.0_freebsd_armv6
# strongbox_1.1.0_linux_386
# strongbox_1.1.0_linux_amd64
# strongbox_1.1.0_linux_arm64
# strongbox_1.1.0_linux_armv6
# strongbox_1.1.0_windows_386.exe
# strongbox_1.1.0_windows_amd64.exe
# strongbox_1.1.0_windows_arm64.exe
# strongbox_1.1.0_windows_armv6.exe

# @todo add bsd support

function setup_util_strongbox() (
	source "$DOROTHY/sources/bash.bash"

	# configure
	function do_configure {
		# if installed, configure
		if command-exists strongbox; then
			# perform the one-time global git configuration step
			strongbox -git-config
		fi
	}

	# improve performance for detectable utilities with conditional assets
	if setup-util "$@" --check --cli=strongbox; then
		do_configure
		return 0
	fi

	# setup
	local arch options=(
		--cli=strongbox
		"$@"
		GO='github.com/uw-labs/strongbox'
	)
	function get_github_asset_url {
		github-download \
			--dry \
			--slug='uw-labs/strongbox' \
			--latest \
			--asset-regexp="$(echo-escape-regexp -- "$1")$" | echo-first-line || :
	}
	function add_download_option {
		options+=(
			DOWNLOAD="$(get_github_asset_url "$1")"
		)
	}
	arch="$(get-arch)"
	if is-mac; then
		if test "$arch" = 'a64'; then
			add_download_option '_darwin_arm64'
		elif test "$arch" = 'x64'; then
			add_download_option '_darwin_amd64'
		fi
	elif is-linux; then
		if test "$arch" = 'a64'; then
			add_download_option '_linux_arm64'
		elif test "$arch" = 'a32'; then
			add_download_option '_linux_armv6'
		elif test "$arch" = 'x64'; then
			add_download_option '_linux_amd64'
		elif test "$arch" = 'x32'; then
			add_download_option '_linux_386'
		fi
	fi
	setup-util "${options[@]}"
	# .exe fails with: https://github.com/uw-labs/strongbox/issues/77
	# elif is-wsl; then
	# 	if test "$arch" = 'a64'; then
	# 		add_download_option '_windows_arm64.exe'
	# 	elif test "$arch" = 'a32'; then
	# 		add_download_option '_windows_armv6.exe'
	# 	elif test "$arch" = 'x64'; then
	# 		add_download_option '_windows_amd64.exe'
	# 	elif test "$arch" = 'x32'; then
	# 		add_download_option '_windows_386.exe'
	# 	fi

	# configure
	do_configure
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_util_strongbox "$@"
fi
