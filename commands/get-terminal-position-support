#!/usr/bin/env bash

function get_terminal_position_support() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Get whether reading the terminal's position (line and column) is supported, outputting [yes] if so, otherwise [no].

			USAGE:
			get-terminal-position-support [...options]

			OPTIONS:
			--quiet
			    Instead outputting [yes] or [no], return an exit status of [0] if so, otherwise [1].
		EOF
		if test "$#" -ne 0; then
			printf '%s\n' '' 'ERROR:' "$@" # don't get echo-style, as echo-style uses this
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_quiet='' option_device_file=''
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-verbose'* | '--verbose'*)
			option_quiet="$(get-flag-value --non-affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--no-quiet'* | '--quiet'*)
			option_quiet="$(get-flag-value --affirmative --fallback="$option_quiet" -- "$item")"
			;;
		'--device-file='*) option_device_file="${item#*=}" ;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	if test -z "$option_device_file"; then
		option_device_file="$(get-terminal-device-file)"
	fi

	# =====================================
	# Action

	# send an ansi query to fetch the cursor line and column, returns [^[[24;80R] where 24 is line/row/y, 80 is column/x
	# use _ to discard, the first read var is garbage, the second read var is the line, the final read var is the column
	# use a 2 second timeout, as otherwise on macos sonoma will wait forever
	# shorter timeouts aren't suitable as slower machines take a while for the response
	# the read will complete immediately upon a response thanks to [-d R] which completes reading when the R is read, which is the final character of the response
	local _ line column
	IFS='[;' read -t 2 -srd R -p $'\e[6n' _ line column 2>/dev/null <"$option_device_file" || :
	if test "$option_quiet" = 'yes'; then
		if test -n "${line-}" -a -n "${column-}"; then
			return 0
		fi
		return 1
	elif test -n "${line-}" -a -n "${column-}"; then
		__print_lines 'yes'
	else
		__print_lines 'no'
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	get_terminal_position_support "$@"
fi
