#!/usr/bin/env bash

function echo_file() (
	source "$DOROTHY/sources/stdinargs.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Output the contents of the passed file paths.

			USAGE:
			echo-file [...options] [--] ...<path>
			echo-lines ...<path> | echo-file [...options]

			OPTIONS:
			--[no-]bat
			    If affirmative, install and use [bat] if it doesn't exist.
				If missing, use [bat] if it exists.
				If negative, don't use [bat].

			--raw
			    No line numbers or filename, only file contents.

			--plain
			    No line numbers.

			$(stdinargs_options_help --)
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process our own arguments, delegate everything else to stdinargs
	local item option_bat='' option_raw='no' option_plain='no' option_args=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-bat'* | '--bat'*)
			option_bat="$(get-flag-value --affirmative --fallback="$option_bat" -- "$item")"
			;;
		'--no-raw'* | '--raw'*)
			option_raw="$(get-flag-value --affirmative --fallback="$option_raw" -- "$item")"
			;;
		'--no-plain'* | '--plain'*)
			option_plain="$(get-flag-value --affirmative --fallback="$option_plain" -- "$item")"
			;;
		# forward to stdinargs, however support mixing and matching of our options, with stdinarg options
		'--')
			option_args+=("$item" "$@")
			shift $#
			break
			;;
		*) option_args+=("$item") ;;
		esac
	done

	# install bat if yes
	if [[ $option_bat == 'yes' ]]; then
		setup-util-bat --quiet
	elif [[ -z $option_bat ]]; then
		if __command_exists -- bat; then
			option_bat='yes'
		else
			option_bat='no'
		fi
	fi

	# =====================================
	# Action

	if [[ $option_raw == 'yes' ]]; then
		# raw
		function echo_files {
			local file result=0
			while [[ $# -ne 0 ]]; do
				file="$1"
				shift
				if [[ -f $file ]]; then
					echo-trim-padding --stdin <"$file"
				else
					echo-style --error="The file does not exist." >/dev/stderr
					result=2 # ENOENT No such file or directory
					# ^ dont like this, so that all files are noted before crash
				fi
				if [[ $# -ne 0 ]]; then
					__print_lines '' ''
				fi
			done
			return "$result"
		}
	else
		# plain/bat
		local terminal_theme='' bat_cmd=(
			bat
			--paging=never
		)
		if [[ $option_plain == 'yes' ]]; then
			bat_cmd+=(
				--plain
			)
		else
			bat_cmd+=(
				--decorations=always
				--color=always
			)
		fi
		if [[ -z ${BAT_THEME-} ]]; then
			terminal_theme="$(get-terminal-theme --ignore-cache || :)"
			if [[ $terminal_theme == 'light' ]]; then
				bat_cmd+=(
					--theme=ansi
				)
			elif [[ $terminal_theme == 'dark' ]]; then
				bat_cmd+=(
					--theme=1337
				)
			fi # else bat is installed, but without knowing the terminal theme, we cannot be sure that the bat theme is readable
		fi

		function echo_file_bat {
			local file="$1"
			if [[ $option_plain == 'yes' ]]; then
				echo-style --element="$file"
				"${bat_cmd[@]}" "$file" # eval
				echo-style --/element="$file"
			else
				"${bat_cmd[@]}" "$file"
			fi
		}
		function echo_files {
			local file result=0 bat_status=1
			while [[ $# -ne 0 ]]; do
				file="$1"
				shift
				if [[ -f $file ]]; then
					if [[ $option_bat == 'yes' ]]; then
						eval_capture --statusvar=bat_status -- echo_file_bat "$file"
					fi
					if [[ "$bat_status" -ne 0 ]]; then
						echo-style \
							--element="$file" --newline \
							--code="$(echo-trim-padding --stdin <"$file")" --newline \
							--/element="$file"
					fi
				else
					echo-style --stderr \
						--element="$file" --newline \
						--error="The file does not exist." --newline \
						--/element="$file" --status=2
					result=2 # ENOENT No such file or directory
					# ^ dont like this, so that all files are noted before crash
				fi
				if [[ $# -ne 0 ]]; then
					__print_lines '' ''
				fi
			done
			return "$result"
		}
	fi

	local files=()
	function on_line {
		files+=("$1")
	}
	function on_finish {
		echo_files "${files[@]}"
	}

	stdinargs "${option_args[@]}"
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	echo_file "$@"
fi
