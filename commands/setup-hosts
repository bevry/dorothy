#!/usr/bin/env bash

function setup_hosts() (
	source "$DOROTHY/sources/bash.bash"
	source "$(type -P eval-helper)"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Adapt your system's hosts configuration to the desired values.

			USAGE:
			setup-hosts
			# ^ use your prior configuration, or if there is none, prompt for configuration

			setup-hosts --configure
			# ^ force reconfiguration
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_configure='no'
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-configure'* | '--configure'*)
			option_configure="$(get-flag-value --affirmative --fallback="$option_configure" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Dependencies

	setup-util-gsed --quiet

	# =====================================
	# Start

	echo-segment --h1="Setup Hosts file"

	# =====================================
	# Configuration

	source "$DOROTHY/sources/config.sh"

	# hosts.bash provides:
	local OPTIONS=() CHOICE=''
	load_dorothy_config 'hosts.bash'

	# adjustments
	if test -z "$CHOICE" -o "$option_configure" = 'yes'; then
		if test "${#OPTIONS[@]}" -eq 0; then
			help 'Invalid configuration, there must be valid OPTIONS.'
		fi
		CHOICE="$(
			choose-option \
				--question='Which host file do you wish to use?' \
				--label=first -- 'No custom hosts file.' 'system' "${OPTIONS[@]}"
		)"
	fi

	# turn empty choice into system
	if test -z "$CHOICE"; then
		CHOICE='system'
	fi

	# =====================================
	# Action

	# prepare
	local hosts_file='/etc/hosts'

	# helper
	function apply_hosts_file {
		# prepare
		local url custom_file content_file combined_file hostname
		url="$1"
		custom_file="$(
			fs-temp \
				--directory='setup-hosts' \
				--file='custom_file' --touch
		)"
		content_file="$(
			fs-temp \
				--directory='setup-hosts' \
				--file='content_file' --touch
		)"
		combined_file="$(
			fs-temp \
				--directory='setup-hosts' \
				--file='combined_file' --touch
		)"
		hostname="$(get-hostname)"

		# log
		echo-style --bold="Applying [$url] to [$hosts_file]..."

		# prepare defaults in case of failure
		cat <<-EOF >"$content_file"
			127.0.0.1 localhost

			# The following lines are desirable for IPv6 capable hosts
			::1 ip6-localhost ip6-loopback
			fe00::0 ip6-localnet
			ff00::0 ip6-mcastprefix
			ff02::1 ip6-allnodes
			ff02::2 ip6-allrouters
			ff02::3 ip6-allhosts
		EOF

		# grab the custom content, and save it temporarily
		# @todo test this if there was no match
		function __save_custom_segment {
			gsed -n '/<custom>/,/<\/custom>/p' <"$hosts_file" >"$custom_file"
		}
		if ! __save_custom_segment; then
			cat <<-EOF >"$custom_file"
				# <custom>
				# </custom>
			EOF
		fi

		# if we have a new file
		if test -n "$url" -a "$url" != 'system'; then
			echo-style --dim="Upgrading existing hosts file with data from: $url"

			# download the new file to a temporary location
			down "$url" --filepath="$content_file" || :

			# combine the parts
			cat "$custom_file" "$content_file" >"$combined_file"
		else
			echo-style --dim="Upgrading existing hosts file."

			# combine the parts
			cat "$custom_file" "$content_file" >"$combined_file"
		fi

		# ensure the hostname exists
		gsed --null-data --in-place --regexp-extended \
			--expression="s#(\s+)localhost\n#\1localhost\n127.0.0.1\1$hostname\n#" \
			"$combined_file"

		# combine the custom content with the new content, and save it to the destination
		sudo-helper --reason='Your sudo/root/login password is required to write the changes to the system hosts file:' -- mv -f "$combined_file" "$hosts_file"

		# fix permissions, otherwise `sudo systemctl status systemd-resolved` could fail with:
		# Failed to open /etc/hosts: Permission denied
		fs-own --permissions=644 --admin \
			-- /etc/hosts

		# log
		echo-style --success="Applied [$url] to [$hosts_file]."
	}

	# apply
	apply_hosts_file "$CHOICE"

	# =====================================
	# Reconfigure

	# update configuration
	dorothy-config 'hosts.bash' --prefer=local -- \
		--field='CHOICE' --value="$CHOICE"

	# =====================================
	# Finish

	echo-segment --g1="Setup Hosts file"

	# finally, flush dns
	flush-dns
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	setup_hosts "$@"
fi
