#!/usr/bin/env bash

# NOTE: for installation segments, be sure to use "$DOROTHY/commands/blah" as paths have not yet been configured

# determine directory
if test -z "${DOROTHY-}"; then
	# legacy compat
	if test -n "${BDIR-}"; then
		export DOROTHY="$BDIR"
	else
		export DOROTHY="$HOME/.dorothy"
	fi
fi

# determine intent
if test "${1-}" = 'update'; then
	DOROTHY_SKIP_SHELL='yes'
fi

# update or install dorothy
if test -d "$DOROTHY"; then
	if test -z "${DOROTHY_SKIP_UPDATE-}"; then
		# update
		echo
		echo "Updating the Dorothy installation at $DOROTHY"
		cd "$DOROTHY" || exit 1
		log="$(mktemp)"
		"$DOROTHY/commands/ok" "$DOROTHY/commands/silent" git-protocol-apply origin
		git pull origin "$("$DOROTHY/commands/git-default-branch")" > "$log"
		cat "$log"
		if grep "Already" < "$log"; then
			echo "...Dorothy already updated, continuing!"
			rm "$log"
		else
			echo -e '\n\nDorothy was updated, open a new terminal and run the earlier command again...'
			rm "$log"
			exit 1
		fi
	fi
else
	# install
	echo
	echo "Installing Dorothy into $DOROTHY"
	git clone "https://github.com/bevry/dorothy.git" "$DOROTHY"
fi

# ensure any updated or installed commands have the correct permissions
cd "$DOROTHY" || exit 1
chmod -f +x ./commands/*

# stop git complaints for dorothy repo
"$DOROTHY/commands/silent" git config pull.ff only

# confirm hostname is intentional
hostname="$("$DOROTHY/commands/get-hostname")"
if test "$hostname" = 'ubuntu'; then
	if "$DOROTHY/commands/confirm-bool" "This machine's hostname is currently generic [$hostname], would you like to change it?"; then
		read -r -p "What should the new hostname be? " hostname
		if test -n "$hostname"; then
			"$DOROTHY/commands/get-hostname" "$hostname"
		else
			echo "Proceeding with the existing hostname: $hostname"
		fi
	fi
fi

# update or install user
if test -d "$DOROTHY/user"; then
	if test -z "${DOROTHY_SKIP_UPDATE-}"; then
		# update
		echo
		echo "Updating the Dorothy user configuration at $DOROTHY/user"
		cd "$DOROTHY/user" || exit 1
		log="$(mktemp)"
		"$DOROTHY/commands/ok" "$DOROTHY/commands/silent" git-protocol-apply origin
		if ! git pull origin "$("$DOROTHY/commands/git-default-branch")" > "$log"; then
			echo "...Dorothy user configuration was unable to be updated, you will have to figure out why later (probably you are disconnected, or there is no remote pushes yet), continuing!"
			rm "$log"
		else
			cat "$log"
			if grep "Already" < "$log"; then
				echo "...Dorothy user configuration already updated, continuing!"
				rm "$log"
			else
				echo -e '\n\nDorothy user configuration was updated, open a new terminal and run the earlier command again...'
				rm "$log"
				exit 1
			fi
		fi
	fi
else
	echo
	# check for skip
	if test -z "${DOROTHY_SKIP_USER-}"; then
		# install
		if test -z "${DOROTHY_USER_REPO-}"; then
			# can't use truthy, or ok command yet, as still installing
			repo=''
			status='404'
			user="${DOROTHY_USER-}"  # allow setting via environment variable
			if test -z "$user"; then
				user="$(git config --global github.user || exit 0)"
				if test -z "$user"; then
					user="$(whoami)"
					if test "$user" = 'ubuntu'; then
						user=''
					fi
				fi
			fi
			echo "Dorothy houses user configuration inside its own git repository."
			if test -n "$user"; then
				status="$(curl -I -s -w '%{http_code}\n' -o /dev/null "https://github.com/$user/dotfiles")"
				repo="https://github.com/$user/dotfiles.git"
				if test "$status" -eq 200; then
					if ! "$DOROTHY/commands/confirm-bool" "Does this repository house your Dorothy user configuration? [$repo]"; then
						repo=''
					fi
				fi
			fi
			if test -z "$repo"; then
				echo "If you don't have a repository for it yet, then create one at https://github.com/new using the following details:"
				printf "\tRepository name: dotfiles\n"
				printf "\tDescription: My user configuration for the Dorothy dotfile ecosystem: https://github.com/bevry/dorothy\n"
				printf "\tVisibility: Public\n"
				printf "\tInitialize with: keep everything unchecked\n"
				echo ''
				echo 'Once you have created a repository to house your Dorothy user configuration, then type its URL below.'
				if test -n "$user"; then
					repo="https://github.com/$user/dotfiles.git"
					printf "\tor press ENTER to confirm its URL as [%s]\n" "$repo"
				fi
				read -r -p "> " DOROTHY_USER_REPO
				if test -z "$DOROTHY_USER_REPO"; then
					export DOROTHY_USER_REPO="$repo"
				fi
			fi
		fi

		# clone
		echo "Cloning the Dorothy user configuration into $DOROTHY/user"
		if ! git clone "$DOROTHY_USER_REPO" "$DOROTHY/user"; then
			echo "The clone of the repository [$DOROTHY_USER_REPO] to [$DOROTHY/user] failed."
			echo "Dorothy will initialise the directory as a git repository, and leave it up to you to sync it up with a remote."
			echo
		fi
	fi

	# if skipped, or clone fail, then create the directory
	if ! test -d "$DOROTHY/user"; then
		echo "Scaffolding empty user configuration as instructured..."
		mkdir -p "$DOROTHY/user"
		cd "$DOROTHY/user" || exit 1
		"$DOROTHY/commands/silent" git init
	else
		cd "$DOROTHY/user" || exit 1
	fi

	# stop git complaints for dorothy user repo
	"$DOROTHY/commands/silent" git config pull.ff only

	# create env.sh if it doesn't exist
	# as cloning out a repo that expects it will cause it all to fail
	# if you don't use env.sh then send PR to make this optional via an env var or argument
	if "$DOROTHY/commands/is-missing" "$DOROTHY/user/env.sh"; then
		cat << EOF > "$DOROTHY/user/env.sh"
#!/usr/bin/env sh
# this file must be compatible with fish, zsh, bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration

# use this file for placing things that you do not want committed to git

EOF
	fi

	# seed
	if "$DOROTHY/commands/is-missing" "$DOROTHY/user/source.bash" && "$DOROTHY/commands/confirm-positive" "Would you like to seed the configuration with the defaults?"; then
		mkdir -p "$DOROTHY/user/commands"

		# source.bash
		cat << EOF > "$DOROTHY/user/source.bash"
#!/usr/bin/env bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration
# https://github.com/bevry/dorothy/blob/master/sources/defaults.bash

# inherit the cross-platform shell configuration
source "\$DOROTHY/user/source.sh"

EOF

		# source.sh
		cat << EOF > "$DOROTHY/user/source.sh"
#!/usr/bin/env sh
# this file must be compatible with fish, zsh, bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration
# https://github.com/bevry/dorothy/blob/master/sources/defaults.sh

# source my env file
. "\$DOROTHY/user/env.sh"

EOF

		# .gitignore
		cat << EOF > "$DOROTHY/user/.gitignore"
**/env/
**/env.*
**/secrets/

EOF

		# user installed
	fi
fi

# ensure any updated or installed commands have the correct permissions
cd "$DOROTHY" || exit 1
"$DOROTHY/commands/ok" "$DOROTHY/commands/silent" chmod -f +x ./user/commands/*  # would fail if no commands

# proceed with shell cofniguration
if test -z "${DOROTHY_SKIP_SHELL-}"; then
	# now that dorothy is confirmed to exist, proceed with strict mode
	source "$DOROTHY/sources/strict.bash"

	echo
	echo 'Dorothy will now confirm the modifications required to have it be loaded by your shell.'
	echo
	function check {
		if "$DOROTHY/commands/is-file" "$1"; then
			echo ''
			echo "== <$1> =="
			"$DOROTHY/commands/trim" < "$1"
			echo "== </$1> =="
			echo
			if "$DOROTHY/commands/confirm-positive" "The above file is probably deprecated with Dorothy, would you like to remove it?"; then
				rm "$1"
			fi
		fi
		return 0
	}
	check "$HOME/.profile"
	check "$HOME/.bash_profile"
	check "$HOME/.bashrc"
	check "$HOME/.zshrc"
	check "$HOME/.config/fish/config.fish"
	echo ''

	if "$DOROTHY/commands/confirm-positive" "Would you like bash to use Dorothy?"; then
		if "$DOROTHY/commands/is-mac" || "$DOROTHY/commands/is-ubuntu"; then
			# shellcheck disable=SC2016
			printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.bash_profile"
		else
			# shellcheck disable=SC2016
			printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.bashrc"
		fi
	fi

	if "$DOROTHY/commands/confirm-positive" "Would you like zsh to use Dorothy?"; then
		# shellcheck disable=SC2016
		printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.zshrc"
	fi

	if "$DOROTHY/commands/confirm-positive" "Would you like fish to use Dorothy?"; then
		mkdir -p "$HOME/.config/fish"
		# shellcheck disable=SC2016
		printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.fish"\n' "$DOROTHY" >>  "$HOME/.config/fish/config.fish"
	fi

	"$DOROTHY/commands/confirm" "Dorothy is now installed, this terminal will now be closed..."
	exit
fi
