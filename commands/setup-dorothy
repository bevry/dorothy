#!/usr/bin/env bash

# NOTE: for installation segments, be sure to use "$DOROTHY/commands/blah" as paths have not yet been configured

# determine directory
if test -z "${DOROTHY-}"; then
	# legacy compat
	if test -n "${BDIR-}"; then
		export DOROTHY="$BDIR"
	else
		export DOROTHY="$HOME/.dorothy"
	fi
fi

# update or install dorothy
echo
if test -d "$DOROTHY"; then
	# update
	echo "Updating the Dorothy installation at $DOROTHY"
	cd "$DOROTHY"
	log="$(mktemp)"
	"$DOROTHY/commands/ok" "$DOROTHY/commands/silent" git-protocol-apply origin
	git pull origin "$("$DOROTHY/commands/git-default-branch")" > "$log"
	cat "$log"
	if grep "Already" < "$log"; then
		echo "...Dorothy already updated, continuing!"
		rm "$log"
	else
		echo -e '\n\nDorothy was updated, open a new terminal and run the earlier command again...'
		rm "$log"
		exit 1
	fi
else
	# install
	echo "Installing Dorothy into $DOROTHY"
	git clone "https://github.com/bevry/dorothy.git" "$DOROTHY"
fi

# ensure any updated or installed commands have the correct permissions
cd "$DOROTHY"
chmod -f +x ./commands/*

# update or install user
echo
if test -d "$DOROTHY/user"; then
	# update
	echo "Updating the Dorothy user configuration at $DOROTHY/user"
	cd "$DOROTHY/user"
	log="$(mktemp)"
	ok silent git-protocol-apply origin
	if ! git pull origin "$(git-default-branch)" > "$log"; then
		echo "...Dorothy user configuration was unable to be updated, you will have to figure out why later (probably you are disconnected, or there is no remote pushes yet), continuing!"
		rm "$log"
	else
		cat "$log"
		if grep "Already" < "$log"; then
			echo "...Dorothy user configuration already updated, continuing!"
			rm "$log"
		else
			echo -e '\n\nDorothy user configuration was updated, open a new terminal and run the earlier command again...'
			rm "$log"
			exit 1
		fi
	fi
else
	# install
	if test -z "${DOROTHY_USER_REPO-}"; then
		# can't use truthy, or ok command yet, as still installing
		user="$(git config --global github.user || exit 0)"
		if test -z "$user"; then
			user="$(whoami)"
		fi
		repo="https://github.com/$user/dotfiles.git"
		echo "Dorothy requires a repository to be made to house your user configuration."
		echo "Create a repository called \`dotfiles\` at https://github.com/new"
		echo "Confirm it to be [$repo] by pressing enter/return, or by entering your own location:"
		read -r -p "> " DOROTHY_USER_REPO
		if test -z "$DOROTHY_USER_REPO"; then
			export DOROTHY_USER_REPO="$repo"
		fi
	fi

	# clone
	echo "Cloning the Dorothy user configuration into $DOROTHY/user"
	if ! git clone "$DOROTHY_USER_REPO" "$DOROTHY/user"; then
		echo "The clone of the repository [$DOROTHY_USER_REPO] to [$DOROTHY/user] failed."
		echo "Dorothy will initialise the directory as a git repository, and leave it up to you to sync it up with a remote."
		echo
		mkdir -p "$DOROTHY/user"
		cd "$DOROTHY/user"
		"$DOROTHY/commands/silent" git init
	else
		cd "$DOROTHY/user"
	fi


	# create env.sh if it doesn't exist
	# as cloning out a repo that expects it will cause it all to fail
	# if you don't use env.sh then send PR to make this optional via an env var or argument
	if "$DOROTHY/commands/is-missing" "$DOROTHY/user/env.sh"; then
		cat << EOF > "$DOROTHY/user/env.sh"
#!/usr/bin/env sh
# this file must be compatible with fish, zsh, bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration

# use this file for placing things that you do not want committed to git

EOF
	fi

	# seed
	if "$DOROTHY/commands/is-missing" "$DOROTHY/user/source.bash" && "$DOROTHY/commands/confirm-positive" "Would you like to seed the configuration with the defaults?"; then
		mkdir -p "$DOROTHY/user/commands"

		# source.bash
		cat << EOF > "$DOROTHY/user/source.bash"
#!/usr/bin/env bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration
# https://github.com/bevry/dorothy/blob/master/sources/defaults.bash

# inherit the cross-platform shell configuration
source "\$DOROTHY/user/source.sh"

EOF

		# source.sh
		cat << EOF > "$DOROTHY/user/source.sh"
#!/usr/bin/env sh
# this file must be compatible with fish, zsh, bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration
# https://github.com/bevry/dorothy/blob/master/sources/defaults.sh

# source my env file
. "\$DOROTHY/user/env.sh"

EOF

		# .gitignore
		cat << EOF > "$DOROTHY/user/.gitignore"
**/env/
**/env.*
**/secrets/

EOF

		# user installed
	fi
fi

# ensure any updated or installed commands have the correct permissions
cd "$DOROTHY"
"$DOROTHY/commands/ok" "$DOROTHY/commands/silent" chmod -f +x ./user/commands/*  # would fail if no commands

# proceed with install
if test "${1-}" != 'update'; then
	# now that dorothy is confirmed to exist, proceed with strict mode
	source "$DOROTHY/sources/strict.bash"

	echo
	echo 'Dorothy will now confirm the modifications required to have it be loaded by your shell.'
	echo
	function check {
		if "$DOROTHY/commands/is-file" "$1"; then
			echo ''
			echo "== <$1> =="
			"$DOROTHY/commands/trim" < "$1"
			echo "== </$1> =="
			echo
			if "$DOROTHY/commands/confirm-positive" "The above file is probably deprecated with Dorothy, would you like to remove it?"; then
				rm "$1"
			fi
		fi
		return 0
	}
	check "$HOME/.profile"
	check "$HOME/.bash_profile"
	check "$HOME/.bashrc"
	check "$HOME/.zshrc"
	check "$HOME/.config/fish/config.fish"
	echo ''

	if "$DOROTHY/commands/confirm-positive" "Would you like bash to use Dorothy?"; then
		if "$DOROTHY/commands/is-mac" || "$DOROTHY/commands/is-ubuntu"; then
			# shellcheck disable=SC2016
			printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.bash_profile"
		else
			# shellcheck disable=SC2016
			printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.bashrc"
		fi
	fi

	if "$DOROTHY/commands/confirm-positive" "Would you like zsh to use Dorothy?"; then
		# shellcheck disable=SC2016
		printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.zshrc"
	fi

	if "$DOROTHY/commands/confirm-positive" "Would you like fish to use Dorothy?"; then
		mkdir -p "$HOME/.config/fish"
		# shellcheck disable=SC2016
		printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.fish"\n' "$DOROTHY" >>  "$HOME/.config/fish/config.fish"
	fi

	"$DOROTHY/commands/confirm" "Dorothy is now installed, this terminal will now be closed..."
	exit
fi
