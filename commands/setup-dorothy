#!/usr/bin/env bash

# NOTE:
# for installation segments, be sure to use "blah" as paths have not yet been configured
# use pushd/popd instead of cd, as this might be evaled in trial mode

# determine directory
if test -z "${DOROTHY-}"; then
	# legacy compat
	if test -n "${BDIR-}"; then
		export DOROTHY="$BDIR"
	else
		export DOROTHY="$HOME/.dorothy"
	fi
fi
export PATH="$DOROTHY/commands:$DOROTHY/user/commands:$PATH"  # ensure dorothy accessible for this

# extract options
action="${1-}"
skipShell="${DOROTHY_SKIP_SHELL-}"
skipUpdate="${DOROTHY_SKIP_UPDATE-}"
skipUser="${DOROTHY_SKIP_USER-}"
userRepo="${DOROTHY_USER_REPO-}"
user="${DOROTHY_USER-}"

# determine intent
if test "$action" = 'update'; then
	skipShell='yes'
fi

# update or install dorothy
if test -d "$DOROTHY"; then
	if test -z "$skipUpdate"; then
		# update
		echo
		echo "Updating the Dorothy installation at $DOROTHY"
		log="$(mktemp)"
		pushd "$DOROTHY" > /dev/null || exit 1
		ok silent git-protocol-ensure origin
		ok silent git config pull.ff only
		if ! git pull origin "$(git-default-branch)" > "$log" 2>&1; then
			cat "$log"
			echo "...Dorothy was unable to be updated, you will have to figure this out now."
			rm "$log"
			exit 1
		elif grep -q "Already" < "$log"; then
			echo "...Dorothy already updated, continuing!"
			rm "$log"
		else
			cat "$log"
			echo -e '\n\nDorothy was updated, open a new terminal and run the earlier command again...'
			chmod -f +x "$DOROTHY/commands/"*
			rm "$log"
			exit 1
		fi
		ok silent git-protocol-apply origin
		popd > /dev/null || exit 1
	fi
else
	# install
	echo
	echo "Installing Dorothy into $DOROTHY"
	git clone "https://github.com/bevry/dorothy.git" "$DOROTHY"
	chmod -f +x "$DOROTHY/commands/"*
fi

# confirm hostname is intentional
hostname="$(get-hostname)"
if test "$hostname" = 'ubuntu'; then
	if confirm-bool "This machine's hostname is currently generic [$hostname], would you like to change it?"; then
		hostname="$(ask --question="What should the new hostname be?")"
		if test -n "$hostname"; then
			set-hostname "$hostname"
		else
			echo "Proceeding with the existing hostname: $hostname"
		fi
	fi
fi

# proceed with user cofniguration
if test -z "$skipUser"; then
	# <do update>
	if test -d "$DOROTHY/user"; then
		# <skip update?>
		if test -z "$skipUpdate"; then
			# update
			echo
			echo "Updating the Dorothy user configuration at $DOROTHY/user"
			log="$(mktemp)"
			pushd "$DOROTHY/user" > /dev/null || exit 1
			ok silent git-protocol-ensure origin
			ok silent git config pull.ff only
			if ! git pull origin "$(git-default-branch)" > "$log" 2>&1; then
				cat "$log"
				echo "...Dorothy user configuration was unable to be updated, you will have to figure out why later (probably you are disconnected, or there is no remote pushes yet), continuing!"
				rm "$log"
			elif grep -q "Already" < "$log"; then
				echo "...Dorothy user configuration already updated, continuing!"
				rm "$log"
			else
				cat "$log"
				echo -e '\n\nDorothy user configuration was updated, open a new terminal and run the earlier command again...'
				ok silent chmod -f +x "$DOROTHY/user/commands/"*
				rm "$log"
				exit 1
			fi
			ok silent git-protocol-apply origin
			popd > /dev/null || exit 1
		fi # </skip update?>
	else # </do update><install>
		echo

		# detect user repo
		if test -z "$userRepo"; then
			status='404'

			# get user if not set via env
			if test -z "$user"; then
				user="$(git config --global github.user || exit 0)"
				if test -z "$user"; then
					user="$(whoami)"
					if test "$user" = 'ubuntu'; then
						user=''
					fi
				fi
			fi

			# confirm implied user repo
			echo "Dorothy houses user configuration inside its own git repository."
			if test -n "$user"; then
				status="$(http-status "https://github.com/$user/dotfiles")"
				userRepo="https://github.com/$user/dotfiles.git"
				if ! ( test "$status" -eq 200 && "confirm-bool" "Does this repository house your Dorothy user configuration? [$userRepo]" ); then
					userRepo=''
				fi
			fi

			# if no implied user repo, then prompt for repo
			if test -z "$userRepo"; then
				echo "If you don't have a repository for it yet, then create one at https://github.com/new using the following details:"
				printf "\tRepository name: dotfiles\n"
				printf "\tDescription: My user configuration for the Dorothy dotfile ecosystem: https://github.com/bevry/dorothy\n"
				printf "\tVisibility: Public\n"
				printf "\tInitialize with: keep everything unchecked\n"
				echo ''
				echo 'Once you have created a repository to house your Dorothy user configuration, then type its URL below.'
				if test -n "$user"; then
					userRepo="https://github.com/$user/dotfiles.git"
					printf "\tor press ENTER to confirm its URL as [%s]\n" "$userRepo"
				fi
				read -rp "> " manualRepo
				if test -n "$manualRepo"; then
					userRepo="$manualRepo"
				fi
			fi
		fi # </detect user repo>

		# clone
		echo "Cloning the Dorothy user configuration into $DOROTHY/user"
		if ! git clone "$userRepo" "$DOROTHY/user"; then
			echo "The clone of the repository [$userRepo] to [$DOROTHY/user] failed."
			echo "Dorothy will initialise the directory as a git repository, and leave it up to you to sync it up with a remote."
			echo
		fi # </clone user repo>

		# if skipped, or clone fail, then create the directory
		if ! test -d "$DOROTHY/user"; then
			echo "Scaffolding empty user configuration as instructured..."
			mkdir -p "$DOROTHY/user"
			pushd "$DOROTHY/user" > /dev/null || exit 1
			silent git init
			popd > /dev/null || exit 1
		fi

		# create env.sh if it doesn't exist
		# as cloning out a repo that expects it will cause it all to fail
		# if you don't use env.sh then send PR to make this optional via an env var or argument
		if is-missing "$DOROTHY/user/env.sh"; then
			cat << EOF > "$DOROTHY/user/env.sh"
#!/usr/bin/env sh
# this file must be compatible with fish, zsh, bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration

# use this file for placing things that you do not want committed to git

EOF
		fi # </env.sh

		# seed
		if is-missing "$DOROTHY/user/source.bash" && confirm-positive "Would you like to seed the configuration with the defaults?"; then
			mkdir -p "$DOROTHY/user/commands"

			# source.bash
			cat << EOF > "$DOROTHY/user/source.bash"
#!/usr/bin/env bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration
# https://github.com/bevry/dorothy/blob/master/sources/defaults.bash

# inherit the cross-platform shell configuration
source "\$DOROTHY/user/source.sh"

EOF

			# source.sh
			cat << EOF > "$DOROTHY/user/source.sh"
#!/usr/bin/env sh
# this file must be compatible with fish, zsh, bash

# dorothy configuration options:
# https://github.com/bevry/dorothy#configuration
# https://github.com/bevry/dorothy/blob/master/sources/defaults.sh

# source my env file
. "\$DOROTHY/user/env.sh"

EOF

			# .gitignore
			cat << EOF > "$DOROTHY/user/.gitignore"
**/env/
**/env.*
**/secrets/

EOF
		fi # </seed user>
	fi # </install user>
fi # </setup user>

# ensure any updated or installed commands have the correct permissions
if test -d "$DOROTHY/user/commands"; then
	ok silent chmod -f +x "$DOROTHY/user/commands/"*
fi

# proceed with shell configuration
if test -z "$skipShell"; then
	# now that dorothy is confirmed to exist, proceed with strict mode
	source "$DOROTHY/sources/strict.bash"

	echo
	echo 'Dorothy will now confirm the modifications required to have it be loaded by your shell.'
	echo
	function check {
		if is-file "$1"; then
			echo ''
			echo "== <$1> =="
			trim < "$1"
			echo "== </$1> =="
			echo
			if confirm-positive "The above file is probably deprecated with Dorothy, would you like to remove it?"; then
				rm "$1"
			fi
		fi
		return 0
	}
	check "$HOME/.profile"
	check "$HOME/.bash_profile"
	check "$HOME/.bashrc"
	check "$HOME/.zshrc"
	check "$HOME/.config/fish/config.fish"
	echo ''

	if confirm-positive "Would you like bash to use Dorothy?"; then
		# mac and raspi ubuntu
		# shellcheck disable=SC2016
		printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.bash_profile"

		# vm ubuntu
		# shellcheck disable=SC2016
		printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.bashrc"
	fi

	if confirm-positive "Would you like zsh to use Dorothy?"; then
		# shellcheck disable=SC2016
		printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.sh"\n' "$DOROTHY" >> "$HOME/.zshrc"
	fi

	if confirm-positive "Would you like fish to use Dorothy?"; then
		mkdir -p "$HOME/.config/fish"
		# shellcheck disable=SC2016
		printf '\n\n# Source our custom dotfile configuration\nsource "%s/init.fish"\n' "$DOROTHY" >>  "$HOME/.config/fish/config.fish"
	fi

	confirm "Dorothy is now installed, this terminal will now be closed..."
	exit
fi
