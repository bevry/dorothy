#!/usr/bin/env bash

# NOTE:
# this script may be eval'd or sourced
# for install and trial modes
# and dorothy may not exist yet

# prepare
export DOROTHY DOROTHY_USER_HOME DOROTHY_XDG
action="${DOROTHY_SETUP_ACTION:-"${1:-"install"}"}" # install (runs everything), update, trial
if test "${action:0:2}" = "--"; then
	action='install'
fi

# check for --xdg argument
for arg in "$@"; do
	if test "$arg" = '--xdg'; then
		DOROTHY_XDG='yes'
	elif test "$arg" = '--no-xdg' -o "$arg" = '--xdg=no'; then
		DOROTHY_XDG='no'
	fi
done

# dependencies
if ! git --version >/dev/null; then
	echo 'git is missing, please recheck the installation instructions:' >/dev/stderr
	echo 'https://github.com/bevry/dorothy' >/dev/stderr
	exit 1
fi

# check custom initiation
if test -z "${DOROTHY-}"; then
	# setup-dorothy is running via curl, so dorothy init has not happened
	# check if dorothy has previously been cloned
	# such that when we setup the shell init scripts, they go to the correct location
	if test -n "${XDG_DATA_HOME-}" -a -d "${XDG_DATA_HOME-}/dorothy"; then
		DOROTHY="$XDG_DATA_HOME/dorothy"
	elif test -d "$HOME/.local/share/dorothy"; then
		DOROTHY="$HOME/.local/share/dorothy"
	else
		DOROTHY="$HOME/.dorothy"
	fi
fi

# ensure dorothy, and its xdg permutations are accessible
export PATH="$DOROTHY/commands:$HOME/.dorothy/commands:$HOME/.local/share/dorothy/commands:$PATH"
# ^ right to left is preference

# check xdg env var
if test "${DOROTHY_XDG-}" = 'yes'; then
	# move .dorothy
	if test "$DOROTHY" = "$HOME/.dorothy"; then
		if test -d "$DOROTHY"; then
			DOROTHY="${XDG_DATA_HOME:-"$HOME/.local/share"}/dorothy"
			if test -d "$DOROTHY"; then
				echo "cannot move" >/dev/stderr
				echo "	$HOME/.dorothy" >/dev/stderr
				echo "to" >/dev/stderr
				echo "	$DOROTHY" >/dev/stderr
				echo "as both locations already exist" >/dev/stderr
				exit 1
			fi
			mv -v "$HOME/.dorothy" "$DOROTHY"
		fi
	else
		echo "Dorothy already installed to $DOROTHY"
	fi

	# move .dorothy/user
	# -h and -L are both tests for symlinks
	if test -L "$DOROTHY/user"; then
		DOROTHY_USER_HOME="$(fs-realpath "$DOROTHY/user")"
		echo "Dorothy User Configuration already installed to $DOROTHY_USER_HOME"
	else
		DOROTHY_USER_HOME="${DOROTHY_USER_HOME:-"${XDG_CONFIG_HOME:-"$HOME/.config"}/dorothy"}"
		if test -d "$DOROTHY/user"; then
			# gotta move it
			DOROTHY_USER_HOME="${DOROTHY_USER_HOME:-"${XDG_CONFIG_HOME:-"$HOME/.config"}/dorothy"}"
			mv -v "$DOROTHY/user" "$DOROTHY_USER_HOME"
			ln -vsfF "$DOROTHY_USER_HOME" "$DOROTHY/user"
		else
			echo "Dorothy User Configuration will be installed to $DOROTHY_USER_HOME"
		fi
	fi
elif test "$DOROTHY_XDG" = 'no'; then
	# undo dorothy
	DOROTHY="${XDG_DATA_HOME:-"$HOME/.local/share"}/dorothy"
	if test -d "$DOROTHY"; then
		mv -v "$DOROTHY" "$HOME/.dorothy"
	fi
	DOROTHY="$HOME/.dorothy"

	# undo dorothy/user
	if test -L "$DOROTHY/user"; then
		DOROTHY_USER_HOME="$(fs-realpath "$DOROTHY/user")"
		rm -v "$DOROTHY/user"
		mv -v "$DOROTHY_USER_HOME" "$DOROTHY/user"
	fi
	DOROTHY_USER_HOME=''
fi

# helpers
git_init() {
	mkdir -p "$1"
	pushd "$1" >/dev/null || exit 1
	git init
	popd >/dev/null
}
install_dorothy() {
	# check
	if test -d "$DOROTHY"; then
		update_dorothy
		return "$?"
	fi

	# act
	echo
	echo "Installing Dorothy into $DOROTHY"
	git clone "https://github.com/bevry/dorothy.git" "$DOROTHY"

	# fix permissions
	chmod -f +x "$DOROTHY/commands/"*
}
update_dorothy() {
	# check
	if test "$action" = 'trial'; then
		return
	fi

	# act
	echo
	echo "Updating the Dorothy installation at $DOROTHY"
	if git-update "$DOROTHY" >/dev/null; then
		# fix permissions
		chmod -f +x "$DOROTHY/commands/"*
	else
		echo "...Dorothy was unable to be updated, you will have to figure this out now."
		exit 1
	fi
}
setup_dorothy() {
	install_dorothy # goes to update_dorothy for us
}
setup_hostname() {
	# check
	if test "$action" != 'install'; then
		return
	fi

	# act
	hostname="$(get-hostname)"
	if test "$hostname" = 'ubuntu'; then
		if confirm-bool "This machine's hostname is currently generic [$hostname], would you like to change it?"; then
			hostname="$(ask --question="What should the new hostname be?")"
			if test -n "$hostname"; then
				set-hostname "$hostname"
			else
				echo "Proceeding with the existing hostname: $hostname"
			fi
		fi
	fi
}
install_user() {
	# check action
	if test "$action" = 'trial'; then
		return
	fi

	# check custom initiation
	if test ! -d "$DOROTHY/user"; then
		if test -n "${DOROTHY_USER_HOME-}" -a -d "${DOROTHY_USER_HOME-}"; then
			ln -vsfF "$DOROTHY_USER_HOME" "$DOROTHY/user"
		elif test -n "${XDG_CONFIG_HOME-}" -a -d "${XDG_CONFIG_HOME-}/dorothy"; then
			ln -vsfF "$XDG_CONFIG_HOME/dorothy" "$DOROTHY/user"
		elif test -d "$HOME/.config/dorothy"; then
			ln -vsfF "$HOME/.config/dorothy" "$DOROTHY/user"
		fi
	fi

	# check successful initiation
	if test -d "$DOROTHY/user"; then
		update_user
		return "$?"
	fi

	# prepare guided initiation
	echo
	local status='404' user repo temp init='no'

	# fetch username for git repo preparation
	user="$(git config --global github.user || exit 0)"
	if test -z "$user"; then
		user="$(whoami)"
		# clear generic
		if test "$user" = 'ubuntu'; then
			user=''
		fi
	fi

	# confirm implied user repo
	echo "Dorothy houses user configuration inside its own git repository."
	if test -n "$user"; then
		status="$(http-status "https://github.com/$user/dotfiles")"
		if test "$status" -eq 200; then
			# repo exists, confirm it with the user
			temp="https://github.com/$user/dotfiles.git"
			if confirm-bool "Does this repository house your Dorothy user configuration? $temp"; then
				repo="$temp"
			fi
		fi
	fi

	# if no implied user repo, then prompt for user repo
	if test -z "$repo"; then
		echo "If you don't have a repository for it yet, then create one at https://github.com/new using the following details:"
		printf "\tRepository name: dotfiles\n"
		printf "\tDescription: My user configuration for the Dorothy dotfile ecosystem: https://github.com/bevry/dorothy\n"
		printf "\tVisibility: Public\n"
		printf "\tInitialize with: keep everything unchecked\n"
		echo ''
		echo 'Once you have created a repository to house your Dorothy user configuration, then type its URL below'
		if test -n "$user"; then
			repo="https://github.com/$user/dotfiles.git"
			printf "or press ENTER to confirm its URL as [%s]\n" "$repo"
		fi
		read -rp "> " temp
		if test -n "$temp"; then
			repo="$temp"
		fi
	fi

	# clone if repo specified
	if test -n "$repo"; then
		echo "Cloning the Dorothy user configuration into $DOROTHY/user"
		if ! git clone "$repo" "$DOROTHY/user"; then
			init='yes'
			echo "The clone of the repository [$repo] to [$DOROTHY/user] failed."
			echo "Dorothy will initialise the directory as a git repository, and leave it up to you to sync it up with a remote."
			echo
		fi
	else
		init='yes'
	fi

	# if skipped, or clone fail, then create the git directory
	if test "$init" = 'yes'; then
		git_init "$DOROTHY/user" || exit 1
	fi

	# fix permissions
	if test -d "$DOROTHY/user/commands"; then
		chmod -f +x "$DOROTHY/user/commands/"*
	fi
}
update_user() {
	# check
	if test "$action" = 'trial'; then
		return
	fi

	# act
	echo
	echo "Updating the Dorothy user configuration at $DOROTHY/user"
	if git-update "$DOROTHY/user" >/dev/null; then
		if test -d "$DOROTHY/user/commands"; then
			chmod -f +x "$DOROTHY/user/commands/"*
		fi
	else
		echo "...Dorothy user configuration was unable to be updated, you will have to figure this out now."
		exit 1
	fi
}
setup_user() {
	if test "$action" = 'trial'; then
		return
	else
		if test -d "$DOROTHY/user"; then
			update_user
		else
			install_user
		fi
	fi
}
setup_adjustments() {
	# check
	if test "$action" = 'trial'; then
		return
	fi

	# deprecations
	# this is done awkardly, as we have no guarantees of being in a bash version that properly supports arrays
	deprecated_configuration_files=''
	for deprecated_configuration_file in \
		"$DOROTHY/user/source.sh" \
		"$DOROTHY/user/source.bash" \
		"$DOROTHY/user/source.zsh" \
		"$DOROTHY/user/source.fish" \
		"$DOROTHY/user/env.sh" \
		"$DOROTHY/user/env.bash" \
		"$DOROTHY/user/env.zsh" \
		"$DOROTHY/user/env.fish"; do
		if test -f "$deprecated_configuration_file"; then
			deprecated_configuration_files="$deprecated_configuration_file"$'\n'"$deprecated_configuration_files"
		fi
	done
	if test -n "$deprecated_configuration_files"; then
		echo "Dorothy has moved away from one configuration file for everything, into specialised configuration files." >/dev/stderr
		echo "Refer to: https://github.com/bevry/dorothy/discussions/24" >/dev/stderr
		echo "For instructions on how to adjust the following files:" >/dev/stderr
		echo "$deprecated_configuration_files" >/dev/stderr
	fi

	# create essential directories
	mkdir -p \
		"$DOROTHY/user/commands.local" \
		"$DOROTHY/user/commands" \
		"$DOROTHY/user/config.local" \
		"$DOROTHY/user/config"

	# gitignore
	config-helper \
		--file="$DOROTHY/user/.gitignore" \
		--find='commands.local/' --replace='commands.local/' \
		--find='config.local/' --replace='config.local/'
}
check() {
	if test -f "$1"; then
		echo ''
		echo "== <$1> =="
		echo-trim-lines <"$1"
		echo "== </$1> =="
		echo
		if confirm-positive "The above file is probably deprecated with Dorothy, would you like to replace it?"; then
			rm "$1"
		fi
	fi
}
setup_shell() {
	# check
	if test "$action" != 'install'; then
		return
	fi

	# act
	echo
	echo 'Dorothy will now confirm the modifications required to have it be loaded by your shell.'
	echo
	check "$HOME/.profile"
	check "$HOME/.bash_profile"
	check "$HOME/.bashrc"
	check "$HOME/.zshrc"
	check "$HOME/.zprofile"
	check "$HOME/.config/fish/config.fish"
	echo ''

	if confirm-positive "Would you like bash to use Dorothy?"; then
		# mac and raspi ubuntu
		config-helper \
			--file="$HOME/.bash_profile" \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"

		# vm ubuntu
		config-helper \
			--file="$HOME/.bashrc" \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"
	fi

	if confirm-positive "Would you like zsh to use Dorothy?"; then
		config-helper \
			--file="$HOME/.zshrc" \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"

		config-helper \
			--file="$HOME/.zprofile" \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.sh\" # Dorothy"
	fi

	if confirm-positive "Would you like fish to use Dorothy?"; then
		mkdir -p "$HOME/.config/fish"
		config-helper \
			--file="$HOME/.config/fish/config.fish" \
			--find='source ".+?" # Dorothy' --replace="source \"$DOROTHY/init.fish\" # Dorothy"
	fi
}

# perform the actions
setup_dorothy
source "$DOROTHY/sources/strict.bash" # it is here, as now we know dorothy does exit
setup_hostname
setup_user
setup_adjustments
setup_shell
