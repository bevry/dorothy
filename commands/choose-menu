#!/usr/bin/env bash

# QUIRKS:
# - if there are more options than [$LINES - header], then this will fall apart

# TODOS:
# - [ ] limit the options output to [$LINES - header]
# - [ ] if one gets to $LINES, and there are truncated values, then scroll downwards
# - [ ] support $COLUMNS - if a menu item is larger than the column, then it will show all of it when active

function choose_menu_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-segment --h1="TEST: $0"

	# timeout response not required
	eval-tester --name='timeout response not required' --status='60' --stderr='Read timed out [60], without selection.' \
		-- env NO_COLOR=yes choose-menu --question='timeout response not required' --timeout=5 -- a b c

	# timeout response is required
	eval-tester --name='timeout response is required' --status='60' --stderr='Read timed out [60], without selection.' \
		-- env NO_COLOR=yes choose-menu --question='timeout response is required' --timeout=5 --required -- a b c

	# default response
	{
		sleep 3
	} | eval-tester --name='default response' --stdout='1' --ignore-stderr \
		-- choose-menu --question='default response' --timeout=2 --default=b -- a b c

	# default response should clear on movement
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
	} | eval-tester --name='default response should clear on movement' --status='60' --stdout='' --ignore-stderr \
		-- choose-menu --question='default response should clear on movement' --timeout=10 --default=b -- a b c

	# default multi response
	{
		sleep 3
	} | eval-tester --name='default multi response' --stdout=$'1\n2' --ignore-stderr \
		-- choose-menu --question='default multi response' --timeout=2 --multi --default=b --default=c -- a b c

	# default multi response should not clear on movement
	{
		sleep 3
		printf $'\eOB'
		sleep 3
	} | eval-tester --name='default multi response should not clear on movement' --stdout=$'1\n2' --ignore-stderr \
		-- choose-menu --question='default multi response should not clear on movement' --timeout=10 --multi --default=b --default=c -- a b c

	# multiline defaults
	{
		sleep 3
	} | eval-tester --name='default multiline response' --stdout=$'1\n2\n3' --ignore-stderr \
		-- choose-menu --question='default multiline response' --timeout=2 --multi --default=$'b\nB' --defaults=$'c\nd' -- a $'b\nB' c d

	# first selection
	{
		sleep 3
		echo
	} | eval-tester --name='first response' --stdout='0' \
		-- choose-menu --question='first selection' -- a b c

	# second selection
	{
		# move down and select second response
		sleep 3
		printf $'\eOB'
		sleep 3
		echo
	} | eval-tester --name='second response' --stdout='1' \
		-- choose-menu --question='second selection' -- a b c

	# abort response via escape
	{
		# press escape key
		sleep 3
		printf $'\x1b'
	} | eval-tester --name='abort response via escape' \
		-- choose-menu --question='abort response via escape' -- a b c

	echo-segment --g1="TEST: $0"
	return 0
)
function choose_menu() (
	source "$DOROTHY/sources/bash.bash"
	source "$DOROTHY/sources/tty.bash"
	require_array 'mapfile'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Display a menu that the user can navigate using the keyboard.

			USAGE:
			choose-menu [...options] -- ...<item>

			RETURNS:
			The index of the result

			OPTIONS:
			--default=<value>
			--defaults=<newline separated values>
			    Pre-selected <item>s.

			--question=<question>
			    Question to display as the prompt.

			--timeout=<timeout>
			    Custom timeout value in seconds.

			--[no-]multi=[yes|NO]
			    Multiple items can be selected.

			--[no-]hints=[YES|no]
			    Display interaction hint line.

			--[no-]required=[yes|NO]
			    If required, aborting the menu will not be possible.
		EOF
		if test "$#" -ne 0; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item='' items=() defaults=() tmp=() option_question='' option_timeout='' option_multi='no' option_required='no' option_hints='yes' use_colors
	use_colors="$(echo-color-enabled --fallback=yes -- "$@")"
	while test "$#" -ne 0; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-color'* | '--color'*) ;; # handled by echo-color-enabled
		'--default='*) defaults+=("${item#*=}") ;;
		'--defaults='*)
			mapfile -t tmp <<<"${item#*=}"
			defaults+=("${tmp[@]}")
			;;
		'--question='*) option_question="${item#*=}" ;;
		'--timeout='*) option_timeout="${item#*=}" ;;
		'--no-hints'* | '--hints'*)
			option_hints="$(get-flag-value --affirmative --fallback="$option_hints" -- "$item")"
			;;
		'--no-multi'* | '--multi'*)
			option_multi="$(get-flag-value --affirmative --fallback="$option_multi" -- "$item")"
			;;
		'--no-required'* | '--required'*)
			option_required="$(get-flag-value --affirmative --fallback="$option_required" -- "$item")"
			;;
		'--')
			items+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# ensure we have items
	if test "${#items[@]}" -eq 0; then
		help 'No <item>s provided.'
	elif is-array-partial -- "${items[@]}"; then
		help 'Empty <item>s provided:' $'\n' "$(echo-verbose -- "${items[@]}")"
	fi

	# prepare vars
	# show the menu
	# one hollow circle: ⚬ ○ ◯ ❍
	# two hollow circles: ◎ ⦾ ⊚
	# one hollow, one full: ☉ ⦿ ◉
	# one full: ●
	# ▣ ▢ □ ⊡
	# ☑ ☒ ⌧
	# ✓ ✔ ✖  ✗  ✘
	local style_dim=$'\e[2m' style_reset=$'\e[0m'
	local \
		action='' \
		bin_gfmt='' \
		bin_gfold='' \
		bin_gwc='' \
		can_cancel \
		cursor=0 \
		default \
		index \
		item_original \
		item_prefix \
		item_rendered \
		item_size \
		items_bundled \
		items_bundled_size=0 \
		items_last_index \
		items_total="${#items[@]}" \
		menu_header_shrunk='' \
		menu_header_size \
		menu_header='' \
		menu_hint_extras='' \
		menu_hint_shrunk='' \
		menu_hint_size \
		menu_hint_standard='' \
		menu_hint='' \
		menu_size \
		menu_skip_remainder \
		menu_skip_render='no' \
		menu_status=0 \
		menu_title='' \
		page_last_index=0 \
		page_start_index=0 \
		paging_needed \
		paging_supported='yes' \
		read_status \
		renders \
		selected_count=0 \
		selection \
		selections \
		size_columns_prior=0 \
		size_columns=80 \
		size_content=75 \
		size_rows_prior=0 \
		size_rows=10 \
		sizes \
		style_bold=$'\e[1m' \
		style_checked \
		style_help_begin="$style_dim" \
		style_help_end="$style_reset" \
		style_indent='  ' \
		style_key_begin \
		style_key_end=" $style_reset" \
		style_magenta=$'\e[35m' \
		style_selected \
		style_unchecked \
		tty_target
	items_last_index="$((items_total - 1))"
	mapfile -t selections < <(get-array "$items_total")
	mapfile -t renders < <(get-array "$items_total")
	mapfile -t sizes < <(get-array "$items_total")

	# prepare paging
	tty_target="$(is-tty --fallback)"
	if test "$tty_target" = '/dev/stderr' || command-missing tput; then
		# fix [tput: No value for $TERM and no -T specified] errors when fetching columns and rows on CI
		paging_supported='no'
		# @todo multi-line items won't be style_indented properly, use fmt if it exists in this mode for item
	else
		if is-mac; then
			bin_gfold="$(type -P 'gfold' 2>/dev/null || :)"
			bin_gfmt="$(type -P 'gfmt' 2>/dev/null || :)"
			bin_gwc="$(type -P 'gwc' 2>/dev/null || :)"
		else
			# we could support these on macos, however fmt does not support -t on macos (it is something different, so we'd have to manually do that)
			bin_gfold="$(type -P 'fold' 2>/dev/null || :)"
			bin_gfmt="$(type -P 'fmt' 2>/dev/null || :)"
			bin_gwc="$(type -P 'wc' 2>/dev/null || :)"
		fi
		if test -z "$bin_gfold" -o -z "$bin_gfmt" -o -z "$bin_gwc"; then
			paging_supported='no'
			# don't bother installing, as that will require brew, and we might now yet have brew installed
		fi
	fi

	# select defaults
	function select_defaults {
		if test "${#defaults[@]}" -ne 0; then # bash v3 compat
			for default in "${defaults[@]}"; do
				for index in "${!items[@]}"; do
					item="${items[index]}"
					if test "$default" = "$item"; then
						selections[index]='yes'
						if test "$option_multi" = 'no'; then
							cursor="$index"
						fi
						break
					fi
				done
			done
		fi
	}
	if test "${#defaults[@]}" -ne 0; then # bash v3 compat
		can_cancel='yes'
		if test "${#defaults[@]}" -gt 1 -a "$option_multi" = 'no'; then
			help 'Multiple defaults were provided, but --multi was not set.'
		fi
		select_defaults
	elif test "$option_required" = 'no'; then
		can_cancel='yes'
	else
		can_cancel='no'
	fi

	# prepare renders
	if test "$use_colors" = 'no'; then
		style_bold=''
		style_dim=''
		style_help_begin=''
		style_help_end=''
		style_key_begin='['
		style_key_end=']'
		style_magenta=''
		style_reset=''
	elif test "$(get-terminal-theme || :)" = 'dark'; then
		style_key_begin=$'\e[30m\e[47m ' # foreground black, background white
	else
		style_key_begin=$'\e[107m ' # foreground default black, background intense white
	fi
	if test "$option_multi" = 'yes'; then
		style_checked='▣'
		style_unchecked='□'
		style_selected='⊡'
	else
		if test "$option_required" = 'yes'; then
			style_checked='●'
			style_selected='●'
		else
			style_checked='☉'
			style_selected='☉'
		fi
		style_unchecked='○'
	fi
	if test "$option_hints" = 'yes'; then
		if test "$option_multi" = 'no'; then
			menu_hint_standard+="${style_help_begin}SELECT${style_help_end}  ${style_key_begin}SPACE${style_key_end} ${style_key_begin}ENTER${style_key_end} ${style_key_begin}E${style_key_end}"
		else
			menu_hint_standard+="${style_help_begin}SELECT${style_help_end} ${style_key_begin}SPACE${style_key_end}"
			menu_hint_standard+="${style_indent}${style_help_begin}CONFIRM${style_help_end} ${style_key_begin}ENTER${style_key_end} ${style_key_begin}E${style_key_end}"
		fi
		if test "$can_cancel" = 'yes'; then
			# cancel restores defaults and leaves
			menu_hint_standard+="${style_indent}${style_help_begin}CANCEL${style_help_end} ${style_key_begin}ESC${style_key_end} ${style_key_begin}Q${style_key_end}"
		fi
		if test "$items_total" -ne 1; then
			# [⬆⬇⇧] have alignment issues, use [↑↓]
			menu_hint_standard+="${style_indent}${style_help_begin}UP${style_help_end} ${style_key_begin}↑${style_key_end} ${style_key_begin}W${style_key_end} ${style_key_begin}K${style_key_end}"
			menu_hint_standard+="${style_indent}${style_help_begin}DOWN${style_help_end} ${style_key_begin}↓${style_key_end} ${style_key_begin}S${style_key_end} ${style_key_begin}J${style_key_end}"
			menu_hint_extras+="${style_indent}${style_help_begin}FIRST${style_help_end} ${style_key_begin}HOME${style_key_end} ${style_key_begin}A${style_key_end}"
			menu_hint_extras+="${style_indent}${style_help_begin}LAST${style_help_end} ${style_key_begin}END${style_key_end} ${style_key_begin}D${style_key_end}"
			if test "$option_multi" = 'yes'; then
				menu_hint_extras+="${style_indent}${style_help_begin}ALL/NONE${style_help_end} ${style_key_begin}T${style_key_end}"
			fi
		fi
		if test "${#defaults[@]}" -ne 0; then
			menu_hint_extras+="${style_indent}${style_help_begin}DEFAULTS${style_help_end} ${style_key_begin}Z${style_key_end}"
		fi
		# tab and backspace undocumented
	fi
	if test -n "$option_question"; then
		menu_header="${style_bold}${option_question}${style_reset}"$'\n'
	fi

	# commence
	tty_start

	# this is to slow to recalculate on each interaction
	function refresh_terminal_size {
		if test "$paging_supported" = 'no'; then
			paging_needed='no'
		else
			size_rows="$(tput lines)"
			size_columns="$(tput cols)"
			if test "$size_rows" -ne "$size_rows_prior" -o "$size_columns" -ne "$size_columns_prior"; then
				size_content="$((size_columns - 5))"
				# recalculate for new size
				menu_header_shrunk="$(echo-trim-colors -- "$menu_header" | "$bin_gfold" -w "$size_columns")"
				menu_header_size="$("$bin_gwc" -l <<<"${menu_header_shrunk}")"
				menu_hint="${menu_hint_standard}${menu_hint_extras}"
				menu_hint_shrunk="$(echo-trim-colors -- "$menu_hint" | "$bin_gfold" -w "$size_columns")"
				menu_hint_size="$("$bin_gwc" -l <<<"${menu_hint_shrunk}")"
				if test "$menu_hint_size" -gt 1; then
					menu_hint="${menu_hint_standard}"
					menu_hint_shrunk="$(echo-trim-colors -- "$menu_hint" | "$bin_gfold" -w "$size_columns")"
					menu_hint_size="$("$bin_gwc" -l <<<"${menu_hint_shrunk}")"
				fi
				# move start index to current item, as otherwise it could be out of range
				if test "$size_rows" -lt "$size_rows_prior" -o "$size_columns" -lt "$size_columns_prior"; then
					# @todo we should detect if showing everything is possible before resorting to this
					page_start_index="$cursor"
					page_last_index="$items_last_index"
				fi
				# reset paging for new size
				paging_needed='maybe'
				mapfile -t renders < <(get-array "$items_total")
				mapfile -t sizes < <(get-array "$items_total")
				# update priors
				size_rows_prior="$size_rows"
				size_columns_prior="$size_columns"
			fi
		fi
	}
	function action_jump {
		# jump to number and select
		if test "$action" -le 1; then
			cursor=0
		elif test "$action" -ge "$items_total"; then
			cursor="$items_last_index"
		else
			cursor="$((action - 1))"
		fi
		action_select
	}
	function action_select {
		# toggle single
		if test "${selections[cursor]}" = 'yes'; then
			selections[cursor]=''
		else
			selections[cursor]='yes'
		fi
	}
	function action_up {
		if test "$cursor" -eq 0; then
			if test "$paging_needed" = 'yes'; then
				page_start_index="$items_last_index"
			fi
			cursor="$items_last_index"
		else
			if test "$cursor" -eq "$page_start_index"; then
				page_start_index="$((page_start_index - 1))"
			fi
			cursor="$((cursor - 1))"
		fi
	}
	function action_down {
		if test "$cursor" -eq "$items_last_index"; then
			cursor=0
			page_start_index=0
		else
			if test "$paging_needed" = 'yes' -a "$cursor" -eq "$page_last_index"; then
				page_start_index="$((page_last_index + 1))" # ="$next_page_start_index"
			fi
			cursor="$((cursor + 1))"
		fi
	}
	function action_first {
		cursor=0
		page_start_index=0
	}
	function action_last {
		if test "$paging_needed" = 'yes'; then
			page_start_index="$items_last_index"
		fi
		cursor="$items_last_index"
	}
	function action_select_and_confirm {
		selections[cursor]='yes'
	}
	function action_toggle {
		if test "${selections[cursor]}" = 'yes'; then
			selections[cursor]=''
		else
			selections[cursor]='yes'
		fi
	}
	function action_next {
		# select and move to next line
		selections[cursor]='yes'
		action_down
	}
	function action_previous {
		# unselect and move to prior line
		selections[cursor]=''
		action_up
	}
	function action_none {
		for index in "${!items[@]}"; do
			selections[index]=''
		done
	}
	function action_all {
		for index in "${!items[@]}"; do
			selections[index]='yes'
		done
	}
	function action_revert {
		action_none
		select_defaults
	}

	while test "$action" != 'done'; do
		if test "$menu_skip_render" = 'no'; then
			refresh_terminal_size
			items_bundled_size=0
			items_bundled=''
			selected_count=0
			menu_skip_remainder='no'
			for index in "${!items[@]}"; do
				if test "${selections[index]-}" = 'yes'; then
					selected_count=$((selected_count + 1))
				fi
				if test "$index" -lt "$page_start_index" -o "$menu_skip_remainder" = 'yes'; then
					continue
				fi
				# determine prefix
				item_prefix=''
				if test "$index" -eq "$cursor" -a "${selections[index]-}" = 'yes'; then
					item_prefix+="$style_magenta>  $style_checked "
				elif test "${selections[index]-}" = 'yes'; then
					item_prefix+="$style_magenta   $style_checked "
				elif test "$index" -eq "$cursor"; then
					item_prefix+="$style_magenta>  $style_selected "
				else
					item_prefix+="   $style_unchecked "
				fi
				# determine paging
				if test "$paging_needed" = 'no'; then
					# paging is no longer needed, no recalculations needed
					if test -n "${renders[index]}"; then
						# use rendered item (in case it needed to be formatted if it exists)
						items_bundled+="${item_prefix}${renders[index]}${style_reset}"$'\n'
					else
						# otehrwise use original item
						items_bundled+="${item_prefix}${items[index]}${style_reset}"$'\n'
					fi
				else
					# paging is needed, so we must recalculate bundled size
					if test -n "${renders[index]}"; then
						item_rendered="${renders[index]}"
						item_size="${sizes[index]}"
					else
						item_original="${items[index]}"
						if test "${#item_original}" -lt "$size_content" && [[ $item_original != *$'\n'* && $item_original != *$'\t'* ]]; then
							# no need to format item, as it is small enough
							item_rendered="$item_original"
							item_size=1
							renders[index]="$item_rendered"
							sizes[index]="$item_size"
						else
							# need to format item, as it is too big
							item_rendered="$("$bin_gfmt" -t -w "$size_content" <<<"$item_original")"
							item_rendered="${item_rendered//$'\n'/$'\n     '}"
							item_size="$("$bin_gwc" -l <<<"${item_rendered}")"
							renders[index]="$item_rendered"
							sizes[index]="$item_size"
						fi
					fi
					# calculate total menu size
					menu_size="$((menu_header_size + items_bundled_size + item_size + menu_hint_size))"
					if test "$menu_size" -gt "$size_rows"; then
						# the menu would now be too large, so skip the rest
						menu_skip_remainder='yes'
					else
						items_bundled+="${item_prefix}${item_rendered}${style_reset}"$'\n'
						items_bundled_size="$((items_bundled_size + item_size))"
						page_last_index="$index"
					fi
				fi
			done

			# output menu
			if test "$paging_supported" = 'yes'; then
				if test "$page_start_index" -ne 0 -o "$page_last_index" -ne "$items_last_index"; then
					paging_needed='yes'
					menu_title=$'\e]0;'"👋 $items_total items 🙌 showing $page_start_index to $page_last_index 💁‍♀️ hiding $((items_total - (page_last_index - page_start_index))) 🫣 selected $selected_count ✅"$'\a'
				else
					menu_title=$'\e]0;'"👋 $items_total items 🙌 selected $selected_count ✅"$'\a'
					paging_needed='no'
				fi
			fi
			printf '%s' "${menu_title}${menu_header}${items_bundled}${menu_hint}" >"$tty_target"
		fi

		# handle the response
		eval_capture --statusvar=read_status --stdoutvar=action -- read-key --timeout="$option_timeout"
		if test "$read_status" -eq 60; then
			if test "$selected_count" -ne 0; then
				tty_clear
				echo-style --colors="$use_colors" --notice="Read timed out [$read_status], using selection." >/dev/stderr
				sleep 3
				break # out of the while loop
			else
				tty_clear
				echo-style --colors="$use_colors" --warning="Read timed out [$read_status], without selection." >/dev/stderr
				sleep 3
				menu_status="$read_status"
				break # out of the while loop
			fi
		elif test "$read_status" -ne 0; then
			# some other failure
			tty_clear
			echo-style --colors="$use_colors" --error="Read failed [$read_status]." >/dev/stderr
			sleep 3
			menu_status="$read_status"
			break # out of the while loop
		fi

		# style_reset selection if not multi
		if test "$selected_count" -ne 0 -a "$option_multi" = 'no'; then
			# erase all selects
			for index in "${!selections[@]}"; do
				selections[index]=''
			done
		fi

		# perform action
		if is-digit -- "$action"; then
			if is-ci; then
				print_string "DIGIT=[$action]" >/dev/stderr
			fi
			action_jump
		elif test "$action" = 'up' -o "$action" = 'left' -o "$action" = 'h' -o "$action" = 'k' -o "$action" = 'w'; then
			action_up
		elif test "$action" = 'down' -o "$action" = 'right' -o "$action" = 'l' -o "$action" = 'j' -o "$action" = 's'; then
			action_down
		elif test "$action" = 'space'; then
			if test "$option_multi" = 'yes'; then
				action_toggle
			else
				action_select_and_confirm
				break
			fi
		elif test "$action" = 'enter' -o "$action" = 'e'; then
			if test "$option_multi" = 'no'; then
				action_select_and_confirm
			fi
			break
		elif test "$action" = 'escape' -o "$action" = 'q'; then
			if test "$option_multi" = 'no' -a "$option_required" = 'no'; then
				: # don't revert
			else
				action_revert
			fi
			break
		elif test "$action" = 'home' -o "$action" = 'a'; then
			action_first
		elif test "$action" = 'end' -o "$action" = 'd'; then
			action_last
		elif test "$action" = 'z'; then
			action_revert
		elif test "$option_multi" = 'yes'; then
			if test "$action" = 't'; then
				if test "$selected_count" -eq "$items_total"; then
					action_none
				else
					action_all
				fi
			elif test "$action" = 'tab'; then
				action_next
			elif test "$action" = 'backspace'; then
				action_previous
			else
				# nothing done, no need to repeat, just need to read again
				menu_skip_render='yes'
				continue
			fi
		else
			# nothing done, no need to repeat, just need to read again
			menu_skip_render='yes'
			continue
		fi
		# repeat the menu
		menu_skip_render='no'
		tty_clear
	done

	# terminate our tty
	tty_finish

	# output the custom selections
	if test "$menu_status" -eq 0; then
		for index in "${!selections[@]}"; do
			selection="${selections[index]}"
			if test "$selection" = 'yes'; then
				print_line "$index"
			fi
		done
	else
		return "$menu_status"
	fi
)

# fire if invoked standalone
if test "$0" = "${BASH_SOURCE[0]}"; then
	if test "$*" = '--test'; then
		choose_menu_test
	else
		choose_menu "$@"
	fi
fi
