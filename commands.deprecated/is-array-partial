#!/usr/bin/env bash

# pass if array is partial
# failure if array is empty or full

# also failure if sole element is empty
# so is-array-partial should always be matched with a is-array-empty check

function is_array_partial() (
	source "$DOROTHY/sources/bash.bash"
	dorothy-warnings add --code='is-array-partial' --bold=' has been deprecated in favor of ' --code='is-whitespace' --bold=' and ' --code='is-not-whitespace'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Check if an array has both empty and non-empty elements.

			USAGE:
			is-array-full [--] ...<element>

			OPTIONS:
			<element>
			    An element of the array.

			RETURNS:
			[0] if the array has both empty and non-empty elements.
			[1] if the array is entirely empty or entirely full.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_inputs=()
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--')
			option_inputs+=("$@")
			shift "$#"
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*)
			option_inputs+=("$item" "$@")
			shift "$#"
			break
			;;
		esac
	done

	# =====================================
	# Action

	local input had_empty_string='no' had_nonempty_string='no'
	for input in "${option_inputs[@]}"; do
		if [[ $had_empty_string == 'no' ]] && is-whitespace -- "$input"; then
			had_empty_string='yes'
		fi
		if [[ $had_nonempty_string == 'no' ]] && is-not-whitespace -- "$input"; then
			had_nonempty_string='yes'
		fi
		if [[ $had_empty_string == 'yes' && $had_nonempty_string == 'yes' ]]; then
			return 0
		fi
	done
	return 1
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	is_array_partial "$@"
fi
