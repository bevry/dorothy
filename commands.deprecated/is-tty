#!/usr/bin/env bash

function is_tty() (
	source "$DOROTHY/sources/bash.bash"
	dorothy-warnings add --code='is-tty' --bold=' has been deprecated in favor of ' --code='get-terminal-tty-support' --bold=' and ' --code='get-terminal-device-file' ' this is because is-tty was conflating concepts and functionality'

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >/dev/stderr
			ABOUT:
			Checks if the environment actually has a TTY available.
			This is important, as otherwise calls to [tty] will result in "not a tty" being output.

			USAGE:
			is-tty [..options]

			OPTIONS:
			--fallback
			    Output /dev/tty if available, otherwise output /dev/stderr. Always return success status.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_fallback='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-fallback'* | '--fallback'*)
			option_fallback="$(get-flag-value --affirmative --fallback="$option_fallback" -- "$item")"
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) help "An unrecognised argument was provided: $item" ;;
		esac
	done

	# =====================================
	# Action

	# correctly, safely, and without side-effects, determine if the TTY is attached, readable, and writable
	# note that &>/dev/null is only possible for checking TTY (checking stdout/stderr that way will affect stdout/stderr, it is an observer effect)
	if [[ $option_fallback == 'yes' ]]; then
		get-terminal-device-file
	else
		get-terminal-tty-support --quiet
	fi
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	is_tty "$@"
fi
