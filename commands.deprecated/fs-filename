#!/usr/bin/env bash

function fs_filename_test() (
	source "$DOROTHY/sources/bash.bash"
	echo-style --h1="TEST: $0"

	eval-tester --stdout='a.b' -- \
		fs-filename -- 'a.b.c'

	eval-tester --stdout='a' -- \
		fs-filename --first -- 'a.b.c'

	eval-tester --stdout='.dorothy/a.b' -- \
		fs-filename -- '.dorothy/a.b.c'

	eval-tester --stdout='.dorothy/a' -- \
		fs-filename --first -- '.dorothy/a.b.c'

	eval-tester --stdout='a.b' -- \
		fs-filename --basename -- '.dorothy/a.b.c'

	eval-tester --stdout='a' -- \
		fs-filename --basename --first -- '.dorothy/a.b.c'

	echo-style --g1="TEST: $0"
	return 0
)
function fs_filename() (
	source "$DOROTHY/sources/bash.bash"

	# =====================================
	# Arguments

	function help {
		cat <<-EOF >&2
			ABOUT:
			Gets the filename of a path, note that a filename is the last part of a path, be it a file or directory, or otherwise.

			USAGE:
			fs-filename [...options] [--] ...<path>

			OPTIONS:
			--first
			    If the filename has multiple extensions, only the first part is returned.

			--basename
			    If enabled, only return the basename and not the containing path.
		EOF
		if [[ $# -ne 0 ]]; then
			echo-error "$@"
		fi
		return 22 # EINVAL 22 Invalid argument
	}

	# process
	local item option_paths=() option_first='no' option_basename='no'
	while [[ $# -ne 0 ]]; do
		item="$1"
		shift
		case "$item" in
		'--help' | '-h') help ;;
		'--no-first'* | '--first'*)
			option_first="$(get-flag-value --affirmative --fallback="$option_first" -- "$item")"
			;;
		'--no-basename'* | '--basename'*)
			option_basename="$(get-flag-value --affirmative --fallback="$option_basename" -- "$item")"
			;;
		'--path='*) option_paths+=("${item#*=}") ;;
		'--')
			option_paths+=("$@")
			shift $#
			break
			;;
		'--'*) help "An unrecognised flag was provided: $item" ;;
		*) option_paths+=("$item") ;;
		esac
	done

	# check
	if [[ ${#option_paths[@]} -eq 0 ]]; then
		help 'No <path>s provided.'
	fi

	# =====================================
	# Act

	local path dirname filename
	for path in "${option_paths[@]}"; do
		# `dirname` and `basename` operate on the last forward-slash, back-slashes are not relevant as even in WSL which is our only supported Windows target, then forward-slashes are enforced/emulated.
		dirname="$(__get_substring_before_last "$path" '/' '.')" # dirname
		filename="$(__get_substring_after_last "$path" '/' "$path")" # basename
		if [[ $option_first == 'yes' ]]; then
			filename="$(__get_substring_before_first "$filename" '.' "$filename")"
		else
			filename="$(__get_substring_before_last "$filename" '.' "$filename")"
		fi
		if [[ $option_basename == 'yes' || $dirname == '.' ]]; then
			__print_lines "$filename"
		else
			__print_lines "$dirname/$filename"
		fi
	done
)

# fire if invoked standalone
if [[ $0 == "${BASH_SOURCE[0]}" ]]; then
	if [[ $* == '--test' ]]; then
		fs_filename_test
	else
		fs_filename "$@"
	fi
fi
